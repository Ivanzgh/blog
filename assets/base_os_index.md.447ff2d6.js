import{_ as e,c as o,o as a,Q as t}from"./chunks/framework.f14b72c3.js";const P=JSON.parse('{"title":"操作系统","description":"","frontmatter":{},"headers":[],"relativePath":"base/os/index.md","lastUpdated":1683514170000}'),r={name:"base/os/index.md"},s=t('<h1 id="操作系统" tabindex="-1">操作系统 <a class="header-anchor" href="#操作系统" aria-label="Permalink to &quot;操作系统&quot;">​</a></h1><h2 id="进程、线程" tabindex="-1">进程、线程 <a class="header-anchor" href="#进程、线程" aria-label="Permalink to &quot;进程、线程&quot;">​</a></h2><p><strong>进程是系统进行资源分配和调度的基本单位</strong>，特征：动态性、并发性、异步性、独立性</p><p><strong>线程是 <code>CPU</code> 调度和分派的基本单位</strong>，线程是进程的子任务</p><p>区别：</p><ul><li>一个线程只属于一个进程，一个进程可以有多个线程</li><li>进程是资源分配的最小单位，线程是<code>CPU</code>调度的最小单位</li><li>进程在执行过程中有独立的内存单元，而多个线程共享进程的内存</li><li>在创建、销毁、切换中，系统付出的时空开销，进程远大于线程</li></ul><p>为了使参与并发执行的每个程序（含数据）都能独立地运行，在操作系统中必须为其配置一个专门的数据结构，称为<strong>进程控制块</strong>（Process Control Block, PCB）。 系统利用 <code>PCB</code> 来描述进程的基本情况和活动过程，进而控制和管理进程。由程序段、相关的数据段和 <code>PCB</code> 便构成了<strong>进程实体</strong>，简称进程</p><p>为什么要引入进程和线程的概念？</p><ul><li>为了能使程序并发执行，以提高资源利用率和系统吞吐量，并且可以对并发执行的程序加以描述和控制，引入了进程的概念</li><li>引入线程是为了减少程序在并发执行时所付出的时空开销，使<code>OS</code>具有更好的并发性</li></ul><h2 id="同步、异步" tabindex="-1">同步、异步 <a class="header-anchor" href="#同步、异步" aria-label="Permalink to &quot;同步、异步&quot;">​</a></h2>',10),i=[s];function l(n,c,d,_,p,h){return a(),o("div",null,i)}const m=e(r,[["render",l]]);export{P as __pageData,m as default};
