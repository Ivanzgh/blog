import{_ as e,c as a,o as t,Q as s}from"./chunks/framework.f14b72c3.js";const b=JSON.parse('{"title":"观察者模式","description":"","frontmatter":{},"headers":[],"relativePath":"base/design-pattern/observers.md","lastUpdated":1698246525000}'),r={name:"base/design-pattern/observers.md"},i=s('<h1 id="观察者模式" tabindex="-1">观察者模式 <a class="header-anchor" href="#观察者模式" aria-label="Permalink to &quot;观察者模式&quot;">​</a></h1><p>观察者模式: 在软件设计中是一个对象，维护一个依赖列表，当任何状态发生改变时自动通知它们</p><h2 id="观察者模式和发布-订阅模式的区别" tabindex="-1">观察者模式和发布-订阅模式的区别 <a class="header-anchor" href="#观察者模式和发布-订阅模式的区别" aria-label="Permalink to &quot;观察者模式和发布-订阅模式的区别&quot;">​</a></h2><p>观察者模式中主体和观察者是互相感知的，发布-订阅模式是借助第三方来实现调度的，发布者和订阅者之间互不感知</p><p><img src="https://zghimg.oss-cn-beijing.aliyuncs.com/blog/1666418485.png" alt="image"></p><ul><li>在观察者模式中，观察者是知道 Subject 的，Subject 一直保持对观察者进行记录。然而，在发布订阅模式中， 发布者和订阅者不知道对方的存在。它们只有通过消息代理进行通信。</li><li>在发布订阅模式中，组件是松散耦合的，正好和观察者模式相反。</li><li>观察者模式大多数时候是同步的，比如当事件触发，Subject 就会去调用观察者的方法。而发布-订阅模式大多数时候是异步的（使用消息队列）。</li><li>观察者 模式需要在单个应用程序地址空间中实现，而发布-订阅更像交叉应用模式。</li></ul>',6),o=[i];function n(c,l,_,d,p,h){return t(),a("div",null,o)}const m=e(r,[["render",n]]);export{b as __pageData,m as default};
