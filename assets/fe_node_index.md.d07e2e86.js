import{_ as s,c as n,o as a,Q as l}from"./chunks/framework.f14b72c3.js";const h=JSON.parse('{"title":"Node","description":"","frontmatter":{},"headers":[],"relativePath":"fe/node/index.md","lastUpdated":1681829744000}'),p={name:"fe/node/index.md"},o=l(`<h1 id="node" tabindex="-1">Node <a class="header-anchor" href="#node" aria-label="Permalink to &quot;Node&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>node 官网下载地址: <a href="https://nodejs.org/en/download/" target="_blank" rel="noreferrer">https://nodejs.org/en/download/</a></p><p>中文文档: <a href="http://nodejs.cn/api/" target="_blank" rel="noreferrer">http://nodejs.cn/api/</a></p><p>node 和 node-sass 对应版本: <a href="https://www.npmjs.com/package/node-sass" target="_blank" rel="noreferrer">https://www.npmjs.com/package/node-sass</a></p><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时。</p><p>简单说，node 就是一个可以运行 js 代码的环境，不是一门编程语言，可以做服务器端开发</p><blockquote><p>node 运行的 js 是指 ECMAScript，不能运行 BOM 或 DOM 中的代码</p></blockquote><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h2><ul><li>单线程</li><li>异步式 I/O</li><li>事件驱动</li><li>跨平台</li></ul><p>这里的单线程是指<strong>主线程是单线程</strong>的，主线程还能有其他子线程。因为是单线程，所以只要有一个任务耗时非常长，后面的任务必须要排队等待，会拖延整个程序执行，从而降低了效率，于是提出了<strong>异步</strong>的思想。</p><h2 id="node-命令" tabindex="-1">node 命令 <a class="header-anchor" href="#node-命令" aria-label="Permalink to &quot;node 命令&quot;">​</a></h2><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;"># 查看node版本</span></span>
<span class="line"><span style="color:#F8F8F2;">node </span><span style="color:#BD93F9;">-v</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 查看npm版本，</span></span>
<span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#BD93F9;">-v</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 查看node安装目录</span></span>
<span class="line"><span style="color:#8BE9FD;">which</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">node</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 查看官方所有的node版本</span></span>
<span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">view</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">node</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">versions</span></span>
<span class="line"></span></code></pre></div><h2 id="管理-node-版本" tabindex="-1">管理 node 版本 <a class="header-anchor" href="#管理-node-版本" aria-label="Permalink to &quot;管理 node 版本&quot;">​</a></h2><p>在维护一些老项目时通常需要降低 node 的版本，如遇到 node-gyp 报错、node-sass 报错等</p><h3 id="使用-n-模块管理" tabindex="-1">使用 n 模块管理 <a class="header-anchor" href="#使用-n-模块管理" aria-label="Permalink to &quot;使用 n 模块管理&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;"># 清除npm缓存</span></span>
<span class="line"><span style="color:#F8F8F2;">sudo </span><span style="color:#F1FA8C;">npm</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">cache</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">clean</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">-f</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 全局安装 n 模块</span></span>
<span class="line"><span style="color:#F8F8F2;">sudo </span><span style="color:#F1FA8C;">npm</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">install</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">-g</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 查看是否安装成功</span></span>
<span class="line"><span style="color:#F8F8F2;">n </span><span style="color:#BD93F9;">-V</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 查看已安装的node版本</span></span>
<span class="line"><span style="color:#F8F8F2;">n </span><span style="color:#F1FA8C;">ls</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 安装指定版本，如 14.12.0</span></span>
<span class="line"><span style="color:#F8F8F2;">sudo </span><span style="color:#F1FA8C;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">14.12.0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 更新到最新的稳定版</span></span>
<span class="line"><span style="color:#F8F8F2;">sudo </span><span style="color:#F1FA8C;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">stable</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 更新到最新版本</span></span>
<span class="line"><span style="color:#F8F8F2;">sudo </span><span style="color:#F1FA8C;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">latest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 切换版本，输入 n 回车，上下键选择版本，回车安装</span></span>
<span class="line"><span style="color:#F8F8F2;">sudo </span><span style="color:#F1FA8C;">n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 删除指定版本，如 14.12.0，删除后用 n 切换一下版本</span></span>
<span class="line"><span style="color:#F8F8F2;">sudo </span><span style="color:#F1FA8C;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">rm</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">14.12.0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 卸载 n</span></span>
<span class="line"><span style="color:#F8F8F2;">sudo </span><span style="color:#F1FA8C;">npm</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">uninstall</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">-g</span></span>
<span class="line"></span></code></pre></div><h2 id="载入模块" tabindex="-1">载入模块 <a class="header-anchor" href="#载入模块" aria-label="Permalink to &quot;载入模块&quot;">​</a></h2><p>Node.js 默认是使用<code>CommonJS</code>规范</p><ul><li>require 方法 用来载入模块的</li><li>moule.exports 用来导出模块的</li></ul><p>载入系统模块和第三方模块不需要写路径，直接写名称即可，但是载入自定义模块需要写路径</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> http </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">http</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> myapp </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">../com/my.js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span></code></pre></div><blockquote><p>require 引入和 es6 的 import 引入的区别？</p></blockquote><h2 id="fs-文件系统" tabindex="-1">fs 文件系统 <a class="header-anchor" href="#fs-文件系统" aria-label="Permalink to &quot;fs 文件系统&quot;">​</a></h2><p>复制文件夹</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> path </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">path</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> fs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">fs</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">copyFile</span><span style="color:#F8F8F2;">({ </span><span style="color:#FFB86C;font-style:italic;">src</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">dest</span><span style="color:#F8F8F2;"> }) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  fs.</span><span style="color:#50FA7B;">readdir</span><span style="color:#F8F8F2;">(path.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(src), (</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">files</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (err) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">获取文件夹失败</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">throw</span><span style="color:#F8F8F2;"> err</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      files.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> oldFile </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> path.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(src, item)</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> newFile </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> path.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(dest, item)</span></span>
<span class="line"><span style="color:#F8F8F2;">        fs.</span><span style="color:#50FA7B;">copyFile</span><span style="color:#F8F8F2;">(oldFile, newFile, (</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (err) </span><span style="color:#FF79C6;">throw</span><span style="color:#F8F8F2;"> err</span></span>
<span class="line"><span style="color:#F8F8F2;">          console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(oldFile </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">复制到</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> newFile)</span></span>
<span class="line"><span style="color:#F8F8F2;">        })</span></span>
<span class="line"><span style="color:#F8F8F2;">      })</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> params </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  src</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./src/beijing</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#6272A4;">// 要复制的源文件名</span></span>
<span class="line"><span style="color:#F8F8F2;">  dest</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./src/shanghai</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#6272A4;">// 复制操作的目标文件名</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">copyFile</span><span style="color:#F8F8F2;">(params)</span></span>
<span class="line"></span></code></pre></div><p>更改文件名称</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> path </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">path</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> fs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">fs</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">rename</span><span style="color:#F8F8F2;">({ </span><span style="color:#FFB86C;font-style:italic;">dest</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">from</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">to</span><span style="color:#F8F8F2;"> }) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  fs.</span><span style="color:#50FA7B;">readdir</span><span style="color:#F8F8F2;">(path.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(dest), (</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">files</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (err) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">获取文件夹失败</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">throw</span><span style="color:#F8F8F2;"> err</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      files.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> oldName </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> path.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(dest, item)</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> newName </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> oldName.</span><span style="color:#50FA7B;">replace</span><span style="color:#F8F8F2;">(from, to)</span></span>
<span class="line"><span style="color:#F8F8F2;">        fs.</span><span style="color:#50FA7B;">rename</span><span style="color:#F8F8F2;">(oldName, newName, (</span><span style="color:#FFB86C;font-style:italic;">renameErr</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (renameErr) </span><span style="color:#FF79C6;">throw</span><span style="color:#F8F8F2;"> renameErr</span></span>
<span class="line"><span style="color:#F8F8F2;">          console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(oldName </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">文件名称改为:</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> newName)</span></span>
<span class="line"><span style="color:#F8F8F2;">        })</span></span>
<span class="line"><span style="color:#F8F8F2;">      })</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> params </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  dest</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./src/shanghai</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#6272A4;">// 要更改的文件夹</span></span>
<span class="line"><span style="color:#F8F8F2;">  from</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">jhyj_dc</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#6272A4;">// 要更改的源文件名</span></span>
<span class="line"><span style="color:#F8F8F2;">  to</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">jhyj_sh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#6272A4;">// 要更改的目标文件名</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">rename</span><span style="color:#F8F8F2;">(params)</span></span>
<span class="line"></span></code></pre></div><h2 id="process-模块" tabindex="-1">process 模块 <a class="header-anchor" href="#process-模块" aria-label="Permalink to &quot;process 模块&quot;">​</a></h2><p><code>process.argv</code> 可以获得命令行调用的信息，以空格分隔。假设执行一个脚本 test.js，运行<code>node test.js</code>， 那么<code>process.argv</code>的结果是<code>[&#39;node&#39;, &#39;test.js&#39;]</code></p>`,30),F=[o];function e(c,t,r,y,i,d){return a(),n("div",null,F)}const A=s(p,[["render",e]]);export{h as __pageData,A as default};
