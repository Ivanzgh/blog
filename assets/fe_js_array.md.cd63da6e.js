import{_ as a,c as n,o as l,x as s,a as p,Q as o}from"./chunks/framework.f14b72c3.js";const g=JSON.parse('{"title":"数组","description":"","frontmatter":{},"headers":[],"relativePath":"fe/js/array.md","lastUpdated":1688050449000}'),F={name:"fe/js/array.md"},e=s("h1",{id:"数组",tabindex:"-1"},[p("数组 "),s("a",{class:"header-anchor",href:"#数组","aria-label":'Permalink to "数组"'},"​")],-1),t=s("iframe",{id:"embed_dom",name:"embed_dom",frameborder:"0",style:{display:"block",width:"100%",height:"900px"},src:"https://www.processon.com/embed/64623e6407a1a76bf6d4a33a"},null,-1),c=o(`<h2 id="join" tabindex="-1">join() <a class="header-anchor" href="#join" aria-label="Permalink to &quot;join()&quot;">​</a></h2><p>把数组的所有元素放入一个字符串，元素通过指定的分隔符分隔，不影响原数组</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">join</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// &#39;2,1,3&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">join</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// &#39;213&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">join</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">-</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// &#39;2-1-3&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="tostring" tabindex="-1">toString() <a class="header-anchor" href="#tostring" aria-label="Permalink to &quot;toString()&quot;">​</a></h2><p>将数组转换为字符串，并返回结果</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr.</span><span style="color:#50FA7B;">toString</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// &#39;1,2,3&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="concat" tabindex="-1">concat() <a class="header-anchor" href="#concat" aria-label="Permalink to &quot;concat()&quot;">​</a></h2><p>将数组或者值连接成新数组，不影响原数组</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> rs1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr1.</span><span style="color:#50FA7B;">concat</span><span style="color:#F8F8F2;">(arr2);</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> rs2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr1.</span><span style="color:#50FA7B;">concat</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> rs3 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr1.</span><span style="color:#50FA7B;">concat</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">6</span><span style="color:#F8F8F2;">, [</span><span style="color:#BD93F9;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">8</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(rs1); </span><span style="color:#6272A4;">// [2, 1, 3, 4, 5]</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(rs2); </span><span style="color:#6272A4;">// [2, 1, 3, 4]</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(rs3); </span><span style="color:#6272A4;">// [2, 1, 3, 6, 7, 8]</span></span>
<span class="line"></span></code></pre></div><h2 id="sort" tabindex="-1">sort() <a class="header-anchor" href="#sort" aria-label="Permalink to &quot;sort()&quot;">​</a></h2><p>对数组的元素排序，接收一个函数作为参数，影响原数组。</p><p>如果省略参数，元素按照转换为字符串的各个字符的 <code>Unicode</code> 位点进行排序。</p><ul><li>字符串排序</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arr2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">唔西迪西</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">ivan</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">arr2.</span><span style="color:#50FA7B;">sort</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// [&#39;ivan&#39;, &#39;zgh&#39;, &#39;唔西迪西&#39;]</span></span>
<span class="line"><span style="color:#F8F8F2;">arr2.</span><span style="color:#50FA7B;">sort</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> b); </span><span style="color:#6272A4;">// [&#39;zgh&#39;, &#39;唔西迪西&#39;, &#39;ivan&#39;]</span></span>
<span class="line"></span></code></pre></div><ul><li>数字排序</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">sort</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// [1,2,3,4,5]</span></span>
<span class="line"><span style="color:#6272A4;">// 比较的数字会先被转换为字符串，比较Unicode顺序</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arr1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">20</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">arr1.</span><span style="color:#50FA7B;">sort</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// [10, 20, 5]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">sort</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> b); </span><span style="color:#6272A4;">// 正序 [1, 2, 3, 4, 5]</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">sort</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> a); </span><span style="color:#6272A4;">// 倒序 [5, 4, 3, 2, 1]</span></span>
<span class="line"></span></code></pre></div><ul><li>对象数组排序</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">  { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">玛卡巴卡</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, desc</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">one</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">唔西迪西</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, desc</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">two</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">桥豆麻袋</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, desc</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">three</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">sort</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> a.name.</span><span style="color:#50FA7B;">localeCompare</span><span style="color:#F8F8F2;">(b.name))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 结果</span></span>
<span class="line"><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">: {name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">玛卡巴卡</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, desc</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">one</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">: {name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">桥豆麻袋</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, desc</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">three</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">: {name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">唔西迪西</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, desc</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">two</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="reverse" tabindex="-1">reverse() <a class="header-anchor" href="#reverse" aria-label="Permalink to &quot;reverse()&quot;">​</a></h2><p>把数组中的元素顺序颠倒过来，影响原数组</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> rs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">reverse</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(rs); </span><span style="color:#6272A4;">// [3, 1, 2]</span></span>
<span class="line"></span></code></pre></div><h2 id="push" tabindex="-1">push() <a class="header-anchor" href="#push" aria-label="Permalink to &quot;push()&quot;">​</a></h2><p>向数组的末尾添加一个或更多元素，并返回新的长度。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> rs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(rs); </span><span style="color:#6272A4;">// 4</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr); </span><span style="color:#6272A4;">// [1, 2, 3, 4]</span></span>
<span class="line"></span></code></pre></div><h2 id="unshift" tabindex="-1">unshift() <a class="header-anchor" href="#unshift" aria-label="Permalink to &quot;unshift()&quot;">​</a></h2><p>向数组的开头添加一个或更多元素，并返回新的长度。</p><h2 id="pop" tabindex="-1">pop() <a class="header-anchor" href="#pop" aria-label="Permalink to &quot;pop()&quot;">​</a></h2><p>删除并返回数组的最后一个元素</p><h2 id="shift" tabindex="-1">shift() <a class="header-anchor" href="#shift" aria-label="Permalink to &quot;shift()&quot;">​</a></h2><p>删除并返回数组的第一个元素</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">shift</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// 3</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr); </span><span style="color:#6272A4;">// [4, 2, 1, 5]</span></span>
<span class="line"></span></code></pre></div><h2 id="slice" tabindex="-1">slice() <a class="header-anchor" href="#slice" aria-label="Permalink to &quot;slice()&quot;">​</a></h2><p>语法：<code>arrayObject.slice(start[, end])</code></p><p>从数组中截取一段元素，组成一个新的数组。新数组包括<code>start</code>，不包括<code>end</code>。若没指定 <code>end</code>，则从 <code>start</code> 截取到数组结束的所有元素。 新数组是对原数组的浅拷贝，原数组不会被改变。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// [1, 2, 3]</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// [1, 2, 3, 4]</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// [2, 3, 4, 5]</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// [1, 2, 3, 4, 5]</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 5，可以很方便的拿到数组最后一项元素</span></span>
<span class="line"></span></code></pre></div><p><strong>为什么说新数组是对原数组的浅拷贝？</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arr1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [{ a</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;"> }, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arr2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr1.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// [{ a: 1 }]</span></span>
<span class="line"><span style="color:#F8F8F2;">arr1[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">].a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">9</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr2); </span><span style="color:#6272A4;">// [{ a: 9 }]</span></span>
<span class="line"></span></code></pre></div><p>可以看到改变原数组的值，新数组也随之改变，复制到的对象只是一个引用</p><h2 id="splice" tabindex="-1">splice() <a class="header-anchor" href="#splice" aria-label="Permalink to &quot;splice()&quot;">​</a></h2><p>删除或者添加元素，然后返回删除的元素</p><p>语法：<code>splice(index,sum,item1,item2,...)</code></p><p>替换数组中的元素：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">b</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">c</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">d</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">splice</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">e</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">f</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr); </span><span style="color:#6272A4;">// [&quot;a&quot;,&quot;e&quot;,&quot;f&quot;,&quot;d&quot;]</span></span>
<span class="line"></span></code></pre></div><h2 id="filter" tabindex="-1">filter() <a class="header-anchor" href="#filter" aria-label="Permalink to &quot;filter()&quot;">​</a></h2><p>逐一过滤数组元素，返回符合条件的元素，得到一个新数组</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> rs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">filter</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> item </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(rs); </span><span style="color:#6272A4;">// [2, 3]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 删掉偶数，只保留奇数</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">9</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">10</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">15</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> r </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">filter</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">%</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(r); </span><span style="color:#6272A4;">// [1, 5, 9, 15]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">//把一个Array中的空字符串删掉</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">A</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">B</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">undefined</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">C</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">  </span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> r </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">filter</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">s</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> s </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> s.</span><span style="color:#50FA7B;">trim</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// 注意：IE9以下的版本没有trim()方法</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(r); </span><span style="color:#6272A4;">// [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]</span></span>
<span class="line"></span></code></pre></div><p>filter()接收的回调函数，可以有多个参数。通常仅使用第一个参数，表示 Array 的某个元素。回调函数还可以接收另外两个参数，表示元素的位置和数组本身</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">A</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">B</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">C</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> r </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">filter</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">element</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">self</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(element); </span><span style="color:#6272A4;">// 依次打印&#39;A&#39;, &#39;B&#39;, &#39;C&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(index); </span><span style="color:#6272A4;">// 依次打印0, 1, 2</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(self); </span><span style="color:#6272A4;">// self就是变量arr</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><p>例子：</p><ul><li>数据去重</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">s</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">b</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">p</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">k</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">k</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">s</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">filter</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">ele</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">self</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> self.</span><span style="color:#50FA7B;">indexOf</span><span style="color:#F8F8F2;">(ele) </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> index); </span><span style="color:#6272A4;">// [&#39;a&#39;, &#39;s&#39;, &#39;b&#39;, &#39;p&#39;, &#39;k&#39;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// indexOf总是返回某个元素第一次出现的位置，后续重复元素的位置与indexOf返回的位置不相等，因此被filter滤掉了</span></span>
<span class="line"></span></code></pre></div><ul><li>过滤虚假值，即 <code>0</code>，<code>undefined</code>，<code>null</code>，<code>false</code>，<code>&quot;&quot;</code>，<code>&#39;&#39;</code></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> array </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">6</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">7</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">array.</span><span style="color:#50FA7B;">filter</span><span style="color:#F8F8F2;">(Boolean); </span><span style="color:#6272A4;">// [1, 3, 5]</span></span>
<span class="line"></span></code></pre></div><h2 id="indexof" tabindex="-1">indexOf() <a class="header-anchor" href="#indexof" aria-label="Permalink to &quot;indexOf()&quot;">​</a></h2><p>返回数组中某个指定的元素位置，可用来判断数组中是否包含指定元素</p><p>语法 <code>array.indexOf(item, start)</code>，<code>item</code>查找的元素，<code>start</code>开始检索的位置(可选，默认是 0)</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> fruits </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Banana</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Orange</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Apple</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Mango</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> fruits.</span><span style="color:#50FA7B;">indexOf</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Apple</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> fruits </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Banana</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Orange</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Apple</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Mango</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Banana</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Orange</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Apple</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> fruits.</span><span style="color:#50FA7B;">indexOf</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Apple</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 6</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (fruits.</span><span style="color:#50FA7B;">indexOf</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Apple</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">alert</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Apple</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>如果在数组中没找到指定元素则返回 -1</p><p>若查找字符串最后出现的位置，用 <code>lastIndexOf()</code> 方法</p><p>使用严格相等<code>===</code>匹配数组中的元素</p><h2 id="includes" tabindex="-1">includes() <a class="header-anchor" href="#includes" aria-label="Permalink to &quot;includes()&quot;">​</a></h2><p>判断元素是否在数组中存在，返回值是 <code>true</code>或<code>false</code></p><p>语法 <code>array.includes(item, start)</code>，<code>item</code>要查找的元素，<code>start</code>开始检索的位置(可选，默认是 0)，正向查找</p><p>如果 start 为负值，则使用<code>数组长度 + start</code>的计算结果作为新的索引</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">includes</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">includes</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// false</span></span>
<span class="line"></span></code></pre></div><h2 id="find-和-findindex" tabindex="-1">find 和 findIndex <a class="header-anchor" href="#find-和-findindex" aria-label="Permalink to &quot;find 和 findIndex&quot;">​</a></h2><p>find 用于找出第一个符合条件的数组元素。找不到则是<code>undefined</code>。注意，它不会返回多个，只找一个，找到了就返回。</p><p>findIndex 返回第一个符合条件的数组元素的索引，找不到则是-1</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">  { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">z</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, score</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">90</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">g</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, score</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">95</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">h</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, score</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">99</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> rs1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">find</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> item.name </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">g</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(rs1); </span><span style="color:#6272A4;">// {name: &quot;g&quot;, score: 90}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> rs2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">findIndex</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> item.name </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">g</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(rs2); </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"></span></code></pre></div><h2 id="some" tabindex="-1">some() <a class="header-anchor" href="#some" aria-label="Permalink to &quot;some()&quot;">​</a></h2><p>表示一些，只要数组中的某一个元素符合指定的条件，就会返回真，否则返回假。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">  { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">z</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, score</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">90</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">g</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, score</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">95</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">h</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, score</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">99</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> rs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">some</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> item.score </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">90</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(rs); </span><span style="color:#6272A4;">// true</span></span>
<span class="line"></span></code></pre></div><h2 id="every" tabindex="-1">every() <a class="header-anchor" href="#every" aria-label="Permalink to &quot;every()&quot;">​</a></h2><p>如果数组中的所有元素都符合指定的条件，才返回 true，否则返回 false</p><h2 id="foreach" tabindex="-1">forEach() <a class="header-anchor" href="#foreach" aria-label="Permalink to &quot;forEach()&quot;">​</a></h2><p><code>forEach()</code>方法用于调用数组的每个元素，并将元素传递给回调函数</p><p>格式：<code>array.forEach((item, index, arr) =&gt; {})</code></p><ul><li>item 当前元素</li><li>index 当前元素索引值 (可选)</li><li>arr 当前元素所属数组 (可选)</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(item); </span><span style="color:#6272A4;">// 1 2 3</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li>不能使用 break</li><li>返回值是 undefined</li><li>若只是遍历数组，不需要更改数组元素，使用<code>forEach()</code>更简单</li></ul></div><h2 id="map" tabindex="-1">map() <a class="header-anchor" href="#map" aria-label="Permalink to &quot;map()&quot;">​</a></h2><p>逐一处理原数组元素，返回一个新数组，<code>map</code>的参数同<code>forEach</code>是回调函数。 回调函数中要有 <code>return</code>，如果不使用返回的新数组就不要用 map()</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> rs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">map</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> (item </span><span style="color:#FF79C6;">+=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">10</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(rs); </span><span style="color:#6272A4;">// [11, 12, 13]</span></span>
<span class="line"></span></code></pre></div><h2 id="reduce" tabindex="-1">reduce() <a class="header-anchor" href="#reduce" aria-label="Permalink to &quot;reduce()&quot;">​</a></h2><p>不断地将前一项和后一项的值进行运算，把前一轮运算的结果作为当前运算的前一项。具体规则由回调函数决定，每次的运算会涉及两项</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 求和运算</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">reduce</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> b);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 求最大值</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">reduce</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> (a </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> b));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 求最小值</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">reduce</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> (a </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> b));</span></span>
<span class="line"></span></code></pre></div><p>带初值</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// 第一次运算是 4 + 1</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> sum </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">reduce</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">prev</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> prev </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> next, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(sum); </span><span style="color:#6272A4;">// 10</span></span>
<span class="line"></span></code></pre></div><h2 id="array-isarray" tabindex="-1">Array.isArray() <a class="header-anchor" href="#array-isarray" aria-label="Permalink to &quot;Array.isArray()&quot;">​</a></h2><p>判断是否是数组类型</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(Array.</span><span style="color:#50FA7B;">isArray</span><span style="color:#F8F8F2;">(arr)); </span><span style="color:#6272A4;">// true</span></span>
<span class="line"></span></code></pre></div><h2 id="array-from" tabindex="-1">Array.from() <a class="header-anchor" href="#array-from" aria-label="Permalink to &quot;Array.from()&quot;">​</a></h2><p>将类数组对象变成真正的数组</p><h2 id="array-of" tabindex="-1">Array.of() <a class="header-anchor" href="#array-of" aria-label="Permalink to &quot;Array.of()&quot;">​</a></h2><p>将一组值变成数组，主要目的是弥补构造器 <code>Array()</code>的不足</p><p>之前使用 new 创建数组：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Array</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Array</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">3</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr1, arr2); </span><span style="color:#6272A4;">// [empty × 3] [&quot;3&quot;]</span></span>
<span class="line"></span></code></pre></div><p>使用 Array.of()后：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Array.</span><span style="color:#50FA7B;">of</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Array.</span><span style="color:#50FA7B;">of</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">3</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr1, arr2); </span><span style="color:#6272A4;">// [3] [&quot;3&quot;]</span></span>
<span class="line"></span></code></pre></div><h2 id="fill" tabindex="-1">fill() <a class="header-anchor" href="#fill" aria-label="Permalink to &quot;fill()&quot;">​</a></h2><p>给数组填充指定值。已有数据会被覆盖。 fill 方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置(不包括结束位置)</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Array</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">fill</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">$</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr); </span><span style="color:#6272A4;">//[&quot;$&quot;, &quot;$&quot;, &quot;$&quot;, &quot;$&quot;, &quot;$&quot;]</span></span>
<span class="line"><span style="color:#6272A4;">//指定填充位置</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">fill</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">$</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr); </span><span style="color:#6272A4;">//[&quot;$&quot;, &quot;$&quot;, 3, 4, 5]</span></span>
<span class="line"></span></code></pre></div><h2 id="flat" tabindex="-1">flat() <a class="header-anchor" href="#flat" aria-label="Permalink to &quot;flat()&quot;">​</a></h2><p><code>flat(depth)</code>方法可以平铺数组，<code>depth</code>表示数组的展开深度，默认是 1。若不管多少层都平铺可以填入<code>Infinity</code>关键字</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, [</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, [</span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">, [</span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">]]]].</span><span style="color:#50FA7B;">flat</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">//  [1, 2, 3, 4, [5]]</span></span>
<span class="line"></span></code></pre></div><h2 id="flatmap" tabindex="-1">flatMap() <a class="header-anchor" href="#flatmap" aria-label="Permalink to &quot;flatMap()&quot;">​</a></h2><p>遍历处理数组，然后将结果展开一级，返回一个新数组。等价于调用 map()方法后再调用深度为 1 的 flat()方法，即<code>arr.map(...args).flat()</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> res </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">flatMap</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> [x, x </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(result); </span><span style="color:#6272A4;">// [1, 2, 2, 4, 3, 6]</span></span>
<span class="line"></span></code></pre></div><h2 id="拓展运算符" tabindex="-1">...拓展运算符 <a class="header-anchor" href="#拓展运算符" aria-label="Permalink to &quot;...拓展运算符&quot;">​</a></h2><p>将数组转换为一个用逗号分隔的参数列表</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> rs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">arr];</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(rs); </span><span style="color:#6272A4;">//[1, 2, 3, 4]</span></span>
<span class="line"></span></code></pre></div><p>合并数组：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> rs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">arr1, </span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">arr2];</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(rs); </span><span style="color:#6272A4;">//[1, 3, 2, 4]</span></span>
<span class="line"></span></code></pre></div><p>将字符串转为数组：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> rs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">arr];</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(rs); </span><span style="color:#6272A4;">//[&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]</span></span>
<span class="line"></span></code></pre></div><p>将数组转为对象：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> rs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { </span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">arr };</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(rs); </span><span style="color:#6272A4;">//{0: 1, 1: 2, 2: 3}</span></span>
<span class="line"></span></code></pre></div><h2 id="数组去重" tabindex="-1">数组去重 <a class="header-anchor" href="#数组去重" aria-label="Permalink to &quot;数组去重&quot;">​</a></h2><p>es5 实现：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> res </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">filter</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">array</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> array.</span><span style="color:#50FA7B;">indexOf</span><span style="color:#F8F8F2;">(value) </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> index;</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(res); </span><span style="color:#6272A4;">// [1, 2, 3, 4, 5]</span></span>
<span class="line"></span></code></pre></div><p>es6 实现：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> res </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#FF79C6;">...</span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Set</span><span style="color:#F8F8F2;">(arr)];</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(res); </span><span style="color:#6272A4;">// [1, 2, 3, 4, 5]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// or</span></span>
<span class="line"><span style="color:#F8F8F2;">Array.</span><span style="color:#50FA7B;">from</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Set</span><span style="color:#F8F8F2;">(arr));</span></span>
<span class="line"></span></code></pre></div><h2 id="清空或截断数组" tabindex="-1">清空或截断数组 <a class="header-anchor" href="#清空或截断数组" aria-label="Permalink to &quot;清空或截断数组&quot;">​</a></h2><p>在不重新赋值的情况下，更改数组的 <code>length</code> 属性。截断数组是不可逆的</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.length </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr); </span><span style="color:#6272A4;">// [1,2,1]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">arr.length </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr); </span><span style="color:#6272A4;">// []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">arr.length </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">9</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr[</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">]); </span><span style="color:#6272A4;">// undefined</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>数组的 <code>length</code> 属性实际上不是数组里元素的个数，而是最大的数字索引值加一。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#F8F8F2;">arr[</span><span style="color:#BD93F9;">666</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">abc</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr.length); </span><span style="color:#6272A4;">// 666</span></span>
<span class="line"></span></code></pre></div></div><h2 id="数组扁平化" tabindex="-1">数组扁平化 <a class="header-anchor" href="#数组扁平化" aria-label="Permalink to &quot;数组扁平化&quot;">​</a></h2><h3 id="二维数组" tabindex="-1">二维数组 <a class="header-anchor" href="#二维数组" aria-label="Permalink to &quot;二维数组&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, [</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">], </span><span style="color:#BD93F9;">6</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> res </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [].</span><span style="color:#50FA7B;">concat</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">arr);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(res); </span><span style="color:#6272A4;">//  [1, 2, 3, 4, 5, 6]</span></span>
<span class="line"></span></code></pre></div><h3 id="多维数组" tabindex="-1">多维数组 <a class="header-anchor" href="#多维数组" aria-label="Permalink to &quot;多维数组&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">z</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">g</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">h</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">d</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">]], </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">f</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> res </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">join</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">,</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">,</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(res); </span><span style="color:#6272A4;">// [&quot;z&quot;, &quot;g&quot;, &quot;h&quot;, &quot;d&quot;, &quot;f&quot;]</span></span>
<span class="line"></span></code></pre></div><p>或者使用<code>flat(Infinity)</code>方法平铺数组</p><h3 id="递归" tabindex="-1">递归 <a class="header-anchor" href="#递归" aria-label="Permalink to &quot;递归&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, [</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, [</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">]]];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">flatten</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> res </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#6272A4;">// for (let i = 0; i &lt; arr.length; i++) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#6272A4;">//     if (Array.isArray(arr[i])) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#6272A4;">//         res = res.concat(flatten(arr[i]));</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#6272A4;">//     } else {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#6272A4;">//         res.push(arr[i]);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#6272A4;">//     }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#6272A4;">// }</span></span>
<span class="line"><span style="color:#F8F8F2;">  arr.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">i</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// if (Array.isArray(i)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">//     res = res.concat(flatten(i))</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// } else {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">//     res.push(i)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// }</span></span>
<span class="line"><span style="color:#F8F8F2;">    Array.</span><span style="color:#50FA7B;">isArray</span><span style="color:#F8F8F2;">(i) </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> (res </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> res.</span><span style="color:#50FA7B;">concat</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">flatten</span><span style="color:#F8F8F2;">(i))) </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> res.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> res;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">flatten</span><span style="color:#F8F8F2;">(arr));</span></span>
<span class="line"></span></code></pre></div><h3 id="使用-reduce" tabindex="-1">使用 reduce <a class="header-anchor" href="#使用-reduce" aria-label="Permalink to &quot;使用 reduce&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, [</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, [</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">]]];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">flatten</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">reduce</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">prev</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> prev.</span><span style="color:#50FA7B;">concat</span><span style="color:#F8F8F2;">(Array.</span><span style="color:#50FA7B;">isArray</span><span style="color:#F8F8F2;">(next) </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">flatten</span><span style="color:#F8F8F2;">(next) </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> next);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }, []);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">flatten</span><span style="color:#F8F8F2;">(arr));</span></span>
<span class="line"></span></code></pre></div><h2 id="求数组交集" tabindex="-1">求数组交集 <a class="header-anchor" href="#求数组交集" aria-label="Permalink to &quot;求数组交集&quot;">​</a></h2><h3 id="去掉重复元素" tabindex="-1">去掉重复元素 <a class="header-anchor" href="#去掉重复元素" aria-label="Permalink to &quot;去掉重复元素&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">6</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> res </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#FF79C6;">...</span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Set</span><span style="color:#F8F8F2;">(arr1)].</span><span style="color:#50FA7B;">filter</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> arr2.</span><span style="color:#50FA7B;">includes</span><span style="color:#F8F8F2;">(item));</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(res); </span><span style="color:#6272A4;">// [1, 3, 5]</span></span>
<span class="line"></span></code></pre></div><h3 id="保留重复元素" tabindex="-1">保留重复元素 <a class="header-anchor" href="#保留重复元素" aria-label="Permalink to &quot;保留重复元素&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// arr1 = [1, 2, 2, 3]  arr2 = [2, 2]   =&gt;  [2, 2]</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arr1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">  arr2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> res </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr1.</span><span style="color:#50FA7B;">filter</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">i</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> arr2.</span><span style="color:#50FA7B;">includes</span><span style="color:#F8F8F2;">(i));</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(res); </span><span style="color:#6272A4;">// [2, 2]</span></span>
<span class="line"></span></code></pre></div><h2 id="将值转换为数组" tabindex="-1">将值转换为数组 <a class="header-anchor" href="#将值转换为数组" aria-label="Permalink to &quot;将值转换为数组&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">castArray</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> (Array.</span><span style="color:#50FA7B;">isArray</span><span style="color:#F8F8F2;">(value) </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [value]);</span></span>
<span class="line"><span style="color:#50FA7B;">castArray</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// [1]</span></span>
<span class="line"><span style="color:#50FA7B;">castArray</span><span style="color:#F8F8F2;">([</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">]); </span><span style="color:#6272A4;">// [1, 2, 3]</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">castArray</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">_</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">|</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> (Array.</span><span style="color:#50FA7B;">isArray</span><span style="color:#F8F8F2;">(value) </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [value]);</span></span>
<span class="line"></span></code></pre></div><h2 id="检查数组是否为空" tabindex="-1">检查数组是否为空 <a class="header-anchor" href="#检查数组是否为空" aria-label="Permalink to &quot;检查数组是否为空&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// 这里默认value是数组，否则非数组类型也会返回false</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">isEmpty</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> Array.</span><span style="color:#50FA7B;">isArray</span><span style="color:#F8F8F2;">(value) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">value.length</span></span>
<span class="line"><span style="color:#50FA7B;">isEmpty</span><span style="color:#F8F8F2;">([]) </span><span style="color:#6272A4;">// true</span></span>
<span class="line"><span style="color:#50FA7B;">isEmpty</span><span style="color:#F8F8F2;">([</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">] </span><span style="color:#6272A4;">// false</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">isEmpty</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">_</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">boolean</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> Array.</span><span style="color:#50FA7B;">isArray</span><span style="color:#F8F8F2;">(arr) </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">arr.length;</span></span>
<span class="line"></span></code></pre></div><h2 id="比较两个数组" tabindex="-1">比较两个数组 <a class="header-anchor" href="#比较两个数组" aria-label="Permalink to &quot;比较两个数组&quot;">​</a></h2><p>1、不考虑元素顺序、是否重复</p><p>将数组去重，排序，然后转换为字符串</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">isEqual</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">stringify</span><span style="color:#F8F8F2;">([</span><span style="color:#FF79C6;">...</span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Set</span><span style="color:#F8F8F2;">(a)].</span><span style="color:#50FA7B;">sort</span><span style="color:#F8F8F2;">()) </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">stringify</span><span style="color:#F8F8F2;">([</span><span style="color:#FF79C6;">...</span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Set</span><span style="color:#F8F8F2;">(b)].</span><span style="color:#50FA7B;">sort</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">isEqual</span><span style="color:#F8F8F2;">([</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">]); </span><span style="color:#6272A4;">// true</span></span>
<span class="line"><span style="color:#50FA7B;">isEqual</span><span style="color:#F8F8F2;">([</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">]); </span><span style="color:#6272A4;">// true</span></span>
<span class="line"><span style="color:#50FA7B;">isEqual</span><span style="color:#F8F8F2;">([</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">2</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">]); </span><span style="color:#6272A4;">// false</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">isEqual</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">_</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[], </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">boolean</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#BD93F9;">JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">stringify</span><span style="color:#F8F8F2;">([</span><span style="color:#FF79C6;">...</span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Set</span><span style="color:#F8F8F2;">(a)].</span><span style="color:#50FA7B;">sort</span><span style="color:#F8F8F2;">()) </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">stringify</span><span style="color:#F8F8F2;">([</span><span style="color:#FF79C6;">...</span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Set</span><span style="color:#F8F8F2;">(b)].</span><span style="color:#50FA7B;">sort</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"></span></code></pre></div><p>2、考虑元素顺序</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">isEqual</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">stringify</span><span style="color:#F8F8F2;">(a) </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">stringify</span><span style="color:#F8F8F2;">(b);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 判断长度是否相等，数组a的每一项元素都等于数组b内同下标的元素</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">isEqual</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> a.length </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> b.length </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> a.</span><span style="color:#50FA7B;">every</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">i</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> e </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> b[i]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">isEqual</span><span style="color:#F8F8F2;">([</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">], [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">]); </span><span style="color:#6272A4;">// false</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">isEqual</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">_</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[], </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">boolean</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">stringify</span><span style="color:#F8F8F2;">(a) </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">stringify</span><span style="color:#F8F8F2;">(b);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">isEqual</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">_</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[], </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">boolean</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> a.length </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> b.length </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> a.</span><span style="color:#50FA7B;">every</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">v</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">i</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> v </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> b[i]);</span></span>
<span class="line"></span></code></pre></div><h2 id="克隆数组" tabindex="-1">克隆数组 <a class="header-anchor" href="#克隆数组" aria-label="Permalink to &quot;克隆数组&quot;">​</a></h2><p>浅拷贝</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">clone1</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">clone2</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> [</span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">arr];</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">clone3</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> Array.</span><span style="color:#50FA7B;">from</span><span style="color:#F8F8F2;">(arr);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">clone4</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">map</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> x);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">clone5</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">parse</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">stringify</span><span style="color:#F8F8F2;">(arr));</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">clone6</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">concat</span><span style="color:#F8F8F2;">([]);</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">clone1</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">_</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">clone2</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">_</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> [</span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">arr];</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">clone3</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">_</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> Array.</span><span style="color:#50FA7B;">from</span><span style="color:#F8F8F2;">(arr);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">clone4</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">_</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">map</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> x);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">clone5</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">_</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">parse</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">stringify</span><span style="color:#F8F8F2;">(arr));</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">clone6</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">_</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">concat</span><span style="color:#F8F8F2;">([]);</span></span>
<span class="line"></span></code></pre></div><h2 id="将字符串数组转为数字类型" tabindex="-1">将字符串数组转为数字类型 <a class="header-anchor" href="#将字符串数组转为数字类型" aria-label="Permalink to &quot;将字符串数组转为数字类型&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">toNumbers</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">map</span><span style="color:#F8F8F2;">(Number);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 或者隐式类型转换</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">toNumbers</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">map</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">x);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">toNumbers</span><span style="color:#F8F8F2;">([</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">2</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">3</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">]); </span><span style="color:#6272A4;">// [1, 2, 3]</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">toNumbers</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">map</span><span style="color:#F8F8F2;">(Number);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">toNumbers</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">[])</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">number</span><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">map</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;">x);</span></span>
<span class="line"></span></code></pre></div><h2 id="将对象数组转为单个对象" tabindex="-1">将对象数组转为单个对象 <a class="header-anchor" href="#将对象数组转为单个对象" aria-label="Permalink to &quot;将对象数组转为单个对象&quot;">​</a></h2><p>方式一</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">toObject</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">reduce</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> ({ </span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">a, [b[key]]</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> b }), {});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">  { id</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, age</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">23</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { id</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">2</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">lmh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, age</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">19</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { id</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">3</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">lrx</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, age</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">20</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#50FA7B;">toObject</span><span style="color:#F8F8F2;">(arr, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">id</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">/*  期望的结果</span></span>
<span class="line"><span style="color:#6272A4;">{</span></span>
<span class="line"><span style="color:#6272A4;">  1: { id: &#39;1&#39;, name: &#39;zgh&#39;, age: 23 }</span></span>
<span class="line"><span style="color:#6272A4;">  2: { id: &#39;2&#39;, name: &#39;lmh&#39;, age: 19 }</span></span>
<span class="line"><span style="color:#6272A4;">  3: { id: &#39;3&#39;, name: &#39;lrx&#39;, age: 20 }</span></span>
<span class="line"><span style="color:#6272A4;">}</span></span>
<span class="line"><span style="color:#6272A4;"> */</span></span>
<span class="line"></span></code></pre></div><p>这里<code>reduce</code>如果不设置初始值<code>{}</code>，当数组里只有一条数据时，返回结果就是<code>{ id: &#39;1&#39;, name: &#39;zgh&#39;, age: 23 }</code>，与期望不符。 设置初始值后，里面的 a 就是<code>{}</code>，b 就是第一条数据</p><p>方式二</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">toObject</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#50FA7B;">fromEntries</span><span style="color:#F8F8F2;">(arr.</span><span style="color:#50FA7B;">map</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">it</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> [it[key], it]));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 或者使用 Map 对象</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">toObject</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> map </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Map</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  arr.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    map.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(e[key], e);</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#50FA7B;">fromEntries</span><span style="color:#F8F8F2;">(map);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span></code></pre></div><p><code>Object.fromEntries()</code>将键值对数组转为对象</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">toObject</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#FFB86C;font-style:italic;">Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">any</span><span style="color:#F8F8F2;">&gt;, </span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">keyof</span><span style="color:#F8F8F2;"> </span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[], </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">K</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">=&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  arr.</span><span style="color:#50FA7B;">reduce</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> ({ </span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">a, [b[key]]</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> b }), {});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">toObject</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#FFB86C;font-style:italic;">Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FD;font-style:italic;">any</span><span style="color:#F8F8F2;">&gt;, </span><span style="color:#FFB86C;font-style:italic;">K</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">keyof</span><span style="color:#F8F8F2;"> </span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">T</span><span style="color:#F8F8F2;">[], </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">K</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Record</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">string</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">T</span><span style="color:#F8F8F2;">&gt; </span><span style="color:#FF79C6;">=&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  Object.</span><span style="color:#50FA7B;">fromEntries</span><span style="color:#F8F8F2;">(arr.</span><span style="color:#50FA7B;">map</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">it</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> [it[key], it]));</span></span>
<span class="line"></span></code></pre></div><h2 id="按对象数组的属性计数" tabindex="-1">按对象数组的属性计数 <a class="header-anchor" href="#按对象数组的属性计数" aria-label="Permalink to &quot;按对象数组的属性计数&quot;">​</a></h2><p>比如有一份数据，统计出姓名为张三李四的人数</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">  { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, age</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">23</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, age</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">24</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">lmh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, age</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">25</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">lrx</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, age</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">18</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">  { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">lrx</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, age</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">19</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">countBy</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">arr</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">prop</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">reduce</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">prev</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">curr</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> ((prev[curr[prop]] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">prev[curr[prop]] </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">), prev), {});</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#50FA7B;">countBy</span><span style="color:#F8F8F2;">(arr, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">name</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// {zgh: 2, lmh: 1, lrx: 2}</span></span>
<span class="line"></span></code></pre></div>`,173),r=[e,t,c];function y(i,C,d,B,u,A){return l(),n("div",null,r)}const h=a(F,[["render",y]]);export{g as __pageData,h as default};
