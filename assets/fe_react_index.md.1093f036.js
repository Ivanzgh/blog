import{_ as s,c as a,o as n,Q as l}from"./chunks/framework.f14b72c3.js";const u=JSON.parse('{"title":"React","description":"","frontmatter":{},"headers":[],"relativePath":"fe/react/index.md","lastUpdated":1684684556000}'),p={name:"fe/react/index.md"},o=l(`<h1 id="react" tabindex="-1">React <a class="header-anchor" href="#react" aria-label="Permalink to &quot;React&quot;">​</a></h1><h2 id="jsx" tabindex="-1">JSX <a class="header-anchor" href="#jsx" aria-label="Permalink to &quot;JSX&quot;">​</a></h2><h3 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h3><p>在 JSX 中写注释不能单独使用<code>//</code>，需要这么写 <code>{/* 注释 */}</code></p><h3 id="htmlfor" tabindex="-1">htmlFor <a class="header-anchor" href="#htmlfor" aria-label="Permalink to &quot;htmlFor&quot;">​</a></h3><p><code>label</code>标签不能使用<code>for</code>，要用<code>htmlFor</code></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">label</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">htmlFor</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF79C6;">label</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="循环遍历" tabindex="-1">循环遍历 <a class="header-anchor" href="#循环遍历" aria-label="Permalink to &quot;循环遍历&quot;">​</a></h3><p>利用原生 js 写法，使用 map 遍历数组，因为 map 有返回值，不能使用 forEach。</p><p>在 map() 方法中的元素需要设置 key 属性，key 最好是唯一的字符串，没得选只能用元素索引 index，但是这样做会导致性能变差，还可能引起组件状态的问题</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">List</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">b</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">c</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#FF79C6;">ul</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">map</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">          &lt;</span><span style="color:#FF79C6;">li</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">key</span><span style="color:#FF79C6;">={</span><span style="color:#F8F8F2;">index</span><span style="color:#FF79C6;">}</span><span style="color:#F8F8F2;">&gt;</span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">item</span><span style="color:#FF79C6;">}</span><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">li</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        ))</span><span style="color:#FF79C6;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;/</span><span style="color:#FF79C6;">ul</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  );</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>也可以把遍历的逻辑抽离出来</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">b</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">c</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Li</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> arr.</span><span style="color:#50FA7B;">map</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">index</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#FF79C6;">li</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">key</span><span style="color:#FF79C6;">={</span><span style="color:#F8F8F2;">index</span><span style="color:#FF79C6;">}</span><span style="color:#F8F8F2;">&gt;</span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">item</span><span style="color:#FF79C6;">}</span><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">li</span><span style="color:#F8F8F2;">&gt;);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">List</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#FF79C6;">ul</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#8BE9FD;font-style:italic;">Li</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;/</span><span style="color:#FF79C6;">ul</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  );</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="css-样式" tabindex="-1">css 样式 <a class="header-anchor" href="#css-样式" aria-label="Permalink to &quot;css 样式&quot;">​</a></h2><h3 id="classname" tabindex="-1">className <a class="header-anchor" href="#classname" aria-label="Permalink to &quot;className&quot;">​</a></h3><p>为了防止和 js 中的<code>class</code>类名冲突，需要将<code>class</code>写成<code>className</code>，小驼峰命名</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">input</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">className</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">input</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="行内样式" tabindex="-1">行内样式 <a class="header-anchor" href="#行内样式" aria-label="Permalink to &quot;行内样式&quot;">​</a></h3><p>两个大括号包裹，css 属性采用小驼峰命名</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">style</span><span style="color:#FF79C6;">={</span><span style="color:#F8F8F2;">{ background</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">#f00</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> }</span><span style="color:#FF79C6;">}</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 因为在 react 中变量是一个大括号包裹，将样式提出来就是变量了</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> bg </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { background</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">#f00</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">style</span><span style="color:#FF79C6;">={</span><span style="color:#F8F8F2;">bg</span><span style="color:#FF79C6;">}</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="外部样式" tabindex="-1">外部样式 <a class="header-anchor" href="#外部样式" aria-label="Permalink to &quot;外部样式&quot;">​</a></h3><p>在组件同级声明 css 文件，然后导入进来 <code>import &quot;./App.css&quot;;</code>，使用 less 或 sass 都可以</p><h3 id="css-in-js" tabindex="-1">css in js <a class="header-anchor" href="#css-in-js" aria-label="Permalink to &quot;css in js&quot;">​</a></h3><h2 id="组件" tabindex="-1">组件 <a class="header-anchor" href="#组件" aria-label="Permalink to &quot;组件&quot;">​</a></h2><h3 id="创建组件的方式" tabindex="-1">创建组件的方式 <a class="header-anchor" href="#创建组件的方式" aria-label="Permalink to &quot;创建组件的方式&quot;">​</a></h3><p>创建组件有函数组件和类组件两种方式，React18 之后，全面使用函数组件，类组件会退出历史舞台</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Home</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">props</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">className</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">home</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;Welcome to React~&lt;/</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Home</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">className</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">home</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;Welcome to React~&lt;/</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;;</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span></code></pre></div><h3 id="对组件的要求" tabindex="-1">对组件的要求 <a class="header-anchor" href="#对组件的要求" aria-label="Permalink to &quot;对组件的要求&quot;">​</a></h3><ol><li>组件名称必须以<strong>大写字母开头</strong>，否则 React 会将以小写字母开头的组件视为原生 DOM 标签</li><li>必须返回可以渲染的元素</li></ol><ul><li>react 元素</li><li>null</li><li>组件</li><li>可迭代的对象，包括数组、Set、Map 等</li></ul><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">App1</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">App2</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 如果直接返回对象，会报错：Uncaught Error: Objects are not valid as a React child</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">App3</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> { a</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>那么是否可以说 React 组件不能返回对象？不能，可以返回一个迭代器</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { a</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">obj[Symbol.iterator] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function*</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> prop </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> obj) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">yield</span><span style="color:#F8F8F2;"> [prop, obj[prop]];</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">App</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> obj;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="组件重新渲染的条件" tabindex="-1">组件重新渲染的条件 <a class="header-anchor" href="#组件重新渲染的条件" aria-label="Permalink to &quot;组件重新渲染的条件&quot;">​</a></h3><ul><li>自身状态发生变化</li><li>父组件重新渲染</li></ul><h3 id="数据" tabindex="-1">数据 <a class="header-anchor" href="#数据" aria-label="Permalink to &quot;数据&quot;">​</a></h3><p>所有 React 组件都必须像纯函数一样保护它们的<code>props</code>不被更改</p><p>改变数据核心思想：先拷贝这个对象或数组，再改变这个拷贝后的值</p><p>更新对象：创建一个新的对象，通常使用展开运算符</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> [person, setPerson] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">useState</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Niki de Saint Phalle</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  artwork</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    title</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Blue Nana</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    city</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Hamburg</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    image</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">https://i.imgur.com/Sd1AgUOm.jpg</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><p>如果要更新 person.artwork.city 的值</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">setPerson</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">person, artwork: { </span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">person.artwork, city</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">beijing</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre></div><p>更新数组：</p><p>添加 <code>setList([...list, 666])</code></p><p>删除，需要生成一个不包含该元素的新数组，通常使用 filter 方法</p><p>更新，map()</p><h2 id="事件绑定" tabindex="-1">事件绑定 <a class="header-anchor" href="#事件绑定" aria-label="Permalink to &quot;事件绑定&quot;">​</a></h2><p>1、在调用的时候使用<code>bind</code>绑定<code>this</code></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">Order</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">React</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">handleSearch</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.props);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">render</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#8BE9FD;font-style:italic;">Button</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">htmlType</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">button</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">onClick</span><span style="color:#FF79C6;">={</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.handleSearch.</span><span style="color:#50FA7B;">bind</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">}</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        重置</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;/</span><span style="color:#8BE9FD;font-style:italic;">Button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    );</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>2、在构造器中使用<code>bind</code>绑定<code>this</code></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">Order</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">React</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">props</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">super</span><span style="color:#F8F8F2;">(props);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.handleSearch </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.handleSearch.</span><span style="color:#50FA7B;">bind</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">handleSearch</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.props);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">render</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#8BE9FD;font-style:italic;">Button</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">htmlType</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">button</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">onClick</span><span style="color:#FF79C6;">={</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.handleSearch</span><span style="color:#FF79C6;">}</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        重置</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;/</span><span style="color:#8BE9FD;font-style:italic;">Button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    );</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>3、在箭头函数中绑定 this</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">Order</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">React</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">handleSearch</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.props);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">render</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#8BE9FD;font-style:italic;">Button</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">htmlType</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">button</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">onClick</span><span style="color:#FF79C6;">={</span><span style="color:#F8F8F2;">() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">handleSearch</span><span style="color:#F8F8F2;">()</span><span style="color:#FF79C6;">}</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        重置</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;/</span><span style="color:#8BE9FD;font-style:italic;">Button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    );</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>4、<code>public class fields</code> 语法</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">Order</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">React</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">handleSearch</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.props);</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">render</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#8BE9FD;font-style:italic;">Button</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">htmlType</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">button</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">onClick</span><span style="color:#FF79C6;">={</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.handleSearch</span><span style="color:#FF79C6;">}</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        重置</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;/</span><span style="color:#8BE9FD;font-style:italic;">Button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    );</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>推荐使用第 4 种方式绑定事件</p><h2 id="fragments" tabindex="-1">Fragments <a class="header-anchor" href="#fragments" aria-label="Permalink to &quot;Fragments&quot;">​</a></h2><p>简单说就是避免向 DOM 中添加额外的节点</p><p>假如有一个子组件<code>&lt;Columns /&gt;</code></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">Columns</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">React</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">render</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#FF79C6;">td</span><span style="color:#F8F8F2;">&gt;Hello&lt;/</span><span style="color:#FF79C6;">td</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#FF79C6;">td</span><span style="color:#F8F8F2;">&gt;World&lt;/</span><span style="color:#FF79C6;">td</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;/</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    );</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>有一个父组件使用了<code>&lt;Columns /&gt;</code></p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">Table</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">React</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">render</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#FF79C6;">table</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#FF79C6;">tr</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">          &lt;</span><span style="color:#8BE9FD;font-style:italic;">Columns</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;/</span><span style="color:#FF79C6;">tr</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;/</span><span style="color:#FF79C6;">table</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    );</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>结果如下，在 tr 和 td 之间多了一个 div 节点，这样就导致了 html 是无效的</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">table</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">tr</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#FF79C6;">td</span><span style="color:#F8F8F2;">&gt;Hello&lt;/</span><span style="color:#FF79C6;">td</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#FF79C6;">td</span><span style="color:#F8F8F2;">&gt;World&lt;/</span><span style="color:#FF79C6;">td</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;/</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;/</span><span style="color:#FF79C6;">tr</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">table</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre></div><p><code>Fragments</code>就解决了这个问题</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">Columns</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">React</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">render</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#8BE9FD;font-style:italic;">React.Fragment</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#FF79C6;">td</span><span style="color:#F8F8F2;">&gt;Hello&lt;/</span><span style="color:#FF79C6;">td</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#FF79C6;">td</span><span style="color:#F8F8F2;">&gt;World&lt;/</span><span style="color:#FF79C6;">td</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;/</span><span style="color:#8BE9FD;font-style:italic;">React.Fragment</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    );</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>也可以使用一种短语法，像空标签一样</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">Columns</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">React</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">render</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#FF79C6;">td</span><span style="color:#F8F8F2;">&gt;Hello&lt;/</span><span style="color:#FF79C6;">td</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#FF79C6;">td</span><span style="color:#F8F8F2;">&gt;World&lt;/</span><span style="color:#FF79C6;">td</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;/&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    );</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="组件通信" tabindex="-1">组件通信 <a class="header-anchor" href="#组件通信" aria-label="Permalink to &quot;组件通信&quot;">​</a></h2><h3 id="父传子" tabindex="-1">父传子 <a class="header-anchor" href="#父传子" aria-label="Permalink to &quot;父传子&quot;">​</a></h3><p>父组件在子组件上传入属性，子组件通过 props 接收数据</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Child</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">props</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#FF79C6;">h1</span><span style="color:#F8F8F2;">&gt;</span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">props.num</span><span style="color:#FF79C6;">}</span><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">h1</span><span style="color:#F8F8F2;">&gt;;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">default</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Father</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> &lt;</span><span style="color:#8BE9FD;font-style:italic;">Child</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">num</span><span style="color:#FF79C6;">={</span><span style="color:#BD93F9;">123</span><span style="color:#FF79C6;">}</span><span style="color:#F8F8F2;"> /&gt;;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="子传父" tabindex="-1">子传父 <a class="header-anchor" href="#子传父" aria-label="Permalink to &quot;子传父&quot;">​</a></h3><p>子组件调用父组件的方法，修改父组件的内容，永远都是父组件自己在修改自己，子组件只是通知父组件</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> { useState } </span><span style="color:#FF79C6;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">react</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Child</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">props</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#FF79C6;">h1</span><span style="color:#F8F8F2;">&gt;</span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">props.num</span><span style="color:#FF79C6;">}</span><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">h1</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#FF79C6;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">onClick</span><span style="color:#FF79C6;">={</span><span style="color:#F8F8F2;">() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> props.</span><span style="color:#50FA7B;">changeNum</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">666</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">}</span><span style="color:#F8F8F2;">&gt;change&lt;/</span><span style="color:#FF79C6;">button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  );</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">default</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">App</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> [msg, setMsg] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">useState</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">你好</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#6272A4;">// 这里的 arg 就是接收子组件传过来的值</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">numChange</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">arg</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arg);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">setMsg</span><span style="color:#F8F8F2;">(arg);</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#FF79C6;">h1</span><span style="color:#F8F8F2;">&gt;</span><span style="color:#FF79C6;">{</span><span style="color:#F8F8F2;">msg</span><span style="color:#FF79C6;">}</span><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">h1</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#8BE9FD;font-style:italic;">Child</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">num</span><span style="color:#FF79C6;">={</span><span style="color:#BD93F9;">123</span><span style="color:#FF79C6;">}</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">changeNum</span><span style="color:#FF79C6;">={</span><span style="color:#F8F8F2;">numChange</span><span style="color:#FF79C6;">}</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  );</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>在父组件里也可以直接把 setMsg 方法传给子组件，避免多声明一个函数</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// 父组件</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#8BE9FD;font-style:italic;">Child</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">num</span><span style="color:#FF79C6;">={</span><span style="color:#BD93F9;">123</span><span style="color:#FF79C6;">}</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">setMsg</span><span style="color:#FF79C6;">={</span><span style="color:#F8F8F2;">setMsg</span><span style="color:#FF79C6;">}</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 子组件</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">onClick</span><span style="color:#FF79C6;">={</span><span style="color:#F8F8F2;">() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> props.</span><span style="color:#50FA7B;">setMsg</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">666</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">}</span><span style="color:#F8F8F2;">&gt;change&lt;/</span><span style="color:#FF79C6;">button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="通信总结" tabindex="-1">通信总结 <a class="header-anchor" href="#通信总结" aria-label="Permalink to &quot;通信总结&quot;">​</a></h3><p>简单理解，把父子组件看成两个函数，子组件接收的 props 就是一个函数参数，父组件可以把它的 state 作为 props 向下传递到它的子组件中，这样在子组件里就能接收父组件的数据。子组件如何向父组件传值呢？父组件将一个函数传给子组件，子组件调用这个函数，将自己的数据当作参数传递给该函数，那么父组件就能接收子组件的数据了，其实就是闭包</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f1</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> num </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">fn</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">msg</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(msg);</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> props </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { num, fn };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">f2</span><span style="color:#F8F8F2;">(props);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f2</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">props</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> num </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  props.</span><span style="color:#50FA7B;">fn</span><span style="color:#F8F8F2;">(num </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> props.num);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">f1</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span></code></pre></div><h2 id="渲染原理" tabindex="-1">渲染原理 <a class="header-anchor" href="#渲染原理" aria-label="Permalink to &quot;渲染原理&quot;">​</a></h2><h2 id="事件机制" tabindex="-1">事件机制 <a class="header-anchor" href="#事件机制" aria-label="Permalink to &quot;事件机制&quot;">​</a></h2><h2 id="fiber-架构" tabindex="-1">fiber 架构 <a class="header-anchor" href="#fiber-架构" aria-label="Permalink to &quot;fiber 架构&quot;">​</a></h2><h2 id="react-调度机制" tabindex="-1">react 调度机制 <a class="header-anchor" href="#react-调度机制" aria-label="Permalink to &quot;react 调度机制&quot;">​</a></h2><h2 id="优先级概念" tabindex="-1">优先级概念 <a class="header-anchor" href="#优先级概念" aria-label="Permalink to &quot;优先级概念&quot;">​</a></h2><h2 id="commit-和-render-阶段" tabindex="-1">commit 和 render 阶段 <a class="header-anchor" href="#commit-和-render-阶段" aria-label="Permalink to &quot;commit 和 render 阶段&quot;">​</a></h2><h2 id="hooks-原理" tabindex="-1">hooks 原理 <a class="header-anchor" href="#hooks-原理" aria-label="Permalink to &quot;hooks 原理&quot;">​</a></h2>`,87),F=[o];function e(t,c,r,y,i,d){return n(),a("div",null,F)}const h=s(p,[["render",e]]);export{u as __pageData,h as default};
