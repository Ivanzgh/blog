import{_ as s,c as n,o as a,Q as o}from"./chunks/framework.f14b72c3.js";const h=JSON.parse('{"title":"手写 JS","description":"","frontmatter":{},"headers":[],"relativePath":"fe/js/truth.md","lastUpdated":1698246525000}'),l={name:"fe/js/truth.md"},p=o(`<h1 id="手写-js" tabindex="-1">手写 JS <a class="header-anchor" href="#手写-js" aria-label="Permalink to &quot;手写 JS&quot;">​</a></h1><h2 id="instanceof" tabindex="-1">instanceof <a class="header-anchor" href="#instanceof" aria-label="Permalink to &quot;instanceof&quot;">​</a></h2><p>instanceof 用于检测构造函数的 prototype 是否出现在被检测对象的原型链上</p><ol><li>基础数据类型都返回 false</li><li>null 返回 false</li><li>校验右侧数据类型，如果是基础数据类型则报错：<code>Uncaught TypeError: Right-hand side of &#39;instanceof&#39; is not an object</code></li><li>右侧如果是<code>{}</code>，则报错：<code>Uncaught TypeError: Right-hand side of &#39;instanceof&#39; is not callable</code></li><li>右侧要有 prototype 属性</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">myInstanceof</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">left</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">right</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> ((</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> left </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">object</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> left </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">function</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> left </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> proto </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#50FA7B;">getPrototypeOf</span><span style="color:#F8F8F2;">(left);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">while</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (proto </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (proto </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">right</span><span style="color:#F8F8F2;">.prototype) </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    proto </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#50FA7B;">getPrototypeOf</span><span style="color:#F8F8F2;">(proto);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">myInstanceof</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, Number)); </span><span style="color:#6272A4;">// false</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">myInstanceof</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Boolean</span><span style="color:#F8F8F2;">(), Boolean)); </span><span style="color:#6272A4;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">myInstanceof</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {}, Function)); </span><span style="color:#6272A4;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">({} </span><span style="color:#FF79C6;">instanceof</span><span style="color:#F8F8F2;"> {}); </span><span style="color:#6272A4;">// Uncaught TypeError: Right-hand side of &#39;instanceof&#39; is not callable</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">({} </span><span style="color:#FF79C6;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// Uncaught TypeError: Right-hand side of &#39;instanceof&#39; is not an object</span></span>
<span class="line"></span></code></pre></div>`,5),F=[p];function e(t,c,r,y,i,f){return a(),n("div",null,F)}const u=s(l,[["render",e]]);export{h as __pageData,u as default};
