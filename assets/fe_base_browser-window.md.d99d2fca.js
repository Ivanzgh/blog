import{_ as s,c as a,o as n,Q as l}from"./chunks/framework.f14b72c3.js";const h=JSON.parse('{"title":"Window 对象","description":"","frontmatter":{},"headers":[],"relativePath":"fe/base/browser-window.md","lastUpdated":1681036152000}'),o={name:"fe/base/browser-window.md"},p=l(`<h1 id="window-对象" tabindex="-1">Window 对象 <a class="header-anchor" href="#window-对象" aria-label="Permalink to &quot;Window 对象&quot;">​</a></h1><h2 id="window-location-对象" tabindex="-1">window.location 对象 <a class="header-anchor" href="#window-location-对象" aria-label="Permalink to &quot;window.location 对象&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">hash</td><td style="text-align:left;">从井号 (#) 开始的 URL（锚）</td></tr><tr><td style="text-align:left;">host</td><td style="text-align:left;">主机名和当前 URL 的端口号</td></tr><tr><td style="text-align:left;">hostname</td><td style="text-align:left;">当前 URL 的主机名</td></tr><tr><td style="text-align:left;">href</td><td style="text-align:left;">完整的 URL</td></tr><tr><td style="text-align:left;">pathname</td><td style="text-align:left;">当前 URL 的路径部分</td></tr><tr><td style="text-align:left;">port</td><td style="text-align:left;">当前 URL 的端口号</td></tr><tr><td style="text-align:left;">protocol</td><td style="text-align:left;">当前 URL 的协议</td></tr><tr><td style="text-align:left;">search</td><td style="text-align:left;">从问号 (?) 开始的 URL（查询部分）</td></tr></tbody></table><h2 id="刷新页面" tabindex="-1">刷新页面 <a class="header-anchor" href="#刷新页面" aria-label="Permalink to &quot;刷新页面&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">refresh</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  location.</span><span style="color:#50FA7B;">reload</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="关闭当前窗口" tabindex="-1">关闭当前窗口 <a class="header-anchor" href="#关闭当前窗口" aria-label="Permalink to &quot;关闭当前窗口&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">closeCurrentWindow</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  window.opener </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">null</span></span>
<span class="line"><span style="color:#F8F8F2;">  window.</span><span style="color:#50FA7B;">open</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">_self</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  window.</span><span style="color:#50FA7B;">close</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="回退历史" tabindex="-1">回退历史 <a class="header-anchor" href="#回退历史" aria-label="Permalink to &quot;回退历史&quot;">​</a></h2><p>返回上一页</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">historyBack</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  window.history.</span><span style="color:#50FA7B;">go</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="获取-url-参数" tabindex="-1">获取 url 参数 <a class="header-anchor" href="#获取-url-参数" aria-label="Permalink to &quot;获取 url 参数&quot;">​</a></h2><h3 id="获取单个参数" tabindex="-1">获取单个参数 <a class="header-anchor" href="#获取单个参数" aria-label="Permalink to &quot;获取单个参数&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> urlParam </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> window.location.search</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> loc </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> urlParam.</span><span style="color:#50FA7B;">substring</span><span style="color:#F8F8F2;">(urlParam.</span><span style="color:#50FA7B;">lastIndexOf</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">=</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, urlParam.length)</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(loc)</span></span>
<span class="line"></span></code></pre></div><h3 id="获取多个参数" tabindex="-1">获取多个参数 <a class="header-anchor" href="#获取多个参数" aria-label="Permalink to &quot;获取多个参数&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">//  &lt;a href=&quot;file:///D:/test/url.html?index=1&amp;item=2&quot;&gt;fe&lt;/a&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">GetRequest</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> url </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> location.search </span><span style="color:#6272A4;">//获取url中&quot;?&quot;符后的字串</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> theRequest </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Object</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (url.</span><span style="color:#50FA7B;">indexOf</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">?</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">!=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> str </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> url.</span><span style="color:#50FA7B;">substr</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    strs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> str.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">&amp;</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> strs.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      theRequest[strs[i].</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">=</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">]] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> strs[i].</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">=</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)[</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> theRequest</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">GetRequest</span><span style="color:#F8F8F2;">() </span><span style="color:#6272A4;">// {index: &quot;1&quot;, item: &quot;2&quot;}</span></span>
<span class="line"></span></code></pre></div><h3 id="获取参数对象" tabindex="-1">获取参数对象 <a class="header-anchor" href="#获取参数对象" aria-label="Permalink to &quot;获取参数对象&quot;">​</a></h3><p>node.js中有一个queryString模块，可以将参数转化为一个对象，键相同就合并成数组</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> url </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">http://www.baidu.com?name=zgh&amp;appearance=cool&amp;appearance=handsome</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#6272A4;">// 期待结果： { name: &#39;zgh&#39;, appearance: [ &#39;cool&#39;, &#39;handsome&#39; ] }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">handsome</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">url</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> url.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">?</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)[</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">].</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">&amp;</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#F8F8F2;">  arr.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> param </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> e.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">=</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> param[</span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> param[</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (obj[key]) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      obj[key] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Array.</span><span style="color:#50FA7B;">isArray</span><span style="color:#F8F8F2;">(obj[key]) </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> obj[key] </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [obj[key]]</span></span>
<span class="line"><span style="color:#F8F8F2;">      obj[key].</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(value)</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      obj[key] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> obj</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">handsome</span><span style="color:#F8F8F2;">(url)</span></span>
<span class="line"></span></code></pre></div><h2 id="路由跳转" tabindex="-1">路由跳转 <a class="header-anchor" href="#路由跳转" aria-label="Permalink to &quot;路由跳转&quot;">​</a></h2><p><code>location</code> 和 <code>history</code> 接口</p><p>在单页应用中，通常由前端来配置路由，根据不同的 url 显示不同的内容。</p><p>我们在单页应用中需要做到的是改变 url 不刷新页面</p><p><a href="https://segmentfault.com/a/1190000014120456?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000014120456?tdsourcetag=s_pctim_aiomsg</a></p><h2 id="确保浏览器不走缓存路线" tabindex="-1">确保浏览器不走缓存路线 <a class="header-anchor" href="#确保浏览器不走缓存路线" aria-label="Permalink to &quot;确保浏览器不走缓存路线&quot;">​</a></h2><ol><li><p>在 ajax 发送请求前加上 <code>anyAjaxObj.setRequestHeader(&quot;If-Modified-Since&quot;,&quot;0&quot;)</code></p></li><li><p>在 ajax 发送请求前加上 <code>anyAjaxObj.setRequestHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;)</code></p></li><li><p>在 URL 后面加上一个随机数： <code>&quot;fresh=&quot; + Math.random();</code></p></li><li><p>在 URL 后面加上时间搓：<code>&quot;nowtime=&quot; + new Date().getTime();</code></p></li><li><p>如果是使用 jQuery，直接使用<code>$.ajaxSetup({cache:false})</code>即可，这样页面的所有 ajax 都会 执行这条语句，不需要保存缓存记录。</p></li></ol>`,25),e=[p];function t(F,c,r,y,i,d){return n(),a("div",null,e)}const C=s(o,[["render",t]]);export{h as __pageData,C as default};
