import{_ as s,c as a,o as n,Q as p}from"./chunks/framework.f14b72c3.js";const g=JSON.parse('{"title":"Gulp","description":"","frontmatter":{},"headers":[],"relativePath":"automate/gulp.md","lastUpdated":1684684556000}'),l={name:"automate/gulp.md"},o=p(`<h1 id="gulp" tabindex="-1">Gulp <a class="header-anchor" href="#gulp" aria-label="Permalink to &quot;Gulp&quot;">​</a></h1><p>官网：<a href="https://gulpjs.com/" target="_blank" rel="noreferrer">https://gulpjs.com/</a> 中文文档：<a href="https://www.gulpjs.com.cn/" target="_blank" rel="noreferrer">https://www.gulpjs.com.cn/</a></p><h2 id="快速上手" tabindex="-1">快速上手 <a class="header-anchor" href="#快速上手" aria-label="Permalink to &quot;快速上手&quot;">​</a></h2><p>1、安装</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;"># 全局安装 gulp</span></span>
<span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">install</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">--global</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">gulp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 作为项目的开发依赖安装（推荐）</span></span>
<span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">install</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">--save-dev</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">gulp</span></span>
<span class="line"></span></code></pre></div><p>2、在项目根目录下创建一个名为 gulpfile.js 的文件</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> gulp </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">gulp</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">gulp.</span><span style="color:#50FA7B;">task</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">testname</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#6272A4;">// 将你的默认的任务代码放在这</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><p>3、终端运行 gulp</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">gulp </span><span style="color:#F1FA8C;">testname</span></span>
<span class="line"></span></code></pre></div><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><h3 id="gulp-src-globs-options" tabindex="-1">gulp.src(globs[, options]) <a class="header-anchor" href="#gulp-src-globs-options" aria-label="Permalink to &quot;gulp.src(globs[, options])&quot;">​</a></h3><p>获取文件路径</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// 获取src/js文件夹下的所有js文件,base默认为src/js/</span></span>
<span class="line"><span style="color:#F8F8F2;">gulp</span></span>
<span class="line"><span style="color:#F8F8F2;">  .</span><span style="color:#50FA7B;">src</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">src/js/**/*.js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  .</span><span style="color:#50FA7B;">pipe</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">minify</span><span style="color:#F8F8F2;">()) </span><span style="color:#6272A4;">// 文件流过管道，经过插件处理</span></span>
<span class="line"><span style="color:#F8F8F2;">  .</span><span style="color:#50FA7B;">pipe</span><span style="color:#F8F8F2;">(gulp.</span><span style="color:#50FA7B;">dest</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">dist</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)); </span><span style="color:#6272A4;">// 写入 &#39;dist/test.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">gulp.</span><span style="color:#50FA7B;">src</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">src/js/**/*.js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, { base</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">src</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> }).</span><span style="color:#50FA7B;">pipe</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">minify</span><span style="color:#F8F8F2;">()).</span><span style="color:#50FA7B;">pipe</span><span style="color:#F8F8F2;">(gulp.</span><span style="color:#50FA7B;">dest</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">dist</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)); </span><span style="color:#6272A4;">// 写入 &#39;dist/js/test.js&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="gulp-dest-path-options" tabindex="-1">gulp.dest(path[, options]) <a class="header-anchor" href="#gulp-dest-path-options" aria-label="Permalink to &quot;gulp.dest(path[, options])&quot;">​</a></h3><p>文件处理后的存放位置</p><h3 id="gulp-task-name-deps-fn" tabindex="-1">gulp.task(name[, deps], fn) <a class="header-anchor" href="#gulp-task-name-deps-fn" aria-label="Permalink to &quot;gulp.task(name[, deps], fn)&quot;">​</a></h3><p>定义一个任务</p><h3 id="gulp-watch-glob-opts-tasks-或-gulp-watch-glob-opts-cb" tabindex="-1">gulp.watch(glob [, opts], tasks) 或 gulp.watch(glob [, opts, cb]) <a class="header-anchor" href="#gulp-watch-glob-opts-tasks-或-gulp-watch-glob-opts-cb" aria-label="Permalink to &quot;gulp.watch(glob [, opts], tasks) 或 gulp.watch(glob [, opts, cb])&quot;">​</a></h3><p>监视文件，并且可以在文件发生改动时候做一些事情。</p><p>示例:</p><p>在 gulpfile.js 中新建一个任务 portal，将三个文件夹下的所有内容打包到 portal/版本号文件夹下，注意以.开头的文件需要单独写出</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">gulp.</span><span style="color:#50FA7B;">task</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">portal</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> gulp</span></span>
<span class="line"><span style="color:#F8F8F2;">    .</span><span style="color:#50FA7B;">src</span><span style="color:#F8F8F2;">([</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./demos/**</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./docs/**</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./index/**</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./demos/**/.npmignore</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">], { base</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> })</span></span>
<span class="line"><span style="color:#F8F8F2;">    .</span><span style="color:#50FA7B;">pipe</span><span style="color:#F8F8F2;">(gulp.</span><span style="color:#50FA7B;">dest</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">portal/</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> package.version));</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><h2 id="插件开发" tabindex="-1">插件开发 <a class="header-anchor" href="#插件开发" aria-label="Permalink to &quot;插件开发&quot;">​</a></h2><p>实现一个将字符串添加到文件开头的功能</p><p>首先新建一个 package.json 文件</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">init</span></span>
<span class="line"></span></code></pre></div><p>然后在根目录下新建一个入口文件 index.js</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> through </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">through2</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">gulp_prefix</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">prefix</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">prefix) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    prefix </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#6272A4;">// 新建buffer</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> prefix </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Buffer.</span><span style="color:#50FA7B;">from</span><span style="color:#F8F8F2;">(prefix);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> stream </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> through.</span><span style="color:#50FA7B;">obj</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">file</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">encoding</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">callback</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// 如果file类型不是buffer 退出不做处理</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">file.</span><span style="color:#50FA7B;">isBuffer</span><span style="color:#F8F8F2;">()) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">callback</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// 将字符串加到文件数据开头，file.contents.toString()可以将buffer类型转为string类型</span></span>
<span class="line"><span style="color:#F8F8F2;">    file.contents </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Buffer.</span><span style="color:#50FA7B;">concat</span><span style="color:#F8F8F2;">([prefix, file.contents]);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// 确保文件会传给下一个插件</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(file);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// 告诉stream引擎，已经处理完成</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">callback</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> stream;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> gulp_prefix;</span></span>
<span class="line"></span></code></pre></div><p>接着将 index.js 文件复制到项目的 node_modules/gulp-prefix 文件夹下</p><p>最后在根目录下新建一个 gulpfile.js 文件</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> gulp </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">gulp</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> prefix </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">gulp-prefix</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">gulp.</span><span style="color:#50FA7B;">task</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">prefix</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> gulp.</span><span style="color:#50FA7B;">src</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">src/*.js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">pipe</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">prefix</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">我是要传递给插件到参数</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)).</span><span style="color:#50FA7B;">pipe</span><span style="color:#F8F8F2;">(gulp.</span><span style="color:#50FA7B;">dest</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">dist</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><p>运行:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">gulp </span><span style="color:#F1FA8C;">prefix</span></span>
<span class="line"></span></code></pre></div><p>测试</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果需要命令行传参，可以使用 minimist 插件</p></div><p>在 gulp-prefix 插件中</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> minimist </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">minimist</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> knownOptions </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  string</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">env</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  default</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    env</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> p<wbr>rocess.env.</span><span style="color:#BD93F9;">NODE_ENV</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">prod</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> options </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">minimist</span><span style="color:#F8F8F2;">(process.argv.</span><span style="color:#50FA7B;">slice</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">), knownOptions);</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> baseEnv </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> options.env; </span><span style="color:#6272A4;">// baseEnv即是命令行传递到参数</span></span>
<span class="line"></span></code></pre></div><p>传递参数 dev，运行：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">gulp </span><span style="color:#F1FA8C;">prefix</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">--env</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">dev</span></span>
<span class="line"></span></code></pre></div><p>最后一步就是发布插件，详细步骤可参考本博客的 npm 模块。</p>`,40),F=[o];function e(t,c,r,y,i,u){return n(),a("div",null,F)}const C=s(l,[["render",e]]);export{g as __pageData,C as default};
