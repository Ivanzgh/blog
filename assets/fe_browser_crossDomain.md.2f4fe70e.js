import{_ as s,c as a,o as n,Q as l}from"./chunks/framework.f14b72c3.js";const h=JSON.parse('{"title":"浏览器跨域问题","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"fe/browser/crossDomain.md","lastUpdated":1688050449000}'),o={name:"fe/browser/crossDomain.md"},p=l(`<h1 id="浏览器跨域问题" tabindex="-1">浏览器跨域问题 <a class="header-anchor" href="#浏览器跨域问题" aria-label="Permalink to &quot;浏览器跨域问题&quot;">​</a></h1><h2 id="什么是跨域" tabindex="-1">什么是跨域 <a class="header-anchor" href="#什么是跨域" aria-label="Permalink to &quot;什么是跨域&quot;">​</a></h2><p>跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的<strong>同源策略</strong>造成的，是浏览器施加的<strong>安全限制</strong></p><p>跨域名访问又分为二级域名跨域、多级域名跨域、以及协议跨域、端口号跨域</p><p>小程序中存在跨域问题吗？由于小程序的宿主环境不是浏览器，而是微信客户端，所以小程序中不存在跨域问题</p><h2 id="同源策略" tabindex="-1">同源策略 <a class="header-anchor" href="#同源策略" aria-label="Permalink to &quot;同源策略&quot;">​</a></h2><p>同源策略是浏览器的一个安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。 <strong>同源即是同协议、同域名、同端口</strong></p><p>不受同源策略限制的：</p><ul><li>页面中的链接、重定向以及表单提交</li><li>跨域资源的引入是可以的，但是 js 不能读写加载的内容。如嵌入到页面中的<code>&lt;script src=&quot;...&quot; /&gt;</code>，<code>&lt;img&gt;</code>，<code>&lt;link&gt;</code>，<code>&lt;iframe&gt;</code>等</li></ul><h2 id="跨域方案" tabindex="-1">跨域方案 <a class="header-anchor" href="#跨域方案" aria-label="Permalink to &quot;跨域方案&quot;">​</a></h2><ul><li>JSONP</li><li>CORS</li><li>代理跨域</li></ul><h2 id="jsonp" tabindex="-1">JSONP <a class="header-anchor" href="#jsonp" aria-label="Permalink to &quot;JSONP&quot;">​</a></h2><p>原理：动态创建<code>script</code>标签，通过<code>script</code>标签的<code>src</code>属性调用脚本</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// 1、定义一个处理函数，处理接收回来的数据</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">getData</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">res</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  conlose.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(res);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 2、创建一个script标签去请求数据</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> jsonp </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#50FA7B;">createElement</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">script</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">jsonp.src </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">http://localhost:3000/jsonp?callback=getData</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 3、将这个script标签添加到页面当中去</span></span>
<span class="line"><span style="color:#F8F8F2;">document.body.</span><span style="color:#50FA7B;">appendChild</span><span style="color:#F8F8F2;">(jsonp);</span></span>
<span class="line"></span></code></pre></div><p>jsonp 的优势：</p><ul><li>使用简单</li><li>兼容性极好，几乎所有的浏览器都支持 script 标签</li></ul><p>jsonp 的劣势：</p><ul><li><strong>只支持 get 请求</strong></li><li>存在安全性问题。需要网站双方商议基础 token 的身份验证</li><li>可能被注入恶意代码，篡改页面内容</li></ul><h2 id="cors" tabindex="-1">CORS <a class="header-anchor" href="#cors" aria-label="Permalink to &quot;CORS&quot;">​</a></h2><p>CORS（Cross-Origin Resource Sharing，跨域资源共享）需要浏览器和服务器同时支持。目前，所有浏览器都支持该功能，IE 浏览器不能低于 IE10。</p><p>CORS 将请求分成两种：简单请求、非简单请求</p><h3 id="简单请求" tabindex="-1">简单请求 <a class="header-anchor" href="#简单请求" aria-label="Permalink to &quot;简单请求&quot;">​</a></h3><p>同时满足以下两个条件就是简单请求</p><ol><li>请求方法是以下三种方法之一：HEAD、GET、POST</li><li>HTTP 的头信息不超出以下几种字段：</li></ol><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type：只限于三个值 <code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code></li></ul><p>axios 的<code>content-type</code>在 post 下是： <code>application/json</code></p><p><strong>简单请求的流程</strong></p><ol><li>浏览器直接发出 CORS 请求。发送时会自动带上一个请求头：<code>Origin：客户端域名</code></li><li>服务器根据请求返回内容</li><li>浏览器对返回的响应头进行分析</li></ol><p>如果存在响应头为<code>Access-Control-Allow-Oringin：&quot;客户端的域名&quot;</code>，那么，浏览器就会将请求到的数据返回给 ajax 对象。 否则，浏览器将会触发 ajax 对象的<code>onerror</code>函数抛出一个错误。这种错误无法通过 http 状态码捕获，因为服务端是正确响应了的， 即正常的 200</p><h3 id="非简单请求" tabindex="-1">非简单请求 <a class="header-anchor" href="#非简单请求" aria-label="Permalink to &quot;非简单请求&quot;">​</a></h3><p>请求过程:</p><ol><li>先发出一个 options 的请求，该请求会带上一些头信息</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">Origin： </span><span style="color:#F1FA8C;">客户端域名</span></span>
<span class="line"><span style="color:#6272A4;"># (表明客户端发送的请求头数据)</span></span>
<span class="line"><span style="color:#F8F8F2;">Access-Control-Request-Headers: </span><span style="color:#F1FA8C;">content-type</span></span>
<span class="line"><span style="color:#6272A4;">#（表明客户端发送的请求类型）</span></span>
<span class="line"><span style="color:#F8F8F2;">Access-Control-Request-Method: </span><span style="color:#F1FA8C;">POST</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>服务器返回 options 请求</li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;"># 可以是指定域名，也可以是全域名 *</span></span>
<span class="line"><span style="color:#F8F8F2;">Access-Control-Allow-Origin: </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">允许跨域的域名</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">Access-Control-Allow-Headers: </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">与客户端对应</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">Access-Control-Allow-Method： </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">与客户端的对应或者大于客户端</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"></span></code></pre></div><ol start="3"><li><p>客户端检查 options 请求的响应头。如果响应头对应上了，那么浏览器正式发起一个请求。</p></li><li><p>服务器对请求做出回应。同时带上之前发送的请求头，完成跨域过程。</p></li></ol><p>默认情况下<code>Access-Control-Allow-Credentials: false</code>，即不允许客户端携带验证信息到服务端，比如 cookies。 那么，可能存在 session 将无法根据 cookie 获取到用户的登录信息</p><p>解决方案：</p><ol><li>在响应头里边，指定唯一的允许跨域的域名</li><li>服务端在响应头里边。指定<code>Access-Control-Allow-Credentials：true</code></li><li>客户端的 ajax 对象，必须指定<code>withCredentials: true</code></li></ol><h2 id="代理跨域" tabindex="-1">代理跨域 <a class="header-anchor" href="#代理跨域" aria-label="Permalink to &quot;代理跨域&quot;">​</a></h2><p>只有浏览器存在跨域问题，使用服务器将跨域的接口转发过来即可</p><p>假如有 A 网站向 B 网站发起请求，使用代理跨域，只需要在 A 网站的服务器发送一个请求到 B 网站，取得相应的数据。 然后再用浏览器发送请求到 A，取得数据。</p><h3 id="vue-config-js-配置跨域" tabindex="-1">vue.config.js 配置跨域 <a class="header-anchor" href="#vue-config-js-配置跨域" aria-label="Permalink to &quot;vue.config.js 配置跨域&quot;">​</a></h3><p>使用 vue-cli3 脚手架后，webpack 的配置被隐藏，当需要覆盖原有的配置时，则需要在项目的根目录下，新建 vue.config.js 文件</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#8BE9FD;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  devServer</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    proxy</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/api</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        target</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">http://localhost:3000/api</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        ws</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        changeOrigin</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        pathRewrite</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">^/api</span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span></code></pre></div><h3 id="http-proxy-middleware" tabindex="-1">http-proxy-middleware <a class="header-anchor" href="#http-proxy-middleware" aria-label="Permalink to &quot;http-proxy-middleware&quot;">​</a></h3><p>中间件，<a href="https://www.npmjs.com/package/http-proxy-middleware" target="_blank" rel="noreferrer">npm 地址</a></p><p>安装</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">install</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">--save-dev</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">http-proxy-middleware</span></span>
<span class="line"></span></code></pre></div><p>示例</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> express </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">express</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> { createProxyMiddleware } </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">http-proxy-middleware</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> app </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">express</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> options </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  target</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">http://www.example.org</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  changeOrigin</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">use</span><span style="color:#F8F8F2;">(express.</span><span style="color:#50FA7B;">static</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">dist</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">use</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#50FA7B;">createProxyMiddleware</span><span style="color:#F8F8F2;">(options));</span></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">listen</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">3000</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="liveserver-插件" tabindex="-1">liveServer 插件 <a class="header-anchor" href="#liveserver-插件" aria-label="Permalink to &quot;liveServer 插件&quot;">​</a></h3><p>在 vscode 里安装 liveServer 插件，在项目根目录新建<code>.vscode</code>文件夹，接着在里面创建<code>setting.json</code>，写入如下内容：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">liveServer.settings.host</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">127.0.0.1</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">liveServer.settings.port</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">8083</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">liveServer.settings.proxy</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">enable</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">baseUri</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">/api</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">proxyUri</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">http://192.168.31.77:8081</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#6272A4;">// 测试</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">liveServer.settings.donotVerifyTags</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">window.zoomLevel</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div>`,54),e=[p];function t(c,F,r,i,y,d){return n(),a("div",null,e)}const C=s(o,[["render",t]]);export{h as __pageData,C as default};
