import{_ as s,c as a,o as n,Q as l}from"./chunks/framework.f14b72c3.js";const u=JSON.parse('{"title":"Node","description":"","frontmatter":{},"headers":[],"relativePath":"fe/node/index.md","lastUpdated":1688050449000}'),o={name:"fe/node/index.md"},p=l(`<h1 id="node" tabindex="-1">Node <a class="header-anchor" href="#node" aria-label="Permalink to &quot;Node&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>node 官网下载地址: <a href="https://nodejs.org/en/download/" target="_blank" rel="noreferrer">https://nodejs.org/en/download/</a></p><p>中文文档: <a href="http://nodejs.cn/api/" target="_blank" rel="noreferrer">http://nodejs.cn/api/</a></p><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时</p><p>简单说，node 就是一个可以运行 js 代码的环境，不是一门编程语言，可以做服务器端开发</p><p>node 和 node-sass 对应版本: <a href="https://www.npmjs.com/package/node-sass" target="_blank" rel="noreferrer">https://www.npmjs.com/package/node-sass</a></p><blockquote><ol><li>node 运行的 js 是指 ECMAScript，不能运行 BOM 和 DOM 的 API（如<code>window</code>、<code>document</code>等对象），可以使用 console 和定时器等</li><li>node 中的顶级对象是<code>global</code>，也可以使用<code>globalThis</code>（是 ES2020 支持的）</li></ol></blockquote><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h2><ul><li>单线程</li><li>异步式 I/O</li><li>事件驱动</li><li>跨平台</li></ul><p>这里的单线程是指<strong>主线程是单线程</strong>的，主线程还能有其他子线程。因为是单线程，所以只要有一个任务耗时非常长，后面的任务必须要排队等待，会拖延整个程序执行，从而降低了效率，于是提出了<strong>异步</strong>的思想。在执行代码的时候，主线程从上往下依次执行，遇到有需要回调的地方，就将此处加入到<strong>事件队列</strong>中，然后主线程继续往下走，直到运行结束以后，才去执行事件队列中的回调</p><p>事件驱动，是指在持续事务管理过程中，进行决策的一种策略，即跟随当前时间点上出现的事件，调动可用资源，执行相关任务，使不断出现的问题得以解决，防止事务堆积</p><h2 id="node-命令" tabindex="-1">node 命令 <a class="header-anchor" href="#node-命令" aria-label="Permalink to &quot;node 命令&quot;">​</a></h2><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;"># 查看node版本</span></span>
<span class="line"><span style="color:#F8F8F2;">node </span><span style="color:#BD93F9;">-v</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 查看npm版本，</span></span>
<span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#BD93F9;">-v</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 查看node安装目录</span></span>
<span class="line"><span style="color:#8BE9FD;">which</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">node</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 查看官方所有的node版本</span></span>
<span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">view</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">node</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">versions</span></span>
<span class="line"></span></code></pre></div><h2 id="管理-node-版本" tabindex="-1">管理 node 版本 <a class="header-anchor" href="#管理-node-版本" aria-label="Permalink to &quot;管理 node 版本&quot;">​</a></h2><p>在维护一些老项目时通常需要降低 node 的版本，如遇到 node-gyp 报错、node-sass 报错等</p><h3 id="使用-n-模块管理" tabindex="-1">使用 n 模块管理 <a class="header-anchor" href="#使用-n-模块管理" aria-label="Permalink to &quot;使用 n 模块管理&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;"># 清除npm缓存</span></span>
<span class="line"><span style="color:#F8F8F2;">sudo </span><span style="color:#F1FA8C;">npm</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">cache</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">clean</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">-f</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 全局安装 n 模块</span></span>
<span class="line"><span style="color:#F8F8F2;">sudo </span><span style="color:#F1FA8C;">npm</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">install</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">-g</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 查看是否安装成功</span></span>
<span class="line"><span style="color:#F8F8F2;">n </span><span style="color:#BD93F9;">-V</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 查看已安装的node版本</span></span>
<span class="line"><span style="color:#F8F8F2;">n </span><span style="color:#F1FA8C;">ls</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 安装指定版本，如 14.12.0</span></span>
<span class="line"><span style="color:#F8F8F2;">sudo </span><span style="color:#F1FA8C;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">14.12.0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 更新到最新的稳定版</span></span>
<span class="line"><span style="color:#F8F8F2;">sudo </span><span style="color:#F1FA8C;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">stable</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 更新到最新版本</span></span>
<span class="line"><span style="color:#F8F8F2;">sudo </span><span style="color:#F1FA8C;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">latest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 切换版本，输入 n 回车，上下键选择版本，回车安装</span></span>
<span class="line"><span style="color:#F8F8F2;">sudo </span><span style="color:#F1FA8C;">n</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 删除指定版本，如 14.12.0，删除后用 n 切换一下版本</span></span>
<span class="line"><span style="color:#F8F8F2;">sudo </span><span style="color:#F1FA8C;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">rm</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">14.12.0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 卸载 n</span></span>
<span class="line"><span style="color:#F8F8F2;">sudo </span><span style="color:#F1FA8C;">npm</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">uninstall</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">n</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">-g</span></span>
<span class="line"></span></code></pre></div><h2 id="require-载入模块" tabindex="-1">require 载入模块 <a class="header-anchor" href="#require-载入模块" aria-label="Permalink to &quot;require 载入模块&quot;">​</a></h2><p>Node.js 默认是使用<code>CommonJS</code>规范</p><ul><li>require 方法 用来载入模块的</li><li>moule.exports 用来导出模块的</li></ul><p>载入系统模块和第三方模块不需要写路径，直接写名称即可，但是载入自定义模块需要写路径</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> http </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">http</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> myapp </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">../com/my.js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><p>require 加载第三方包的机制：</p><ol><li>第三方包安装好后，这个包一般会存放在当前项目的 node_modules 文件夹中。找到这个包的 package.json 文件，并且找到里面的 main 属性对应的入口模块，这个入口模块就是这个包的入口文件</li><li>如果第三方包中没有找到 package.json 文件，或者没有 main 属性，则默认加载第三方包中的 index.js 文件</li><li>如果在 node_modules 文件夹中没有找到这个包，或者以上所有情况都没有找到，则会向上一级父级目录下查找 node_modules 文件夹，查找规则如上一致</li><li>如果一直找到该模块的磁盘根路径都没有找到，则会报错：<code>can not find module xxx</code></li></ol><h2 id="库" tabindex="-1">库 <a class="header-anchor" href="#库" aria-label="Permalink to &quot;库&quot;">​</a></h2><ul><li><a href="https://www.npmjs.com/package/csvtojson" target="_blank" rel="noreferrer">csvtojson</a> CSV 格式转为 JSON</li><li><a href="https://www.npmjs.com/package/randomjson" target="_blank" rel="noreferrer">randomjson</a> 生成随机 JSON 数据</li><li><a href="https://www.npmjs.com/package/http-proxy-agent" target="_blank" rel="noreferrer">http-proxy-agent</a> HTTP(s) 代理 HTTP.Agent 实现 HTTP</li><li><a href="https://www.npmjs.com/package/multiparty" target="_blank" rel="noreferrer">multiparty</a> 解析具有<code>multipart/form-data</code>类型的 HTTP 请求，如解析上传文件</li></ul><h2 id="process-模块" tabindex="-1">process 模块 <a class="header-anchor" href="#process-模块" aria-label="Permalink to &quot;process 模块&quot;">​</a></h2><p><code>process.argv</code> 可以获得命令行调用的信息，以空格分隔。假设执行一个脚本 test.js，运行<code>node test.js</code>， 那么<code>process.argv</code>的结果是<code>[&#39;node&#39;, &#39;test.js&#39;]</code></p><h2 id="path-模块" tabindex="-1">path 模块 <a class="header-anchor" href="#path-模块" aria-label="Permalink to &quot;path 模块&quot;">​</a></h2><p>可以操作路径</p><ul><li><code>path.resolve</code> 拼接规范的绝对路径</li><li><code>path.sep</code> 获取操作系统的路径分隔符</li><li><code>path.parse</code> 解析路径并返回对象</li><li><code>path.basename</code> 获取路径的基础名称</li><li><code>path.dirname</code> 获取路径的目录名</li><li><code>path.extname</code> 获取路径的扩展名</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> path </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">path</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 结果：Windows下是反斜杠 \\ ，linux下是正斜杠 /</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(path.sep);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(path.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(__dirname, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">1.txt</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)); </span><span style="color:#6272A4;">// 结果：/Users/zgh/code/blog/1.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> pathName </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/Users/zgh/code/blog/1.txt</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(path.</span><span style="color:#50FA7B;">parse</span><span style="color:#F8F8F2;">(pathName));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(path.</span><span style="color:#50FA7B;">basename</span><span style="color:#F8F8F2;">(pathName)); </span><span style="color:#6272A4;">// 1.txt</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(path.</span><span style="color:#50FA7B;">dirname</span><span style="color:#F8F8F2;">(pathName)); </span><span style="color:#6272A4;">// 结果：/Users/zgh/code/blog</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(path.</span><span style="color:#50FA7B;">extname</span><span style="color:#F8F8F2;">(pathName)); </span><span style="color:#6272A4;">// .txt</span></span>
<span class="line"></span></code></pre></div><p><code>path.resolve()</code>这里第二个参数可以写<code>&#39;1.txt&#39;</code>或者<code>&#39;./1.txt&#39;</code>，但是不能写<code>&#39;/index&#39;</code>，即可以写相对路径</p><p>上面<code>path.parse(pathName)</code>的打印结果如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">  root: </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  dir: </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/Users/zgh/code/blog</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  base: </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">1.txt</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  ext: </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">.txt</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  name: </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">1</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div>`,36),e=[p];function c(t,r,F,i,d,y){return n(),a("div",null,e)}const A=s(o,[["render",c]]);export{u as __pageData,A as default};
