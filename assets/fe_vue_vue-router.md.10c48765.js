import{_ as s,c as a,o as n,Q as l}from"./chunks/framework.f14b72c3.js";const C=JSON.parse('{"title":"vue-router","description":"","frontmatter":{},"headers":[],"relativePath":"fe/vue/vue-router.md","lastUpdated":1688050449000}'),p={name:"fe/vue/vue-router.md"},o=l(`<h1 id="vue-router" tabindex="-1">vue-router <a class="header-anchor" href="#vue-router" aria-label="Permalink to &quot;vue-router&quot;">​</a></h1><h2 id="动态匹配" tabindex="-1">动态匹配 <a class="header-anchor" href="#动态匹配" aria-label="Permalink to &quot;动态匹配&quot;">​</a></h2><p>比如有一个列表页 <code>/list</code>，进入详情页都要使用同一个组件</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> router </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">VueRouter</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  routes</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// 动态路径参数 以冒号开头</span></span>
<span class="line"><span style="color:#F8F8F2;">    { path</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/user/:id</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, component</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> detail }</span></span>
<span class="line"><span style="color:#F8F8F2;">  ]</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><p>这样<code>/list/1</code>、<code>/list/2</code>都会匹配到同一个组件</p><h3 id="_404-路由" tabindex="-1">404 路由 <a class="header-anchor" href="#_404-路由" aria-label="Permalink to &quot;404 路由&quot;">​</a></h3><p>含有通配符的路由一定要放在最后</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> Vue </span><span style="color:#FF79C6;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">vue</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> Router </span><span style="color:#FF79C6;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">vue-router</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">Vue.</span><span style="color:#50FA7B;">use</span><span style="color:#F8F8F2;">(Router);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> router </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Router</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  mode</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">history</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  routes</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">      path</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">adminLayout</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#50FA7B;">component</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">@/admin/layout</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">      path</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/404</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#50FA7B;">component</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">@/views/404</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">      path</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">*</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      redirect</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/404</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  ]</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">default</span><span style="color:#F8F8F2;"> router;</span></span>
<span class="line"></span></code></pre></div><h2 id="嵌套路由" tabindex="-1">嵌套路由 <a class="header-anchor" href="#嵌套路由" aria-label="Permalink to &quot;嵌套路由&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> Vue </span><span style="color:#FF79C6;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">vue</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> Router </span><span style="color:#FF79C6;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">vue-router</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">Vue.</span><span style="color:#50FA7B;">use</span><span style="color:#F8F8F2;">(Router);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> router </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Router</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  mode</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">history</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  routes</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">      path</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/admin</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">adminLayout</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#50FA7B;">component</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">@/admin/layout</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">      redirect</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/admin/ecs</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      children</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">          path</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">ecs</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">          name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">ECS</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#50FA7B;">component</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">@/admin/ecs</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        },</span></span>
<span class="line"><span style="color:#F8F8F2;">        {</span></span>
<span class="line"><span style="color:#F8F8F2;">          path</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">oss</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">          name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">OSS</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#50FA7B;">component</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">@/admin/oss</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      ]</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  ]</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">default</span><span style="color:#F8F8F2;"> router;</span></span>
<span class="line"></span></code></pre></div><p><strong>以 <code>/</code> 开头的嵌套路径会被当作根路径</strong>，所以 children 中的路径不用设置成 <code>path: &#39;/admin/ecs&#39;</code>， 直接设置成 <code>path: &#39;ecs&#39;</code>即可，不要加<code>/</code>。但是路由重定向时要写完整 <code>redirect: &#39;/admin/ecs&#39;</code></p><h2 id="编程式导航" tabindex="-1">编程式导航 <a class="header-anchor" href="#编程式导航" aria-label="Permalink to &quot;编程式导航&quot;">​</a></h2><p>在 Vue 实例内部，可以通过 $router 访问路由实例。</p><h3 id="router-push" tabindex="-1"><code>router.push()</code> <a class="header-anchor" href="#router-push" aria-label="Permalink to &quot;\`router.push()\`&quot;">​</a></h3><p><code>this.$router.push(...)</code> 这种方式会向 history 栈中添加一个新的记录，当点击浏览器后退按钮时，会回到上一个 url。 类似于<code>window.history.pushState()</code><strong>声明式导航 <code>&lt;router-link :to=&quot;...&quot;&gt;</code>会创建 a 标签来定义导航链接</strong>。它会在内部调用<code>router.push</code>方法</p><p>参数可以是字符串路径或者地址对象</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.$router.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/admin/ecs</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><h4 id="路由传参" tabindex="-1">路由传参 <a class="header-anchor" href="#路由传参" aria-label="Permalink to &quot;路由传参&quot;">​</a></h4><p>方式一、query</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// 传参</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.$router.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">({ path</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/admin/ecs</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, query</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { id</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;"> } });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 取值</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.$route.query.id;</span></span>
<span class="line"></span></code></pre></div><p>使用这种方式，参数会拼接在路由后面，出现在地址栏</p><p>方式二、params</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.$router.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">({ name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">ECS</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, params</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { id</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;"> } });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 取值</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.$route.params.id;</span></span>
<span class="line"></span></code></pre></div><p>使用这种方式，参数不会拼接在路由后面，地址栏上看不到参数</p><p>由于动态路由也是传递 params 的，所以在 this.$router.push() 方法中 path 不能和 params 一起使用，否则 params 将无效。 需要用 name 来指定页面，即通过路由配置的 name 属性访问</p><p>如果需要传递多个参数，如下所示：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.$router.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  name</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">second</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  params</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {  id</span><span style="color:#FF79C6;">:</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">20180822</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,  name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">query</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">//params接收参数</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.id </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.$route.params.id ;</span></span>
<span class="line"><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.$route.params.name ;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">//路由</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">    path: </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/second/:id/:name</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    name: </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">second</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    component: () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">@/view/second</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>如果路由后面没有 <code>/:id/:name</code>，刷新页面后会发现页面失败</p><p>注意点：使用 query 刷新不会丢失数据、使用 params 刷新会丢失 params 里面的数据</p><h3 id="router-replace" tabindex="-1"><code>router.replace()</code> <a class="header-anchor" href="#router-replace" aria-label="Permalink to &quot;\`router.replace()\`&quot;">​</a></h3><p>不会向 history 栈中添加记录，而是会替换当前的 history 记录，类似<code>window.history.replaceState()</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.$router.</span><span style="color:#50FA7B;">replace</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/admin/ecs</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><p>声明式 <code>&lt;router-link :to=&quot;...&quot; replace&gt;</code></p><h3 id="router-go-n" tabindex="-1"><code>router.go(n)</code> <a class="header-anchor" href="#router-go-n" aria-label="Permalink to &quot;\`router.go(n)\`&quot;">​</a></h3><p>在 history 记录中向前或者后退多少步，类似<code>window.history.go(n)</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// 在浏览器记录中前进一步，等同于 history.forward()</span></span>
<span class="line"><span style="color:#F8F8F2;">router.</span><span style="color:#50FA7B;">go</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 后退一步记录，等同于 history.back()</span></span>
<span class="line"><span style="color:#F8F8F2;">router.</span><span style="color:#50FA7B;">go</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">router.</span><span style="color:#50FA7B;">back</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">router.</span><span style="color:#50FA7B;">forward</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span></code></pre></div><h2 id="路由组件传参" tabindex="-1">路由组件传参 <a class="header-anchor" href="#路由组件传参" aria-label="Permalink to &quot;路由组件传参&quot;">​</a></h2><p>比如从列表页进入详情页，需要携带 id 参数</p><p>路由配置</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> router </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">VueRouter</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  routes</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [{ path</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/user/:id</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, component</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> User, props</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;"> }]</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><p>如果 <code>props</code> 被设置为 <code>true</code>，<code>route.params</code> 将会被设置为组件属性</p><p>详情页使用 <code>props: [&#39;id&#39;]</code>接收参数</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">default</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  props</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">id</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">data</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      tableLoading</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">false</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span></code></pre></div><p>在组件中使用 <code>$route</code> 会使之与其对应路由形成高度耦合，从而使组件只能在某些特定的 URL 上使用，限制了其灵活性。 不推荐使用<code>this.$route.params.id</code>获取参数。</p><p>推荐使用 <code>props</code> 将组件和路由解耦</p><h2 id="路由模式" tabindex="-1">路由模式 <a class="header-anchor" href="#路由模式" aria-label="Permalink to &quot;路由模式&quot;">​</a></h2><p>vue-router 默认是 hash 模式，这种模式会在路径中带一个<code>#</code>号。如果不想要#号可以用 history 模式，配置如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> router </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">VueRouter</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  mode</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">history</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  routes</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre></div><p>history 模式需要后端支持，比如在 nginx 中需要添加如下配置，否则刷新页面就会报 404 错误</p><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">location</span><span style="color:#F8F8F2;"> / {</span></span>
<span class="line"><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;"> try_files </span><span style="color:#F8F8F2;">$uri $uri/ /index.html;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="导航守卫" tabindex="-1">导航守卫 <a class="header-anchor" href="#导航守卫" aria-label="Permalink to &quot;导航守卫&quot;">​</a></h2><p>“导航”表示路由正在发生改变。守卫是异步解析执行，此时导航在所有守卫<code>resolve</code>完之前一直处于<strong>等待中</strong>。</p><h3 id="全局前置守卫" tabindex="-1">全局前置守卫 <a class="header-anchor" href="#全局前置守卫" aria-label="Permalink to &quot;全局前置守卫&quot;">​</a></h3><p>使用 <code>router.beforeEach</code> 注册一个全局守卫</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> router </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">VueRouter</span><span style="color:#F8F8F2;">({ </span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">router.</span><span style="color:#50FA7B;">beforeEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">to</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">from</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#6272A4;">// ...</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre></div><ul><li>to 即将要进入的目标</li><li>from 当前导航正要离开的路由</li><li>next 函数，进行管道中的下一个钩子</li></ul><p>比如要做路由拦截，用户没登录不让访问控制台</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> Vue </span><span style="color:#FF79C6;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">vue</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> Router </span><span style="color:#FF79C6;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">vue-router</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> NProgress </span><span style="color:#FF79C6;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">nprogress</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">nprogress/nprogress.css</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Vue.</span><span style="color:#50FA7B;">use</span><span style="color:#F8F8F2;">(Router);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> router </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Router</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  routes</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">      path</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">adminLayout</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      meta</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        requireAuth</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#50FA7B;">component</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">@/admin/layout</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">      redirect</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/admin/ecs</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      children</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  ]</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">router.</span><span style="color:#50FA7B;">beforeEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">to</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">from</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (to.matched.</span><span style="color:#50FA7B;">some</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> res.meta.requireAuth)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (sessionStorage.</span><span style="color:#50FA7B;">getItem</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">access_token</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      NProgress.</span><span style="color:#50FA7B;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">({ path</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/login</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    NProgress.</span><span style="color:#50FA7B;">start</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F8F8F2;">router.</span><span style="color:#50FA7B;">afterEach</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  NProgress.</span><span style="color:#50FA7B;">done</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><p>此处的 nprogress 是一个可以显示路由加载进度动画的插件，可忽略。</p><p><code>to</code> 、<code>from</code>均表示<a href="https://router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1" target="_blank" rel="noreferrer">路由对象</a>， 路由对象有一个<code>matched</code>属性，是一个数组，包含当前路由的所有嵌套路径片段的路由记录。</p><p>some()是数组方法，表示一些，只要数组中的某一个元素符合指定的条件，就会返回 true，否则返回 false。</p><p>所以整体思路是先做一个路由全局前置守卫，若即将要进入的目标需要鉴权且<code>sessionStorage</code>中有登录时存的 token， 则跳转到目标页，否则跳转到登录页。</p><h3 id="全局后置钩子" tabindex="-1">全局后置钩子 <a class="header-anchor" href="#全局后置钩子" aria-label="Permalink to &quot;全局后置钩子&quot;">​</a></h3><p>不接受<code>next</code>函数，也不会改变导航本身。</p><p>在上个例子中可以用来关闭加载动画</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">router.</span><span style="color:#50FA7B;">afterEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">to</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">from</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  NProgress.</span><span style="color:#50FA7B;">done</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><h3 id="路由独有的守卫" tabindex="-1">路由独有的守卫 <a class="header-anchor" href="#路由独有的守卫" aria-label="Permalink to &quot;路由独有的守卫&quot;">​</a></h3><p><code>beforeEnter</code>守卫，区别于全局守卫，这个只对单个路由有效</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> router </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">VueRouter</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  routes</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">      path</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/foo</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      component</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> Foo,</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#50FA7B;">beforeEnter</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">to</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">from</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#6272A4;">// ...</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  ]</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><h3 id="组件内的守卫" tabindex="-1">组件内的守卫 <a class="header-anchor" href="#组件内的守卫" aria-label="Permalink to &quot;组件内的守卫&quot;">​</a></h3><p>可以直接在组件内定义导航守卫</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> Foo </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  template</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">\`...\`</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">beforeRouteEnter</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">to</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">from</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// 在渲染该组件的对应路由被 confirm 前调用</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// 不能获取组件实例 \`this\` ，因为当守卫执行前，组件实例还没被创建</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">beforeRouteUpdate</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">to</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">from</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// 在当前路由改变，但是该组件被复用时调用</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// 可以访问组件实例 \`this\`</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">beforeRouteLeave</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">to</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">from</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// 导航离开该组件的对应路由时调用</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// 可以访问组件实例 \`this\`</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span></code></pre></div><p>在<code>beforeRouteEnter</code>中不能获取实例，但可以通过传一个回调给<code>next</code>来访问组件实例</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">beforeRouteEnter</span><span style="color:#F8F8F2;"> (to, from, next) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">vm</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// 通过 \`vm\` 访问组件实例</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="路由元信息" tabindex="-1">路由元信息 <a class="header-anchor" href="#路由元信息" aria-label="Permalink to &quot;路由元信息&quot;">​</a></h2><p>在定义路由的时候可以配置 <code>meta</code> 字段，里边的就是元信息</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> router </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Router</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  routes</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">      path</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">adminLayout</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      meta</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        requireAuth</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#50FA7B;">component</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">@/admin/layout</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  ]</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><p>一个路由匹配到的所有路由记录会暴露为<code>$route</code>对象 (还有在导航守卫中的路由对象) 的 <code>$route.matched</code> 数组。 因此，我们需要遍历 <code>$route.matched</code> 来检查路由记录中的 meta 字段。如上面路由拦截例子里的<code>to.matched.some(res =&gt; res.meta.requireAuth)</code></p><h2 id="路由懒加载" tabindex="-1">路由懒加载 <a class="header-anchor" href="#路由懒加载" aria-label="Permalink to &quot;路由懒加载&quot;">​</a></h2><p>结合 <code>Vue</code> 的异步组件和 <code>Webpack</code> 的代码分割功能，轻松实现路由组件的懒加载。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> router </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Router</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">  routes</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">      path</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">adminLayout</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#50FA7B;">component</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">@/admin/layout</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  ]</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><h3 id="把组件按组分块" tabindex="-1">把组件按组分块 <a class="header-anchor" href="#把组件按组分块" aria-label="Permalink to &quot;把组件按组分块&quot;">​</a></h3><p>把某个路由下的所有组件都打包在同个异步块 (chunk) 中</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Foo</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">import</span><span style="color:#F8F8F2;">(</span><span style="color:#6272A4;">/* webpackChunkName: &quot;group-foo&quot; */</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./Foo.vue</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Bar</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">import</span><span style="color:#F8F8F2;">(</span><span style="color:#6272A4;">/* webpackChunkName: &quot;group-foo&quot; */</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./Bar.vue</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Baz</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">import</span><span style="color:#F8F8F2;">(</span><span style="color:#6272A4;">/* webpackChunkName: &quot;group-foo&quot; */</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./Baz.vue</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><h2 id="滚动行为" tabindex="-1">滚动行为 <a class="header-anchor" href="#滚动行为" aria-label="Permalink to &quot;滚动行为&quot;">​</a></h2><p>切换路由时，控制页面的滚动位置。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> router </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">VueRouter</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">    routes</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">scrollBehavior</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">to</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">from</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">savedPosition</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#6272A4;">// return 期望滚动到哪个的位置</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> { x</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">, y</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">})</span></span>
<span class="line"></span></code></pre></div><h2 id="动态路由" tabindex="-1">动态路由 <a class="header-anchor" href="#动态路由" aria-label="Permalink to &quot;动态路由&quot;">​</a></h2><p>方式大致有两种：</p><p>1、前端控制，即前端写好路由表，根据用户的角色权限动态展示不同的路由</p><p>2、后端控制，即后端传来当前用户权限的路由表，前端再渲染</p><p>一般采用更多的是第 2 种方式，第 1 种方式可参考<a href="https://segmentfault.com/a/1190000009506097" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000009506097</a></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">router.</span><span style="color:#50FA7B;">addRoutes</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">routes</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Array</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#FFB86C;font-style:italic;">RouteConfig</span><span style="color:#F8F8F2;">&gt;));</span></span>
<span class="line"></span></code></pre></div><p>动态添加更多的路由规则。参数必须是一个符合 <code>routes</code> 选项要求的数组。</p>`,94),F=[o];function e(t,c,r,y,i,d){return n(),a("div",null,F)}const h=s(p,[["render",e]]);export{C as __pageData,h as default};
