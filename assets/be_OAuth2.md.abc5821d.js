import{_ as i,c as e,o as a,Q as t}from"./chunks/framework.f14b72c3.js";const m=JSON.parse('{"title":"OAuth2","description":"","frontmatter":{},"headers":[],"relativePath":"be/OAuth2.md","lastUpdated":1695604450000}'),l={name:"be/OAuth2.md"},o=t('<h1 id="oauth2" tabindex="-1">OAuth2 <a class="header-anchor" href="#oauth2" aria-label="Permalink to &quot;OAuth2&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>OAuth (Open Authorization)，目前版本是 2.1</p><ol><li>是一个关于授权的开放网络标准</li><li>允许用户授权第三方应用访问用户存储在其他服务上的信息</li><li>不需要将用户名和密码提供给第三方应用</li></ol><p>例如，在登录百度时可以选择使用微信登录，只需要同意微信授权，百度就可以获取用户在微信上的信息，而不需要用户在百度登录页输入用户名和密码</p><h2 id="角色介绍" tabindex="-1">角色介绍 <a class="header-anchor" href="#角色介绍" aria-label="Permalink to &quot;角色介绍&quot;">​</a></h2><ol><li><strong>Resource Owner</strong>，资源所有者，又称“用户”（user）</li><li><strong>User Agent</strong>，用户代理，比如浏览器</li><li><strong>Third-party application</strong>，第三方应用程序，又称“客户端”（client），如例子中的百度</li><li><strong>HTTP service</strong>，服务提供商，如例子中的微信</li><li><strong>Authorization server</strong>，授权服务器，即服务提供商专门用来处理认证授权的服务器</li><li><strong>Resource server</strong>，资源服务器，即资源提供商存放用户资源的服务器</li></ol><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h2><h3 id="授权码模式" tabindex="-1">授权码模式 <a class="header-anchor" href="#授权码模式" aria-label="Permalink to &quot;授权码模式&quot;">​</a></h3><p>authorization_code</p><p>申请授权接口示例：<code>/oauth/authorize?client_id=baidu&amp;response_type=code&amp;scope=all&amp;redirect_uri=https://www.baidu.com</code></p><ul><li>client_id：客户端 ID，需要在授权服务器中注册</li><li>response_type：code 表示返回授权码，token 表示返回访问令牌</li><li>scope：权限范围，在授权服务器配置</li><li>redirect_uri：重定向 URI，用户授权成功后跳转</li></ul><p>步骤：</p><ol><li>用户通过代理（浏览器）访问客户端</li><li>客户端将用户导向授权服务器</li><li>授权服务器询问用户是否给予客户端授权</li><li>用户同意授权</li><li>授权服务器将用户导向客户端指定的重定向 URI，并附上授权码</li><li>客户端收到授权码，向授权服务器申请令牌</li><li>授权服务器核对授权码，向客户端发送访问令牌（access token）和更新令牌（refresh token）</li><li>通过访问令牌向资源服务器请求资源</li><li>资源服务器把访问令牌交给授权服务器进行检验（存在 IO 问题，有其他更优解）</li></ol><p>接口示例：<code>/oauth/token?client_id=baidu&amp;client_secret=123456&amp;grant_type=authorization_code&amp;code=6rXglz&amp;redirect_uri=https://www.baidu.com</code></p><ul><li>client_id：客户端 ID，需要在授权服务器中注册</li><li>client_secret：客户端密码，在授权服务器中配置</li><li>grant_type：授权模式 <ul><li>授权码模式（authorization_code）</li><li>简单模式（implicit）</li><li>密码模式（password_credentials）</li><li>客户端模式（client_credentials）</li></ul></li><li>code：授权码，在授权码模式提供</li></ul><h3 id="简单模式" tabindex="-1">简单模式 <a class="header-anchor" href="#简单模式" aria-label="Permalink to &quot;简单模式&quot;">​</a></h3><p>implicit</p><h3 id="密码模式" tabindex="-1">密码模式 <a class="header-anchor" href="#密码模式" aria-label="Permalink to &quot;密码模式&quot;">​</a></h3><p>password</p><h3 id="客户端模式" tabindex="-1">客户端模式 <a class="header-anchor" href="#客户端模式" aria-label="Permalink to &quot;客户端模式&quot;">​</a></h3><p>client_credentials</p>',22),r=[o];function n(s,c,d,h,p,u){return a(),e("div",null,r)}const b=i(l,[["render",n]]);export{m as __pageData,b as default};
