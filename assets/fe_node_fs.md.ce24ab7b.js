import{_ as s,c as a,o as n,Q as l}from"./chunks/framework.f14b72c3.js";const C=JSON.parse('{"title":"fs 文件系统","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"fe/node/fs.md","lastUpdated":1683514170000}'),p={name:"fe/node/fs.md"},o=l(`<h1 id="fs-文件系统" tabindex="-1">fs 文件系统 <a class="header-anchor" href="#fs-文件系统" aria-label="Permalink to &quot;fs 文件系统&quot;">​</a></h1><p><a href="https://nodejs.org/api/fs.html" target="_blank" rel="noreferrer">API 地址</a></p><p>fs 模块可以实现与硬盘的交互。例如文件的创建、删除、重命名、移动，还有文件内容的写入、读取以及文件夹的相关操作</p><h2 id="文件读取" tabindex="-1">文件读取 <a class="header-anchor" href="#文件读取" aria-label="Permalink to &quot;文件读取&quot;">​</a></h2><h3 id="fs-readfile" tabindex="-1">fs.readFile() <a class="header-anchor" href="#fs-readfile" aria-label="Permalink to &quot;fs.readFile()&quot;">​</a></h3><p><a href="https://nodejs.cn/api/fs.html#fsreadfilepath-options-callback" target="_blank" rel="noreferrer">API</a></p><p>语法：<code>fs.readFile(path[, options], callback)</code></p><p>异步地读取文件的全部内容。如果未指定编码，则返回原始缓冲区</p><p><code>fs.readFile()</code> 函数缓冲整个文件。 为了最小化内存成本，在可能的情况下优先通过 <code>fs.createReadStream()</code> 进行流式传输</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> fs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">fs</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#50FA7B;">readFile</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./1.txt</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">data</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (err) </span><span style="color:#FF79C6;">throw</span><span style="color:#F8F8F2;"> err;</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(data);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><h3 id="fs-readfilesync" tabindex="-1">fs.readFileSync() <a class="header-anchor" href="#fs-readfilesync" aria-label="Permalink to &quot;fs.readFileSync()&quot;">​</a></h3><p>语法：<code>fs.readFileSync(path[, options])</code></p><p>同步地读取文件的全部内容，返回 string 或 buffer</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> data </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> fs.</span><span style="color:#50FA7B;">readFileSync</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./1.txt</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, { encoding</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">utf-8</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(data);</span></span>
<span class="line"></span></code></pre></div><h3 id="fs-createreadstream" tabindex="-1">fs.createReadStream() <a class="header-anchor" href="#fs-createreadstream" aria-label="Permalink to &quot;fs.createReadStream()&quot;">​</a></h3><p>流式读取文件</p><p>如果是文本类文件可以使用 <code>toString()</code>查看内容，视频不能使用否则会乱码</p><p>打印读取的文件长度，会打印出多个<strong>65536</strong>，这个数字表示字节，也就是 64kb</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> rs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> fs.</span><span style="color:#50FA7B;">createReadStream</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./index.mp4</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">rs.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">data</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">chunk</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#6272A4;">// console.log(chunk.toString());</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(chunk.length);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#6272A4;">// 可选</span></span>
<span class="line"><span style="color:#F8F8F2;">rs.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">end</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">读取完成</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><h3 id="参数解析" tabindex="-1">参数解析 <a class="header-anchor" href="#参数解析" aria-label="Permalink to &quot;参数解析&quot;">​</a></h3><h4 id="path" tabindex="-1">path <a class="header-anchor" href="#path" aria-label="Permalink to &quot;path&quot;">​</a></h4><p>path 的类型可以是 string、Buffer、URL、integer</p><p>1、文件的相对路径或者绝对路径对应的就是 string 类型</p><p>2、Buffer 类型</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> fileBuffer </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Buffer.</span><span style="color:#50FA7B;">from</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./1.txt</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">utf-8</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#50FA7B;">readFile</span><span style="color:#F8F8F2;">(fileBuffer, { encoding</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">utf-8</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> }, (</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">data</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (err) </span><span style="color:#FF79C6;">throw</span><span style="color:#F8F8F2;"> err;</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(data);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><p>3、URL 类型，将想要访问的文件地址转换成 URL 对象，仅支持使用 file 协议</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> fileURL </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">URL</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">file:///Users/zgh/code/blog/1.txt</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#50FA7B;">readFile</span><span style="color:#F8F8F2;">(fileURL, { encoding</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">utf-8</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> }, (</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">data</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (err) </span><span style="color:#FF79C6;">throw</span><span style="color:#F8F8F2;"> err;</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(data);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><p>4、integer 指的是<strong>文件描述符</strong>，文件描述符指的是每个打开的文件都分配了一个数字标识符，在 fs 中可以根据文件描述符 fd 来操作文件</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#50FA7B;">open</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./1.txt</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">r</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">fd</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (err) </span><span style="color:#FF79C6;">throw</span><span style="color:#F8F8F2;"> err;</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(fd);</span></span>
<span class="line"><span style="color:#F8F8F2;">  fs.</span><span style="color:#50FA7B;">readFile</span><span style="color:#F8F8F2;">(fd, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">utf8</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">data</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (e) </span><span style="color:#FF79C6;">throw</span><span style="color:#F8F8F2;"> e;</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(data);</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><h4 id="options" tabindex="-1">options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;options&quot;">​</a></h4><p>options 有两个参数：<code>encoding</code> 和 <code>flag</code>。 encoding 代表读取文件的编码格式，如果没有指定 encoding，则返回原始的 Buffer，它的值主要有：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#8BE9FD;">type</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">BufferEncoding</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">ascii</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">|</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">utf8</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">|</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">utf-8</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">|</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">utf16le</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">|</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">ucs2</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">|</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">ucs-2</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">|</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">base64</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">|</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">latin1</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">|</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">binary</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">|</span><span style="color:#E9F284;"> &quot;</span><span style="color:#F1FA8C;">hex</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span></code></pre></div><p>文件系统标志 flag 常用的值主要有：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">:  打开文件用于追加。 如果文件不存在，则创建该文件。</span></span>
<span class="line"><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">ax</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">:  类似于 </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">，但如果路径存在，则失败。</span></span>
<span class="line"><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">as</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">:  打开文件用于追加（在同步模式中）。 如果文件不存在，则创建该文件。</span></span>
<span class="line"><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">as+</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">:  打开文件用于读取和追加（在同步模式中）。 如果文件不存在，则创建该文件。</span></span>
<span class="line"><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">r</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">:  打开文件用于读取。 如果文件不存在，则会发生异常。</span></span>
<span class="line"><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">r+</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">:  打开文件用于读取和写入。 如果文件不存在，则会发生异常。</span></span>
<span class="line"><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">rs+</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">:  打开文件用于读取和写入（在同步模式中）。 指示操作系统绕过本地的文件系统缓存。</span></span>
<span class="line"><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">w</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">:  打开文件用于写入。 如果文件不存在则创建文件，如果文件存在则截断文件。</span></span>
<span class="line"><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">wx</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">:  类似于 </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">w</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">，但如果路径存在，则失败。</span></span>
<span class="line"><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">w+</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">:  打开文件用于读取和写入。 如果文件不存在则创建文件，如果文件存在则截断文件。</span></span>
<span class="line"><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">wx+</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">:  类似于 </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">w+</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">，但如果路径存在，则失败。</span></span>
<span class="line"></span></code></pre></div><h4 id="callback" tabindex="-1">callback <a class="header-anchor" href="#callback" aria-label="Permalink to &quot;callback&quot;">​</a></h4><p>callback 指的是读取文件完成以后的回调函数，参数有两个：error、data。error 表示错误信息，data 根据 encoding 而定，默认为 Buffer</p><h3 id="读取方式的区别" tabindex="-1">读取方式的区别 <a class="header-anchor" href="#读取方式的区别" aria-label="Permalink to &quot;读取方式的区别&quot;">​</a></h3><p>readFile、read、createReadStream</p><h3 id="读取文件的场景" tabindex="-1">读取文件的场景 <a class="header-anchor" href="#读取文件的场景" aria-label="Permalink to &quot;读取文件的场景&quot;">​</a></h3><ul><li>电脑开机</li><li>程序运行</li><li>编辑器打开文件</li><li>查看图片、视频、音乐</li><li>上传文件</li><li>git 查看日志</li></ul><h2 id="文件写入" tabindex="-1">文件写入 <a class="header-anchor" href="#文件写入" aria-label="Permalink to &quot;文件写入&quot;">​</a></h2><h3 id="fs-writefile" tabindex="-1">fs.writeFile() <a class="header-anchor" href="#fs-writefile" aria-label="Permalink to &quot;fs.writeFile()&quot;">​</a></h3><p><a href="https://nodejs.cn/api/fs.html#fswritefilefile-data-options-callback" target="_blank" rel="noreferrer">API</a></p><p>语法：<code>fs.writeFile(file, data[, options], callback)</code></p><p><strong>异步</strong>地将数据写入文件。</p><ul><li>当 file 参数是文件名时，如果文件已经存在，则覆盖该文件，如果文件不存在，则创建文件</li><li>当 file 参数是文件描述符时，文件不会被替换</li></ul><h3 id="fs-writefilesync" tabindex="-1">fs.writeFileSync() <a class="header-anchor" href="#fs-writefilesync" aria-label="Permalink to &quot;fs.writeFileSync()&quot;">​</a></h3><p><a href="https://nodejs.cn/api/fs.html#fswritefilesyncfile-data-options" target="_blank" rel="noreferrer">API</a></p><p>语法：<code>fs.writeFileSync(file, data[, options])</code></p><p><strong>同步</strong>写入文件，返回 <code>undefined</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> fs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">fs</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#50FA7B;">writeFile</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./1.txt</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">异步写入</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (err) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">写入失败</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">throw</span><span style="color:#F8F8F2;"> err;</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">写入成功</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#50FA7B;">writeFileSync</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./1.txt</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">同步写入</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="fs-appendfile" tabindex="-1">fs.appendFile() <a class="header-anchor" href="#fs-appendfile" aria-label="Permalink to &quot;fs.appendFile()&quot;">​</a></h3><p><a href="https://nodejs.cn/api/fs.html#fsappendfilepath-data-options-callback" target="_blank" rel="noreferrer">API</a></p><p>语法：<code>fs.appendFile(path, data[, options], callback)</code></p><p>异步地将数据追加到文件的尾部，如果该文件尚不存在，则创建该文件</p><h3 id="fs-appendfilesync" tabindex="-1">fs.appendFileSync() <a class="header-anchor" href="#fs-appendfilesync" aria-label="Permalink to &quot;fs.appendFileSync()&quot;">​</a></h3><p><a href="https://nodejs.cn/api/fs.html#fsappendfilesyncpath-data-options" target="_blank" rel="noreferrer">API</a></p><p>语法：<code>fs.appendFileSync(path, data[, options])</code></p><p><strong>同步</strong>地将数据追加到文件中，如果文件尚不存在则创建该文件</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#50FA7B;">appendFile</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./1.txt</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;">\\n</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (err) </span><span style="color:#FF79C6;">throw</span><span style="color:#F8F8F2;"> err;</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">追加成功</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#50FA7B;">appendFileSync</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./1.txt</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#FF79C6;">\\n</span><span style="color:#F1FA8C;">world</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="fs-createwritestream" tabindex="-1">fs.createWriteStream() <a class="header-anchor" href="#fs-createwritestream" aria-label="Permalink to &quot;fs.createWriteStream()&quot;">​</a></h3><p>语法：<code>fs.createWriteStream(path[, options])</code> 流式写入文件</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> ws </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> fs.</span><span style="color:#50FA7B;">createWriteStream</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./1.txt</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">ws.</span><span style="color:#50FA7B;">write</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">ws.</span><span style="color:#50FA7B;">write</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">world</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">ws.</span><span style="color:#50FA7B;">close</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span></code></pre></div><h3 id="写入方式的区别" tabindex="-1">写入方式的区别 <a class="header-anchor" href="#写入方式的区别" aria-label="Permalink to &quot;写入方式的区别&quot;">​</a></h3><p>writeFile、write、createWriteStream</p><p>createWriteStream 适合大文件写入或者频繁写入的场景，writeFile 适合写入频率较低的场景</p><h3 id="写入文件的场景" tabindex="-1">写入文件的场景 <a class="header-anchor" href="#写入文件的场景" aria-label="Permalink to &quot;写入文件的场景&quot;">​</a></h3><p>当需要持久化保存数据的时候，需要文件写入</p><ul><li>下载文件</li><li>安装软件</li><li>保存程序日志</li><li>编辑器保存文件</li><li>视频录制</li></ul><h2 id="删除文件" tabindex="-1">删除文件 <a class="header-anchor" href="#删除文件" aria-label="Permalink to &quot;删除文件&quot;">​</a></h2><h3 id="fs-unlink" tabindex="-1">fs.unlink() <a class="header-anchor" href="#fs-unlink" aria-label="Permalink to &quot;fs.unlink()&quot;">​</a></h3><p>语法：<code>fs.unlink(path, callback)</code></p><p>异步地删除文件或符号链接。不适用目录，删除目录要使用<code>fs.rmdir()</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">fs.</span><span style="color:#50FA7B;">unlink</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./1.txt</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (err) </span><span style="color:#FF79C6;">throw</span><span style="color:#F8F8F2;"> err;</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">删除成功</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><h3 id="fs-unlinksync" tabindex="-1">fs.unlinkSync() <a class="header-anchor" href="#fs-unlinksync" aria-label="Permalink to &quot;fs.unlinkSync()&quot;">​</a></h3><p>语法：<code>fs.unlinkSync(path)</code> 同步删除文件</p><h2 id="打开文件" tabindex="-1">打开文件 <a class="header-anchor" href="#打开文件" aria-label="Permalink to &quot;打开文件&quot;">​</a></h2><h3 id="fs-open" tabindex="-1">fs.open() <a class="header-anchor" href="#fs-open" aria-label="Permalink to &quot;fs.open()&quot;">​</a></h3><p><a href="https://nodejs.cn/api/fs.html#fsopenpath-flags-mode-callback" target="_blank" rel="noreferrer">API</a></p><p>语法：<code>fs.open(path[, flags[, mode]], callback)</code></p><p>异步地打开文件，返回的数据为文件描述符</p><h3 id="fs-opendir" tabindex="-1">fs.opendir() <a class="header-anchor" href="#fs-opendir" aria-label="Permalink to &quot;fs.opendir()&quot;">​</a></h3><p>语法：<code>fs.opendir(path[, options], callback)</code></p><p>打开目录</p><h2 id="复制文件夹" tabindex="-1">复制文件夹 <a class="header-anchor" href="#复制文件夹" aria-label="Permalink to &quot;复制文件夹&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> path </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">path</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> fs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">fs</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">copyFile</span><span style="color:#F8F8F2;">({ </span><span style="color:#FFB86C;font-style:italic;">src</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">dest</span><span style="color:#F8F8F2;"> }) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  fs.</span><span style="color:#50FA7B;">readdir</span><span style="color:#F8F8F2;">(path.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(src), (</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">files</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (err) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">获取文件夹失败</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">throw</span><span style="color:#F8F8F2;"> err;</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      files.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> oldFile </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> path.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(src, item);</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> newFile </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> path.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(dest, item);</span></span>
<span class="line"><span style="color:#F8F8F2;">        fs.</span><span style="color:#50FA7B;">copyFile</span><span style="color:#F8F8F2;">(oldFile, newFile, (</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (err) </span><span style="color:#FF79C6;">throw</span><span style="color:#F8F8F2;"> err;</span></span>
<span class="line"><span style="color:#F8F8F2;">          console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(oldFile </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">复制到</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> newFile);</span></span>
<span class="line"><span style="color:#F8F8F2;">        });</span></span>
<span class="line"><span style="color:#F8F8F2;">      });</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> params </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  src</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./src/beijing</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#6272A4;">// 要复制的源文件名</span></span>
<span class="line"><span style="color:#F8F8F2;">  dest</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./src/shanghai</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#6272A4;">// 复制操作的目标文件名</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#50FA7B;">copyFile</span><span style="color:#F8F8F2;">(params);</span></span>
<span class="line"></span></code></pre></div><h2 id="更改文件名称" tabindex="-1">更改文件名称 <a class="header-anchor" href="#更改文件名称" aria-label="Permalink to &quot;更改文件名称&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> path </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">path</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> fs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">fs</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">rename</span><span style="color:#F8F8F2;">({ </span><span style="color:#FFB86C;font-style:italic;">dest</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">from</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">to</span><span style="color:#F8F8F2;"> }) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  fs.</span><span style="color:#50FA7B;">readdir</span><span style="color:#F8F8F2;">(path.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(dest), (</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">files</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (err) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">获取文件夹失败</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">throw</span><span style="color:#F8F8F2;"> err;</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      files.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> oldName </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> path.</span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(dest, item);</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> newName </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> oldName.</span><span style="color:#50FA7B;">replace</span><span style="color:#F8F8F2;">(from, to);</span></span>
<span class="line"><span style="color:#F8F8F2;">        fs.</span><span style="color:#50FA7B;">rename</span><span style="color:#F8F8F2;">(oldName, newName, (</span><span style="color:#FFB86C;font-style:italic;">renameErr</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (renameErr) </span><span style="color:#FF79C6;">throw</span><span style="color:#F8F8F2;"> renameErr;</span></span>
<span class="line"><span style="color:#F8F8F2;">          console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(oldName </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">文件名称改为:</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> newName);</span></span>
<span class="line"><span style="color:#F8F8F2;">        });</span></span>
<span class="line"><span style="color:#F8F8F2;">      });</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> params </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  dest</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./src/shanghai</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#6272A4;">// 要更改的文件夹</span></span>
<span class="line"><span style="color:#F8F8F2;">  from</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">jhyj_dc</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#6272A4;">// 要更改的源文件名</span></span>
<span class="line"><span style="color:#F8F8F2;">  to</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">jhyj_sh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#6272A4;">// 要更改的目标文件名</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#50FA7B;">rename</span><span style="color:#F8F8F2;">(params);</span></span>
<span class="line"></span></code></pre></div><h2 id="中文乱码" tabindex="-1">中文乱码 <a class="header-anchor" href="#中文乱码" aria-label="Permalink to &quot;中文乱码&quot;">​</a></h2><p>如果在读取某些 csv 格式的文件时出现中文乱码，可能是使用了 GBK 编码，可以使用 <a href="https://www.npmjs.com/package/iconv-lite" target="_blank" rel="noreferrer">iconv-lite</a></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> stream </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> fs.</span><span style="color:#50FA7B;">createReadStream</span><span style="color:#F8F8F2;">(filePath, { encoding</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">binary</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> data </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">stream.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">error</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">error</span><span style="color:#F8F8F2;">(err);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F8F8F2;">stream.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">data</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">chunk</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  data </span><span style="color:#FF79C6;">+=</span><span style="color:#F8F8F2;"> chunk;</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F8F8F2;">stream.</span><span style="color:#50FA7B;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">end</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> buf </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Buffer.</span><span style="color:#50FA7B;">from</span><span style="color:#F8F8F2;">(data, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">binary</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> str </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> iconv.</span><span style="color:#50FA7B;">decode</span><span style="color:#F8F8F2;">(buf, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">GBK</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div>`,91),F=[o];function e(t,c,r,y,i,d){return n(),a("div",null,F)}const h=s(p,[["render",e]]);export{C as __pageData,h as default};
