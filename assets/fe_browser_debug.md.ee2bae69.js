import{_ as e,c as a,o as t,Q as o}from"./chunks/framework.f14b72c3.js";const b=JSON.parse('{"title":"调试","description":"","frontmatter":{},"headers":[],"relativePath":"fe/browser/debug.md","lastUpdated":1698246525000}'),r={name:"fe/browser/debug.md"},n=o('<h1 id="调试" tabindex="-1">调试 <a class="header-anchor" href="#调试" aria-label="Permalink to &quot;调试&quot;">​</a></h1><h2 id="浏览器调试" tabindex="-1">浏览器调试 <a class="header-anchor" href="#浏览器调试" aria-label="Permalink to &quot;浏览器调试&quot;">​</a></h2><h3 id="恢复执行和单步执行的区别" tabindex="-1">恢复执行和单步执行的区别？ <a class="header-anchor" href="#恢复执行和单步执行的区别" aria-label="Permalink to &quot;恢复执行和单步执行的区别？&quot;">​</a></h3><p>恢复执行是让程序继续执行，而单步执行则是让程序逐行执行</p><p>恢复执行（Resume）是指在调试器暂停执行后，通过点击恢复执行按钮，让代码继续执行到<strong>下一个断点或程序结束处</strong>。这相当于取消断点并让程序继续执行，直到下一个断点或程序结束。</p><p>单步执行（Step Over、Step Into、Step Out）则是在调试器暂停执行后，以不同的方式<strong>逐行执行</strong>代码</p><p>单步执行的三种方式：</p><ul><li>Step Over（跨过）：执行当前行代码并停止在下一行。如果当前行代码是一个函数调用，那么会将整个函数执行完并停在函数返回后的下一行</li><li>Step Into（进入）：如果当前行代码是一个函数调用，那么进入这个函数并停在函数的第一行，否则就和 Step Over 相同</li><li>Step Out（跳出）：在当前函数内部执行，执行完当前函数并返回到函数调用的下一行</li></ul><h2 id="node-调试" tabindex="-1">Node 调试 <a class="header-anchor" href="#node-调试" aria-label="Permalink to &quot;Node 调试&quot;">​</a></h2><h2 id="vscode-调试" tabindex="-1">VsCode 调试 <a class="header-anchor" href="#vscode-调试" aria-label="Permalink to &quot;VsCode 调试&quot;">​</a></h2><p>点击 Debug 窗口的 <code>create a launch.json file</code> 可以快速创建调试的配置文件</p><p>调试就是把浏览器跑起来，访问目标网页，这时候会有一个 ws 的调试服务，我们用 frontend 的 ws 客户端连接上这个 ws 服务，就可以进行调试了</p><p>创建 Chrome Debug 配置有两种方式：launch、attach</p><ul><li>launch：把 url 对应的网页跑起来，指定调试端口，然后 frontend 自动 attach 到这个端口</li><li>attach：如果已经有一个在调试模式跑的浏览器了，那直接连接上就行</li></ul>',14),l=[n];function s(d,i,c,h,p,u){return t(),a("div",null,l)}const f=e(r,[["render",s]]);export{b as __pageData,f as default};
