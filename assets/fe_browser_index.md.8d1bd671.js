import{_ as a,c as e,o as r,Q as l}from"./chunks/framework.f14b72c3.js";const u=JSON.parse('{"title":"浏览器","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"fe/browser/index.md","lastUpdated":1698246525000}'),t={name:"fe/browser/index.md"},i=l('<h1 id="浏览器" tabindex="-1">浏览器 <a class="header-anchor" href="#浏览器" aria-label="Permalink to &quot;浏览器&quot;">​</a></h1><h2 id="常见屏幕分辨率" tabindex="-1">常见屏幕分辨率 <a class="header-anchor" href="#常见屏幕分辨率" aria-label="Permalink to &quot;常见屏幕分辨率&quot;">​</a></h2><ul><li>1024 x 600（常见 8.9 寸电脑使用）</li><li>1024 x 768（常用 10.4、12.1、14.1、15 寸电脑使用）4:3</li><li>1280 x 1024（常用 14.1、15 寸电脑使用）5:4</li><li>1600 x 900 16:9 (非主流)</li><li>1440 x 1050（常用 15、16.1 寸电脑使用）4:3</li><li>1600 x 1200（常用 15、16.1 寸电脑使用）4:3</li><li>1280 x 800（常见 10.8、12.1、15.4 寸电脑使用）16:10</li><li>1366 x 768（常见 15.2 寸电脑使用）15:10 （主流）</li><li>1280 x 854（不常见）16:9</li><li>1440 x 900（仅苹果 17 寸电脑使用）16:10</li><li>1600 x 1024（不常见）14:9</li><li>1680 x 1050（常见 15.4、20 寸电脑使用）16:10</li><li>1920 x 1080 16:9 （主流）</li><li>1920 x 1200（常见 20 寸电脑使用）16:10</li></ul><h2 id="浏览器的工作原理" tabindex="-1">浏览器的工作原理 <a class="header-anchor" href="#浏览器的工作原理" aria-label="Permalink to &quot;浏览器的工作原理&quot;">​</a></h2><p><a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/" target="_blank" rel="noreferrer">https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/</a></p><h2 id="浏览器缓存机制" tabindex="-1">浏览器缓存机制 <a class="header-anchor" href="#浏览器缓存机制" aria-label="Permalink to &quot;浏览器缓存机制&quot;">​</a></h2><h2 id="浏览器中的-javascript-执行机制" tabindex="-1">浏览器中的 JavaScript 执行机制 <a class="header-anchor" href="#浏览器中的-javascript-执行机制" aria-label="Permalink to &quot;浏览器中的 JavaScript 执行机制&quot;">​</a></h2><h2 id="v8-工作原理" tabindex="-1">V8 工作原理 <a class="header-anchor" href="#v8-工作原理" aria-label="Permalink to &quot;V8 工作原理&quot;">​</a></h2><h2 id="页面渲染原理" tabindex="-1">页面渲染原理 <a class="header-anchor" href="#页面渲染原理" aria-label="Permalink to &quot;页面渲染原理&quot;">​</a></h2><h2 id="pwa" tabindex="-1">PWA <a class="header-anchor" href="#pwa" aria-label="Permalink to &quot;PWA&quot;">​</a></h2><p>渐进式网页应用</p><h2 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h2><ul><li><p>减少 http 请求次数：CSS Sprites, JS、CSS 源码压缩、图片大小控制合适；网页 Gzip，CDN 托管，data 缓存 ，图片服务器。</p></li><li><p>前端模板 JS+数据，减少由于 HTML 标签导致的带宽浪费，前端用变量保存 AJAX 请求结果，每次操作本地变量，不用请求，减少请求次数</p></li><li><p>用 innerHTML 代替 DOM 操作，减少 DOM 操作次数，优化 javascript 性能。</p></li><li><p>当需要设置的样式很多时设置 className 而不是直接操作 style。</p></li><li><p>少用全局变量、缓存 DOM 节点查找的结果。减少 IO 读取操作。</p></li><li><p>避免使用 CSS Expression（css 表达式)又称 Dynamic properties(动态属性)。</p></li><li><p>图片预加载，将样式表放在顶部，将脚本放在底部 加上时间戳。</p></li><li><p>避免在页面的主体布局中使用 table，table 要等其中的内容完全下载之后才会显示出来，显示比 div+css 布局慢。</p></li></ul><p>对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘 IO。向前端优化指的是，在不影响功能和体验的情况下，能在浏览器执行的不要在服务端执行，能在缓存服务器上直接返回的不要到应用服务器，程序能直接取得的结果不要到外部取得，本机内能取得的数据不要到远程取，内存能取到的不要到磁盘取，缓存中有的不要去数据库查询。减少数据库操作指减少更新次数、缓存结果减少查询次数、将数据库执行的操作尽可能的让你的程序完成（例如 join 查询），减少磁盘 IO 指尽量不使用文件系统作为缓存、减少读写文件次数等。</p><h3 id="预加载、懒加载" tabindex="-1">预加载、懒加载 <a class="header-anchor" href="#预加载、懒加载" aria-label="Permalink to &quot;预加载、懒加载&quot;">​</a></h3><h2 id="chrome-历史版本下载" tabindex="-1">Chrome 历史版本下载 <a class="header-anchor" href="#chrome-历史版本下载" aria-label="Permalink to &quot;Chrome 历史版本下载&quot;">​</a></h2><p><a href="https://www.chromedownloads.net/chrome64osx" target="_blank" rel="noreferrer">https://www.chromedownloads.net/chrome64osx</a></p><p>chrome 80 版本下载地址：<a href="https://www.chromedownloads.net/chrome64osx-stable/989.html" target="_blank" rel="noreferrer">https://www.chromedownloads.net/chrome64osx-stable/989.html</a>，使用的时候关掉新版浏览器</p>',18),o=[i];function h(s,n,c,d,p,m){return r(),e("div",null,o)}const b=a(t,[["render",h]]);export{u as __pageData,b as default};
