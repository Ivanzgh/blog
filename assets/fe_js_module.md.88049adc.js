import{_ as s,c as a,o as n,Q as l}from"./chunks/framework.f14b72c3.js";const C=JSON.parse('{"title":"模块化规范","description":"","frontmatter":{},"headers":[],"relativePath":"fe/js/module.md","lastUpdated":1698246525000}'),p={name:"fe/js/module.md"},o=l(`<h1 id="模块化规范" tabindex="-1">模块化规范 <a class="header-anchor" href="#模块化规范" aria-label="Permalink to &quot;模块化规范&quot;">​</a></h1><h2 id="模块化简介" tabindex="-1">模块化简介 <a class="header-anchor" href="#模块化简介" aria-label="Permalink to &quot;模块化简介&quot;">​</a></h2><h3 id="什么是模块化" tabindex="-1">什么是模块化？ <a class="header-anchor" href="#什么是模块化" aria-label="Permalink to &quot;什么是模块化？&quot;">​</a></h3><p>将一个复杂的程序依据一定的规范封装成几个模块，并组合在一起。</p><p>模块的内部数据、方法是私有的，只是向外部暴露一些接口方法与外部模块通信</p><h3 id="为什么要有模块化" tabindex="-1">为什么要有模块化？ <a class="header-anchor" href="#为什么要有模块化" aria-label="Permalink to &quot;为什么要有模块化？&quot;">​</a></h3><ul><li>数据、方法都是私有的，避免命名冲突，减少命名空间污染</li><li>降低耦合性，模块拆分，按需加载</li><li>高复用性，独立的功能模块便于多处复用</li><li>高可维护性，维护单独的小模块更方便，如果维护一个有很多功能放在一起的大文件会很困难</li></ul><h3 id="为什么要引入模块化规范" tabindex="-1">为什么要引入模块化规范？ <a class="header-anchor" href="#为什么要引入模块化规范" aria-label="Permalink to &quot;为什么要引入模块化规范？&quot;">​</a></h3><p>如果引入模块化，可能就是在一个文件中引入多个 js 文件，如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">body</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">src</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">a.js</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">src</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">b.js</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">src</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">c.js</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">src</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">util/index.js</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">body</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>这样做会带来很多问题：</p><ul><li>请求过多：引入 n 个 js 文件，就有 n 次 http 请求</li><li>依赖模糊：不同的 js 文件可能会相互依赖，如果改一个文件，其他文件可能会报错</li></ul><p>最终可能难以维护，所以引入了模块化<strong>规范</strong></p><h2 id="commonjs-规范" tabindex="-1">CommonJS 规范 <a class="header-anchor" href="#commonjs-规范" aria-label="Permalink to &quot;CommonJS 规范&quot;">​</a></h2><p>CommonJS 规范是一套约定标准，主要内容是模块通过 <code>module.exports</code> 导出对外的变量或接口，通过 <code>require()</code> 来导入其他模块的输出到当前模块作用域中</p><p><code>Node.js</code>遵循的就是<code>CommonJS</code>规范</p><ul><li>每个文件就是一个模块，有自己的作用域</li><li>在一个文件里面定义的变量、函数、类，都是私有的，对其他文件不可见</li><li>可以从 <code>node_modules</code> 中引入一个库或者从本地目录引入一个文件</li></ul><p>Node.js 从<code>v13.2.0</code>之后也引入了规范的<code>ES Modules</code>机制，同时兼容早期的<code>CommonJS</code></p><ul><li>所有代码都运行在模块作用域，不会污染全局作用域</li><li>模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了</li><li><strong>同步加载</strong></li></ul><h3 id="模块的导入导出" tabindex="-1">模块的导入导出 <a class="header-anchor" href="#模块的导入导出" aria-label="Permalink to &quot;模块的导入导出&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> axios </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">axios</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">getData</span><span style="color:#F8F8F2;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">postData</span><span style="color:#F8F8F2;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 方式一、exports</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">exports</span><span style="color:#F8F8F2;">.getData </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> getData;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 方式二、module.exports</span></span>
<span class="line"><span style="color:#6272A4;">// 导出单个</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">exports</span><span style="color:#F8F8F2;">.getData </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> getData;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 导出所有</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { getData, postData };</span></span>
<span class="line"></span></code></pre></div><p>暴露的模块本质是 exports 对象</p><p>引入模块的方式：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> module1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">模块名</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="模块的初始化" tabindex="-1">模块的初始化 <a class="header-anchor" href="#模块的初始化" aria-label="Permalink to &quot;模块的初始化&quot;">​</a></h3><p>一个模块中的 JS 代码仅在模块第一次被使用时执行一次，并且在使用的过程中进行初始化，然后会被缓存起来，便于后续继续使用</p><p>示例：add.js</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">a;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">exports</span><span style="color:#F8F8F2;">.add </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> add;</span></span>
<span class="line"></span></code></pre></div><p>在 main.js 中引入 add.js 模块</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> addModule1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./add</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> addModule2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./add</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(addModule1.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(addModule2.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// 3</span></span>
<span class="line"></span></code></pre></div><p>在命令行执行 <code>node main.js</code> 运行程序，可以看出 add.js 这个模块虽然被引用了两次，但只初始化了一次</p><h2 id="amd-规范" tabindex="-1">AMD 规范 <a class="header-anchor" href="#amd-规范" aria-label="Permalink to &quot;AMD 规范&quot;">​</a></h2><p>AMD (Asynchronous Module Definition) 是 js 中一种模块定义的规范，可以在浏览器端<strong>异步加载</strong>模块</p><p>AMD 规范主要解决的问题是浏览器中模块化开发的时候，如何保证模块的依赖能够被正确地加载。在 AMD 规范中，<strong>模块是以函数的形式组织，并且需要通过 define 函数进行定义</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">define</span><span style="color:#F8F8F2;">(id</span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;">, dependencies</span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;">, factory);</span></span>
<span class="line"></span></code></pre></div><ul><li>id 是可选参数，表示模块标识符</li><li>dependencies 是可选参数，表示依赖的模块列表</li><li>factory 是一个函数，在模块加载完成后执行。这个函数返回模块的接口</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">define</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">moduleA</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">moduleB</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">moduleC</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">], </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">moduleB</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">moduleC</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#6272A4;">// ... do something ...</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><p>这里定义了一个名为 moduleA 的模块，它依赖于 moduleB 和 moduleC 两个模块。在 factory 函数中可以使用这些依赖模块，并返回该模块对外暴露的接口。</p><p>使用 require 函数来获取一个模块的接口：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">([dependencies], callback);</span></span>
<span class="line"></span></code></pre></div><ul><li>dependencies 需要加载的模块列表</li><li>callback 是一个函数，在所有依赖模块都被加载完成后执行。在该函数中，可以使用依赖模块的接口。</li></ul><p>例如加载上面定义的 moduleA 模块</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">([</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">moduleA</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">], </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">moduleA</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#6272A4;">// ... do something ...</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><p>通常情况下会使用 <a href="https://requirejs.org/" target="_blank" rel="noreferrer">RequireJS</a> 库来实现 AMD 规范的模块加载和管理。<a href="https://requirejs.org/docs/whyamd.html" target="_blank" rel="noreferrer">Why AMD</a></p><h2 id="cmd" tabindex="-1">CMD <a class="header-anchor" href="#cmd" aria-label="Permalink to &quot;CMD&quot;">​</a></h2><p>CMD（Common Module Definition） 规范和 AMD 很相似，尽量保持简单，并与 CommonJS 规范保持了很大的兼容性。优点是依赖就近，延迟执行，容易在 Node.js 中运行。缺点是依赖 SPM 打包，模块的加载逻辑偏重。代表实现有 Sea.js</p><p>依赖就近：执行到这一部分的时候，再去加载对应的文件</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">define</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">require</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">exports</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">module</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> dep1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">dep1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> dep2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">dep2</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#8BE9FD;font-style:italic;">exports</span><span style="color:#F8F8F2;">.doSomething </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#8BE9FD;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><h2 id="umd" tabindex="-1">UMD <a class="header-anchor" href="#umd" aria-label="Permalink to &quot;UMD&quot;">​</a></h2><p>UMD（Universal Module Definition）规范类似于兼容 CommonJS 和 AMD 的语法糖，是模块定义的跨平台解决方案</p><h2 id="esm" tabindex="-1">ESM <a class="header-anchor" href="#esm" aria-label="Permalink to &quot;ESM&quot;">​</a></h2><p>ESM 表示 ES6 的模块规范，支持异步特性，是最常用的一种规范</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// a.js</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">a</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">are you ok</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#F8F8F2;"> { a, b };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 导入</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> { a, b } </span><span style="color:#FF79C6;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a.js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span></code></pre></div><p><code>export default</code>默认导出，一个模块内只能有一个，在 <code>import</code> 时可以用任意名字引入</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// default.js</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">a</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">default</span><span style="color:#F8F8F2;"> a;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 其他文件导入，可以任意命名，如jj</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> jj </span><span style="color:#FF79C6;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">default.js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span></code></pre></div><p>还可直接在定义变量时就导出</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">100</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">b</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"></span></code></pre></div><p>如果想在导入导出时重新命名</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// 导出时将a重新命名为test</span></span>
<span class="line"><span style="color:#FF79C6;">export</span><span style="color:#F8F8F2;"> { a </span><span style="color:#FF79C6;">as</span><span style="color:#F8F8F2;"> test, b };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 导入时将b重新命名为mm</span></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> { a, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">as</span><span style="color:#F8F8F2;"> mm } </span><span style="color:#FF79C6;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a.js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span></code></pre></div><p>在导入时还可以将导出的变量声明成一个任意名字的对象的属性</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">as</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a.js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(obj.a);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(obj.b);</span></span>
<span class="line"></span></code></pre></div>`,61),e=[o];function F(t,c,r,y,i,d){return n(),a("div",null,e)}const h=s(p,[["render",F]]);export{C as __pageData,h as default};
