import{_ as s,c as a,o as n,Q as l}from"./chunks/framework.f14b72c3.js";const C=JSON.parse('{"title":"Babel","description":"","frontmatter":{},"headers":[],"relativePath":"automate/babel.md","lastUpdated":1688050449000}'),p={name:"automate/babel.md"},o=l(`<h1 id="babel" tabindex="-1">Babel <a class="header-anchor" href="#babel" aria-label="Permalink to &quot;Babel&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p><a href="https://babeljs.io/" target="_blank" rel="noreferrer">官网</a></p><p>babel 是 javaScript 转译器。</p><h3 id="用途" tabindex="-1">用途 <a class="header-anchor" href="#用途" aria-label="Permalink to &quot;用途&quot;">​</a></h3><ul><li>转译 esnext、typescript、flow 等到目标环境支持的 js</li><li>代码的静态分析</li><li>特定用途的代码转换</li></ul><h3 id="编译器和转译器" tabindex="-1">编译器和转译器 <a class="header-anchor" href="#编译器和转译器" aria-label="Permalink to &quot;编译器和转译器&quot;">​</a></h3><ul><li>编译器 <ul><li>从一种编程语言转成另一个编程语言，主要指高级语言到低级语言</li><li>高级语言：javaScript、c++、java 等</li><li>低级语言：汇编语言、机器语言</li></ul></li><li>转译器 <ul><li>从高级语言到高级语言的转换工具</li></ul></li></ul><h2 id="前期准备" tabindex="-1">前期准备 <a class="header-anchor" href="#前期准备" aria-label="Permalink to &quot;前期准备&quot;">​</a></h2><h3 id="安装依赖" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖" aria-label="Permalink to &quot;安装依赖&quot;">​</a></h3><p><code>@babel/core</code>，核心模块</p><p><code>@babel/cli</code>，终端运行工具</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;"># 安装</span></span>
<span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">i</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">-D</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">@babel/cli</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">@babel/core</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 查看cli工具接受的选项</span></span>
<span class="line"><span style="color:#F8F8F2;">npx </span><span style="color:#F1FA8C;">babel</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">--help</span></span>
<span class="line"></span></code></pre></div><h3 id="项目准备" tabindex="-1">项目准备 <a class="header-anchor" href="#项目准备" aria-label="Permalink to &quot;项目准备&quot;">​</a></h3><p>先准备一个空项目</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">mkdir </span><span style="color:#F1FA8C;">babel-</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;"> &amp;&amp; </span><span style="color:#8BE9FD;">cd</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">babel-</span><span style="color:#BD93F9;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">init</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">-y</span></span>
<span class="line"><span style="color:#F8F8F2;">mkdir </span><span style="color:#F1FA8C;">src</span><span style="color:#F8F8F2;"> &amp;&amp; </span><span style="color:#8BE9FD;">cd</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">src</span></span>
<span class="line"><span style="color:#F8F8F2;">touch </span><span style="color:#F1FA8C;">index.js</span></span>
<span class="line"></span></code></pre></div><p>在 <code>src/index.js</code> 写入简单代码:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">fn</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span></code></pre></div><p>解析 src 目录下的所有 js 文件，并将其转换后的文件都输出到 lib 目录下</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">npx </span><span style="color:#F1FA8C;">babel</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">src</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">-d</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">lib</span></span>
<span class="line"></span></code></pre></div><p>也可以在 <code>package.json</code> 中配置脚本命令，之后运行<code>npm run build</code></p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">scripts</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">build</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">babel src -d lib</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="plugins" tabindex="-1">Plugins <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;Plugins&quot;">​</a></h2><p>plugins 本质就是 js 程序，让 Babel 如何对代码进行转换</p><p>在<code>src/index.js</code>中使用了箭头函数，需要将其转为 ES5 代码</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;"># 安装插件</span></span>
<span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">i</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">-D</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">@babel/plugin-transform-arrow-functions</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 执行</span></span>
<span class="line"><span style="color:#F8F8F2;">npx </span><span style="color:#F1FA8C;">babel</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">src</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">-d</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">lib</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">--plugins=@babel/plugin-transform-arrow-functions</span></span>
<span class="line"></span></code></pre></div><p>然后在<code>lib/index.js</code>里可以看到将代码转为了以下所示</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">fn</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span></code></pre></div><h2 id="presets" tabindex="-1">Presets <a class="header-anchor" href="#presets" aria-label="Permalink to &quot;Presets&quot;">​</a></h2><p>Presets 是一组 Plugins 的集合，代替预先设定的一组插件，避免逐一添加所需的插件</p><p>例如，env 这个 preset 包括支持 ES6+的所有插件</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">i</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">-D</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">@babel/preset-env</span></span>
<span class="line"></span></code></pre></div><p>继续在<code>src/index.js</code>中添加代码，使用 ES7 增加的求幂运算符</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">fn</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">**</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span></code></pre></div><p>执行这个 preset</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">npx </span><span style="color:#F1FA8C;">babel</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">src</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">-d</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">lib</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">--presets=@babel/preset-env</span></span>
<span class="line"></span></code></pre></div><p>然后打开<code>lib/index.js</code>看转换后的结果</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">use strict</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">fn</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">fn</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">pow</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="其他-presets" tabindex="-1">其他 presets <a class="header-anchor" href="#其他-presets" aria-label="Permalink to &quot;其他 presets&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">install</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">-D</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">@babel/preset-react</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">install</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">-D</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">@babel/preset-typescript</span></span>
<span class="line"></span></code></pre></div><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><p>在终端手动输入很长的命令不太方便，更偏向于使用配置文件。在项目的根目录创建一个<code>babel.config.json</code>文件，需要 Babel v7.8.0 或更高版本</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">presets</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">@babel/preset-env</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">targets</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">chrome</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">80</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">edge</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">17</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">firefox</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">60</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">safari</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">11.1</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    ]</span></span>
<span class="line"><span style="color:#F8F8F2;">  ]</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>如果使用的是 Babel 的旧版本，则创建一个<code>babel.config.js</code>的文件</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> presets </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">@babel/env</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">      targets</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { chrome</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">80</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, edge</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">17</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, firefox</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">60</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, safari</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">11.1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  ]</span></span>
<span class="line"><span style="color:#F8F8F2;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">module</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">exports</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { presets };</span></span>
<span class="line"></span></code></pre></div><p>执行前面定义的脚本命令：<code>npm run build</code></p><p>上方配置使用了 env 这个 preset，且只会为目标浏览器中没有的功能加载转换插件。</p><p>如配置了<code>chrome: &#39;80&#39;</code>表示转换完之后的代码支持到 chrome80 版本。执行脚本后发现<code>lib/index.js</code>里面到代码没有变化，这是因为 chrome80 版本已经支持了示例中的 ES6+ 代码（箭头函数、let、const、求幂运算），所以就没有必要将其转换了。如果更改为<code>chrome: &#39;30&#39;</code>会发现发生变化了，代码全部被转换为 ES5 代码</p><h2 id="polyfill" tabindex="-1">Polyfill <a class="header-anchor" href="#polyfill" aria-label="Permalink to &quot;Polyfill&quot;">​</a></h2><p>Polyfill 是对执行环境或者其他功能的补充</p><p>修改<code>src/index.js</code>，添加了 <code>Array.prototype.includes</code> 方法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">fn</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">**</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">].</span><span style="color:#50FA7B;">includes</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><p>在 chrome30 版本中是不支持 includes 方法的，而 Polyfill 的作用就是帮你引用一个可以使用的环境</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">npm i </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;">S core</span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;">js@</span><span style="color:#BD93F9;">3</span></span>
<span class="line"></span></code></pre></div><p>配置<code>babel.config.json</code>，在前面配置的 targets 后面添加<code>useBuiltIns: &#39;usage&#39;</code>。执行<code>npm run build</code>，转换后的代码如下，会发现在文件开头引入了一个文件，includes 方法能正常使用了</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">use strict</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">core-js/modules/es7.array.includes.js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">fn</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">fn</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Math.</span><span style="color:#50FA7B;">pow</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">].</span><span style="color:#50FA7B;">includes</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><p>执行脚本时在终端有一段警告</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">WARNING (@babel/preset-env): </span><span style="color:#F1FA8C;">We</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">noticed</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">you</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">re using the \`useBuiltIns\` option without declaring a core-js version. Currently, we assume version 2.x when no version is passed. Since this default version will likely change in future versions of Babel, we recommend explicitly setting the core-js version you are using via the \`corejs\` option.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F1FA8C;">You should also be sure that the version you pass to the \`corejs\` option matches the version specified in your \`package.json\`</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">s</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">\`dependencies\`</span><span style="color:#F8F8F2;"> section. </span><span style="color:#F1FA8C;">If</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">it</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">doesn</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">t, you need to run one of the following commands:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F1FA8C;">  npm install --save core-js@2    npm install --save core-js@3</span></span>
<span class="line"><span style="color:#F1FA8C;">  yarn add core-js@2              yarn add core-js@3</span></span>
<span class="line"></span></code></pre></div><p>这是因为还缺少 corejs 配置，<code>babel.config.json</code>完整配置如下：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">presets</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> [</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">@babel/preset-env</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">      {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">targets</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">chrome</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">30</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">edge</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">17</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">firefox</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">60</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">, </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">safari</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">11.1</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">useBuiltIns</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">usage</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#8BE9FE;">&quot;</span><span style="color:#8BE9FD;">corejs</span><span style="color:#8BE9FE;">&quot;</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">3.6.5</span><span style="color:#E9F284;">&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    ]</span></span>
<span class="line"><span style="color:#F8F8F2;">  ]</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>推荐使用 <code>core-js@3</code> + <code>@babel/preset-env</code>，然后设置<code>@babel/preset-env</code>的<code>corejs</code> 选项为 3</p><p><code>@babel/polyfill</code>也可以实现，但是在 Babel7.4.0 以上已经不被推荐使用</p><p>Q：既然 Plugins 能将新特性转换成目标浏览器支持的 js，那么为什么还需要 Polyfill 呢？ A：因为一些原型链上的实例方法（如 includes）是没法通过代码转过去用的，实例方法的内部实现很复杂。如果通过代码转换实现效果会很复杂，所以采用引入环境这样的方式来达到功能的补充</p><h2 id="编译流程" tabindex="-1">编译流程 <a class="header-anchor" href="#编译流程" aria-label="Permalink to &quot;编译流程&quot;">​</a></h2><h2 id="ast" tabindex="-1">AST <a class="header-anchor" href="#ast" aria-label="Permalink to &quot;AST&quot;">​</a></h2><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2>`,66),e=[o];function F(c,t,r,y,i,d){return n(),a("div",null,e)}const b=s(p,[["render",F]]);export{C as __pageData,b as default};
