import{_ as s,c as a,o as n,Q as l}from"./chunks/framework.f14b72c3.js";const u=JSON.parse('{"title":"Koa","description":"","frontmatter":{},"headers":[],"relativePath":"fe/node/koa.md","lastUpdated":1698246525000}'),o={name:"fe/node/koa.md"},p=l(`<h1 id="koa" tabindex="-1">Koa <a class="header-anchor" href="#koa" aria-label="Permalink to &quot;Koa&quot;">​</a></h1><p>官网：<a href="https://koajs.com" target="_blank" rel="noreferrer">https://koajs.com</a></p><p>github：<a href="https://github.com/koajs/koa" target="_blank" rel="noreferrer">https://github.com/koajs/koa</a></p><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。使用 koa 编写 web 应用，通过组合不同的 generator，可以免除重复繁琐的回调函数嵌套，并极大地提升错误处理的效率。koa 不在内核方法中绑定任何中间件，它仅仅提供了一个轻量优雅的函数库，使得编写 Web 应用变得得心应手。</p><h2 id="快速上手" tabindex="-1">快速上手 <a class="header-anchor" href="#快速上手" aria-label="Permalink to &quot;快速上手&quot;">​</a></h2><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">install</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">koa</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> Koa </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">koa</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> app </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Koa</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">use</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">async</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  ctx.body </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Hello World</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">listen</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">3000</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><h2 id="中间件" tabindex="-1">中间件 <a class="header-anchor" href="#中间件" aria-label="Permalink to &quot;中间件&quot;">​</a></h2><p>Koa 是一个中间件框架，可以采用两种不同的方法来实现中间件：</p><ul><li>async function</li><li>common function</li></ul><p>以下是使用两种不同方法实现一个日志中间件的示例</p><p>1、async functions (node v7.6+)</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">use</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">async</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> start </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Date.</span><span style="color:#50FA7B;">now</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> ms </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Date.</span><span style="color:#50FA7B;">now</span><span style="color:#F8F8F2;">() </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> start;</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">ctx.method</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;"> </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">ctx.url</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;"> - </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">ms</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">ms\`</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><p>2、Common function</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">use</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> start </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Date.</span><span style="color:#50FA7B;">now</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">().</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> ms </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Date.</span><span style="color:#50FA7B;">now</span><span style="color:#F8F8F2;">() </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> start;</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">ctx.method</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;"> </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">ctx.url</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;"> - </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">ms</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">ms\`</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><ul><li>中间件通常带有两个参数 (ctx, next), ctx 是一个请求的上下文（context）</li><li>next 是调用执行下游中间件的函数. 在代码执行完成后通过 then 方法返回一个 Promise</li></ul><h2 id="上下文、请求响应" tabindex="-1">上下文、请求响应 <a class="header-anchor" href="#上下文、请求响应" aria-label="Permalink to &quot;上下文、请求响应&quot;">​</a></h2><p>每个中间件都接收一个 Koa 的 Context 对象，该对象封装了一个传入的 http 消息，并对该消息进行了相应的响应。 ctx 通常用作上下文对象的参数名称。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">use</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">async</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><ul><li>Koa 提供了一个 Request 对象作为 Context 的 request 属性。 Request 对象提供了用于处理 http 请求的方法，该请求委托给 node http 模块的 <code>IncomingMessage</code></li><li>Koa 提供了一个 Response 对象作为 Context 的 response 属性。 Response 对象提供了用于处理 http 响应的方法，该响应委托给 <code>ServerResponse</code></li></ul><p>Koa 对 Node 的请求和响应对象进行委托而不是扩展它们。这种模式提供了更清晰的接口，并减少了不同中间件与 Node 本身之间的冲突，并为流处理提供了更好的支持。</p><ul><li><code>IncomingMessage</code> 可以作为 Context 上的 req 属性被直接访问</li><li><code>ServerResponse</code> 也可以作为 Context 上的 res 属性被直接访问</li></ul><p>示例 1：检查请求客户端 xml 支持</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">use</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">async</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  ctx.</span><span style="color:#50FA7B;">assert</span><span style="color:#F8F8F2;">(ctx.request.</span><span style="color:#50FA7B;">accepts</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">xml</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">), </span><span style="color:#BD93F9;">406</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#6272A4;">// 相当于:</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#6272A4;">// if (!ctx.request.accepts(&#39;xml&#39;)) ctx.throw(406);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><p>示例 2：使用 Koa 的 Response 对象将文件作为响应体流式传输</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">use</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">async</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">next</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">await</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  ctx.response.type </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">xml</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  ctx.response.body </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> fs.</span><span style="color:#50FA7B;">createReadStream</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">really_large.xml</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><p>Context 对象还提供了其 request 和 response 方法的快捷方式：</p><ul><li><code>ctx.type</code> 可以代替 <code>ctx.response.type</code></li><li><code>ctx.accepts</code> 可以代替 <code>ctx.request.accepts</code></li></ul><h2 id="koa-与-express-比较" tabindex="-1">Koa 与 Express 比较 <a class="header-anchor" href="#koa-与-express-比较" aria-label="Permalink to &quot;Koa 与 Express 比较&quot;">​</a></h2><h3 id="更轻量" tabindex="-1">更轻量 <a class="header-anchor" href="#更轻量" aria-label="Permalink to &quot;更轻量&quot;">​</a></h3><ul><li>koa 不提供内置的中间件</li><li>koa 不提供路由，而是把路由这个库分离出来了（koa/router）</li></ul><h3 id="context-对象" tabindex="-1">Context 对象 <a class="header-anchor" href="#context-对象" aria-label="Permalink to &quot;Context 对象&quot;">​</a></h3><p>koa 增加了一个 Context 对象，作为这次请求的上下文对象（在 koa2 中作为中间件的第一个参数传入）。同时 Context 上也挂载了 Request 和 Response 两个对象。和 Express 类似，这两个对象都提供了大量的便捷方法辅助开发, 在保存一些公有的参数时变得更加合情合理</p><h3 id="异步流程控制" tabindex="-1">异步流程控制 <a class="header-anchor" href="#异步流程控制" aria-label="Permalink to &quot;异步流程控制&quot;">​</a></h3><p>express 采用 callback 来处理异步， koa v1 采用 generator，koa v2 采用 async/await</p><p>generator 和 async/await 使用同步的写法来处理异步，明显好于 callback 和 promise</p><h3 id="中间件模型" tabindex="-1">中间件模型 <a class="header-anchor" href="#中间件模型" aria-label="Permalink to &quot;中间件模型&quot;">​</a></h3><p>express 基于 connect 中间件，线性模型</p><p>koa 中间件采用洋葱模型（对于每个中间件，在完成了一些事情后，可以非常优雅的将控制权传递给下一个中间件，并能够等待它完成，当后续的中间件完成处理后，控制权又回到了自己）</p><h2 id="路由" tabindex="-1">路由 <a class="header-anchor" href="#路由" aria-label="Permalink to &quot;路由&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> Koa </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">koa</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> Router </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">koa-router</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> app </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Koa</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> router </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Router</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">router.</span><span style="color:#50FA7B;">post</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/list</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  ctx.body </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">k1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">k2</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">k3</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">use</span><span style="color:#F8F8F2;">(router.</span><span style="color:#50FA7B;">routes</span><span style="color:#F8F8F2;">()).</span><span style="color:#50FA7B;">use</span><span style="color:#F8F8F2;">(router.</span><span style="color:#50FA7B;">allowedMethods</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">listen</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">3000</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><h2 id="静态资源" tabindex="-1">静态资源 <a class="header-anchor" href="#静态资源" aria-label="Permalink to &quot;静态资源&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> Koa </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">koa</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> path </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">path</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> static </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">require</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">koa-static</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> app </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Koa</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">use</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">static</span><span style="color:#F8F8F2;">(path.</span><span style="color:#50FA7B;">join</span><span style="color:#F8F8F2;">(__dirname, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">public</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">use</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">async</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">ctx</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  ctx.body </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">hello world</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">app.</span><span style="color:#50FA7B;">listen</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">3000</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div>`,44),F=[p];function e(t,c,r,y,i,d){return n(),a("div",null,F)}const h=s(o,[["render",e]]);export{u as __pageData,h as default};
