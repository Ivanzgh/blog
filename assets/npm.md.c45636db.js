import{_ as a,c as s,o as n,Q as e}from"./chunks/framework.f14b72c3.js";const h=JSON.parse('{"title":"NPM","description":"","frontmatter":{},"headers":[],"relativePath":"npm.md","lastUpdated":1681829744000}'),l={name:"npm.md"},p=e(`<h1 id="npm" tabindex="-1">NPM <a class="header-anchor" href="#npm" aria-label="Permalink to &quot;NPM&quot;">​</a></h1><p>npm 官网：<a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">https://www.npmjs.com/</a></p><p>npm 中文文档：<a href="https://www.npmjs.cn/" target="_blank" rel="noreferrer">https://www.npmjs.cn/</a></p><h2 id="常用指令" tabindex="-1">常用指令 <a class="header-anchor" href="#常用指令" aria-label="Permalink to &quot;常用指令&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">order</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;">npm init</td><td style="text-align:left;">初始化，生成 package.json</td></tr><tr><td style="text-align:left;">npm install packname (简写 npm i )</td><td style="text-align:left;">安装依赖包，默认将依赖安装到生产环境中</td></tr><tr><td style="text-align:left;">npm uninstall packnae (简写 npm uni)</td><td style="text-align:left;">卸载依赖包</td></tr><tr><td style="text-align:left;">npm update packname</td><td style="text-align:left;">更新依赖包</td></tr><tr><td style="text-align:left;">npm install npm -g</td><td style="text-align:left;">npm 升级</td></tr><tr><td style="text-align:left;">npm config get registry</td><td style="text-align:left;">查看镜像地址</td></tr><tr><td style="text-align:left;">npm list -g</td><td style="text-align:left;">查看所有全局安装的模块</td></tr><tr><td style="text-align:left;">npm i --legacy-peer-deps</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;">npm cache clear --force</td><td style="text-align:left;">清除 npm 缓存</td></tr></tbody></table><h2 id="安装参数区别" tabindex="-1">安装参数区别 <a class="header-anchor" href="#安装参数区别" aria-label="Permalink to &quot;安装参数区别&quot;">​</a></h2><h3 id="全局安装" tabindex="-1">全局安装 <a class="header-anchor" href="#全局安装" aria-label="Permalink to &quot;全局安装&quot;">​</a></h3><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">install</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">packname</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">-g</span></span>
<span class="line"></span></code></pre></div><h3 id="生产环境安装" tabindex="-1">生产环境安装 <a class="header-anchor" href="#生产环境安装" aria-label="Permalink to &quot;生产环境安装&quot;">​</a></h3><p>简写：-S ， 并在 package.json 的 dependencies 属性写入依赖。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">install</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">packname</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">--save</span></span>
<span class="line"></span></code></pre></div><h3 id="开发环境安装" tabindex="-1">开发环境安装 <a class="header-anchor" href="#开发环境安装" aria-label="Permalink to &quot;开发环境安装&quot;">​</a></h3><p>简写：-D ， 并在 package.json 的 devDependencies 属性写入依赖。</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">install</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">packname</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">--save-dev</span></span>
<span class="line"></span></code></pre></div><h2 id="切换淘宝镜像" tabindex="-1">切换淘宝镜像 <a class="header-anchor" href="#切换淘宝镜像" aria-label="Permalink to &quot;切换淘宝镜像&quot;">​</a></h2><p>使用 cnpm 命令</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">install</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">-g</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">cnpm</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">--registry=https://registry.npm.taobao.org</span></span>
<span class="line"></span></code></pre></div><p>安装成功后即可使用</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">cnpm </span><span style="color:#F1FA8C;">install</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">packname</span></span>
<span class="line"></span></code></pre></div><p>也可以直接设置</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">config</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">set</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">registry</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">https://registry.npm.taobao.org</span></span>
<span class="line"></span></code></pre></div><p>切换回 npm 镜像：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">config</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">set</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">registry</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">https://registry.npmjs.org</span></span>
<span class="line"></span></code></pre></div><p>查看镜像源：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">get</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">registry</span></span>
<span class="line"></span></code></pre></div><h2 id="npm-发布插件" tabindex="-1">npm 发布插件 <a class="header-anchor" href="#npm-发布插件" aria-label="Permalink to &quot;npm 发布插件&quot;">​</a></h2><p>1、<code>npm init</code> 初始化项目,生成 package.json 文件</p><p>2、敲代码</p><p>3、创建<code>.npmignore</code>文件，发布时会忽略里面的文件</p><p>4、创建 README.md 文件，添加插件描述</p><p>5、使用邮箱注册 npm 账号,官网：<a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">https://www.npmjs.com/</a></p><p>6、在 npm 官网查看插件名是否已经注册</p><p>7、可以运行<code>npm whoami</code> 查看当前用户是不是自己</p><p>8、在项目下运行 <code>npm login</code>，输入用户名、密码、邮箱</p><p>9、运行 <code>npm publish</code></p><p>10、在 npm 官网查看是否发布成功</p><h3 id="npm-发布的插件版本号规则" tabindex="-1">npm 发布的插件版本号规则 <a class="header-anchor" href="#npm-发布的插件版本号规则" aria-label="Permalink to &quot;npm 发布的插件版本号规则&quot;">​</a></h3><p>语义版本号分为 X.Y.Z 三位，分别代表主版本号、次版本号和补丁版本号。</p><ul><li>如果只是修复 bug，需要更新 Z 位。</li><li>如果是新增了功能，但是向下兼容，需要更新 Y 位。</li><li>如果有大变动，向下不兼容，需要更新 X 位。</li></ul><h3 id="插件升级" tabindex="-1">插件升级 <a class="header-anchor" href="#插件升级" aria-label="Permalink to &quot;插件升级&quot;">​</a></h3><p>首先运行以下命令之一，修改版本</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">npm version patch  </span><span style="color:#6272A4;">// 补丁【1.0.1】</span></span>
<span class="line"><span style="color:#F8F8F2;">npm version minor  </span><span style="color:#6272A4;">// 小改【1.1.0】</span></span>
<span class="line"><span style="color:#F8F8F2;">npm version major  </span><span style="color:#6272A4;">// 大改【2.0.0】</span></span>
<span class="line"></span></code></pre></div><p>然后再运行一遍发布命令即可</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">npm publish</span></span>
<span class="line"></span></code></pre></div><h2 id="package-json-和-package-lock-json-的区别" tabindex="-1">package.json 和 package-lock.json 的区别 <a class="header-anchor" href="#package-json-和-package-lock-json-的区别" aria-label="Permalink to &quot;package.json 和 package-lock.json 的区别&quot;">​</a></h2><p>package.json 文件记录项目中所需要的所有模块。当执行 npm install 的时候，node 会先从 package.json 文件中读取所有 dependencies 信息， 然后根据 dependencies 中的信息与 node_modules 中的模块进行对比，没有的直接下载，已有的检查更新（最新版本的 nodejs 不会更新，因为有 package-lock.json 文件）。 另外，package.json 文件只记录通过<code>npm install</code>方式安装的模块信息，而这些模块所依赖的其他子模块的信息不会记录。</p><p>package-lock.json 文件锁定所有模块的版本号，包括主模块和所有依赖子模块。在执行<code>npm install</code>的时候， node 从 package.json 文件读取模块名称，从 package-lock.json 文件中获取版本号，然后进行下载或者更新。 因此，正因为有了 package-lock.json 文件锁定版本号，所以在执行<code>npm install</code>的时候，node 不会自动更新 package.json 文件中的模块， 必须用<code>npm install packagename</code>（自动更新小版本号）或者<code>npm install packagename@x.x.x（指定版本号）</code>来进行安装才会更新，package-lock.json 文件中的版本号也会随着更新。</p><p>当 package.json 与 package-lock.json 都不存在，执行<code>npm install</code>时，node 会重新生成 package-lock.json 文件，然后把 node_modules 中的模块信息全部记入 package-lock.json 文件， 但不会生成 package.json 文件，此时，可以通过<code>npm init</code>来初始化生成 package.json 文件。</p><p><strong>总结：</strong></p><p>项目中引入的包版本号之前经常会加^号，每次在执行<code>npm install</code>之后，下载的包都会发生变化， 为了系统的稳定性考虑，每次执行完<code>npm install</code>之后会创建或者更新 package-lock 文件。 该文件记录了上一次安装的具体的版本号，相当于是提供了一个参考，在出现版本兼容性问题的时候，就可以参考这个文件来修改版本号即可。</p><h2 id="npx" tabindex="-1">npx <a class="header-anchor" href="#npx" aria-label="Permalink to &quot;npx&quot;">​</a></h2><p>npx 是 npm 5.2.0 及以上版本中附带的工具，可以在命令行中运行本地安装的 npm 包，而不需要在全局安装它们。</p><p>npx 会在当前目录下的<code>./node_modules/.bin</code> 里去查找是否有可执行的命令，没有找到的话再从全局里查找是否有安装对应的模块，全局也没有的话就会自动下载对应的模块，npx 会将依赖包下载到一个临时目录，执行完成后删除本地缓存</p><p>例如使用<code>create-react-app</code>脚手架创建 react 项目</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;"># 第一步，安装create-react-app</span></span>
<span class="line"><span style="color:#F8F8F2;">npm </span><span style="color:#F1FA8C;">i</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">-g</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">create-react-app</span></span>
<span class="line"><span style="color:#6272A4;"># 第二步，执行命令</span></span>
<span class="line"><span style="color:#F8F8F2;">create-react-app </span><span style="color:#F1FA8C;">my-app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;"># 使用npx只需一行命令</span></span>
<span class="line"><span style="color:#F8F8F2;">npx </span><span style="color:#F1FA8C;">create-react-app</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">my-app</span></span>
<span class="line"></span></code></pre></div><p>npx 参数：</p><ul><li>-p, --package: 指定要使用的 npm 包名称或路径，可以与其他参数组合使用</li><li>-c, --call: 直接调用 JS 代码片段，可以与其他参数组合使用</li><li>-q, --quiet: 在输出中禁用 npx 的额外信息，只输出命令的输出结果</li><li>-v, --version: 显示 npx 的版本号</li><li>-h, --help: 显示 npx 的帮助文档</li><li>--ignore-existing: 忽略本地已经安装的同名命令，强制使用最新的版本</li><li>--no-install: 强制使用本地缓存中已经存在的包，不会执行任何安装操作</li><li>--no-optional: 不会安装可选依赖项</li><li>--no-peer: 不会安装对等依赖项</li><li>--no-install-peer-deps: 在安装包时不会安装对等依赖项</li><li>--npm: 指定要使用的 npm 可执行文件路径</li><li>--node-arg: 将额外的参数传递给 node 运行时</li></ul>`,57),t=[p];function o(c,r,i,d,F,y){return n(),s("div",null,t)}const m=a(l,[["render",o]]);export{h as __pageData,m as default};
