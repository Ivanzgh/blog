import{_ as s,c as a,o as n,Q as l}from"./chunks/framework.f14b72c3.js";const u=JSON.parse('{"title":"ES6","description":"","frontmatter":{},"headers":[],"relativePath":"fe/js/es6.md","lastUpdated":1698246525000}'),p={name:"fe/js/es6.md"},o=l(`<h1 id="es6" tabindex="-1">ES6 <a class="header-anchor" href="#es6" aria-label="Permalink to &quot;ES6&quot;">​</a></h1><h2 id="let-和-const" tabindex="-1">let 和 const <a class="header-anchor" href="#let-和-const" aria-label="Permalink to &quot;let 和 const&quot;">​</a></h2><h3 id="let" tabindex="-1">let <a class="header-anchor" href="#let" aria-label="Permalink to &quot;let&quot;">​</a></h3><p>用来声明变量，<strong>只在<code>let</code>命令所在的代码块内有效</strong>，即<a href="https://ivanzgh.github.io/blog/fe/base/js.html#%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F" target="_blank" rel="noreferrer">块级作用域</a>。不存在变量提升，不允许重复声明</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">varTest</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(a); </span><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(a); </span><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">letTest</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(b); </span><span style="color:#6272A4;">// ReferenceError: b is not defined</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#6272A4;">// let b = 2; // Uncaught SyntaxError: Identifier &#39;b&#39; has already been declared</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(b); </span><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(b); </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>在<code>letTest()</code>的 if 语句中，可以再次声明变量 b，是因为变量 b 只在这个 if 语句中有效。 如果在 if 语句中使用<code>var</code>声明变量 b，会报错</p><p>let 很适合在 for 循环时声明索引变量</p><h3 id="const" tabindex="-1">const <a class="header-anchor" href="#const" aria-label="Permalink to &quot;const&quot;">​</a></h3><p><code>const</code>声明一个只读的常量，必须初始化赋值。一旦声明，常量的值就不能改变，只在声明所在的块级作用域内有效。 不存在变量提升，不允许重复声明。<strong>复杂类型(数组、对象等)指针指向的地址不能更改，内部数据可以更改</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">123</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">234</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">; </span><span style="color:#6272A4;">// TypeError: Assignment to constant letiable</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">arr.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr); </span><span style="color:#6272A4;">// [1,2,3,4]</span></span>
<span class="line"><span style="color:#F8F8F2;">arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr); </span><span style="color:#6272A4;">// 改变数组的指向会出错 Uncaught TypeError: Assignment to constant letiable</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>let 和 const 声明的全局变量不属于顶层对象的属性，只存在于块级作用域中</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(window.a); </span><span style="color:#6272A4;">// undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(window.b); </span><span style="color:#6272A4;">// undefined</span></span>
<span class="line"></span></code></pre></div></div><p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/133" target="_blank" rel="noreferrer">https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/133</a></p><h2 id="模板字符串" tabindex="-1">模板字符串 <a class="header-anchor" href="#模板字符串" aria-label="Permalink to &quot;模板字符串&quot;">​</a></h2><p>模板字符串（templatestring）是增强版的字符串，用反引号\`标识，嵌入的变量名写在<code>\${}</code>之中。</p><p>第一个用途，基本的字符串格式化。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">world</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">// ES5</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> name);</span></span>
<span class="line"><span style="color:#6272A4;">// ES6</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`hello</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">name</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><p>第二个用途，做多行字符串或者字符串一行行拼接。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// ES5</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Hi </span><span style="color:#FF79C6;">\\</span></span>
<span class="line"><span style="color:#F1FA8C;">    Girl!</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">// ES6</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> say </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">\`&lt;div&gt;</span></span>
<span class="line"><span style="color:#F1FA8C;">        &lt;p&gt;hello, world&lt;/p&gt;</span></span>
<span class="line"><span style="color:#F1FA8C;">    &lt;/div&gt;\`</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span></code></pre></div><p>ES6 还提供了一些字符串方法，如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// 1.includes：判断是否包含参数字符串，返回布尔值</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> str </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">welcome</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(str.</span><span style="color:#50FA7B;">includes</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">e</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)); </span><span style="color:#6272A4;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 2.repeat: 获取字符串重复n次</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> str </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">he</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(str.</span><span style="color:#50FA7B;">repeat</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">)); </span><span style="color:#6272A4;">// &#39;hehehe&#39;</span></span>
<span class="line"><span style="color:#6272A4;">// 如果带入小数, Math.floor(num) 来处理</span></span>
<span class="line"><span style="color:#6272A4;">// s.repeat(3.1) 或者 s.repeat(3.9) 都当做 s.repeat(3) 来处理</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 3. startsWith 和 endsWith 判断是否以给定文本开始或者结束</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> str </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">hello world!</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(str.</span><span style="color:#50FA7B;">startsWith</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)); </span><span style="color:#6272A4;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(str.</span><span style="color:#50FA7B;">endsWith</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">!</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)); </span><span style="color:#6272A4;">// true</span></span>
<span class="line"></span></code></pre></div><h2 id="解构赋值" tabindex="-1">解构赋值 <a class="header-anchor" href="#解构赋值" aria-label="Permalink to &quot;解构赋值&quot;">​</a></h2><h3 id="数组的解构赋值" tabindex="-1">数组的解构赋值 <a class="header-anchor" href="#数组的解构赋值" aria-label="Permalink to &quot;数组的解构赋值&quot;">​</a></h3><p>可以从数组中提取值，按照对应位置，对变量赋值。这种写法属<strong>模式匹配</strong>，只要等号两边的模式相同，左边的变量就会被赋予对应的值</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> [a, b, c] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(a, b, c); </span><span style="color:#6272A4;">// 1 2 3</span></span>
<span class="line"></span></code></pre></div><p><strong>注意细节:</strong></p><p>1、左右结构不同</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> [a, b, c, d] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(a, b, c, d); </span><span style="color:#6272A4;">// 1 2 3 undefined</span></span>
<span class="line"></span></code></pre></div><p>2、跳过部分</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> [a, , c] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(a, c); </span><span style="color:#6272A4;">// 1 3</span></span>
<span class="line"></span></code></pre></div><p>3、默认值</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> [a, b, c, d </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">666</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(a, b, c, d); </span><span style="color:#6272A4;">// 1 2 3 666</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> [a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">11</span><span style="color:#F8F8F2;">, b </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">22</span><span style="color:#F8F8F2;">, c, d </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">666</span><span style="color:#F8F8F2;">] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(a, b, c, d); </span><span style="color:#6272A4;">// 11 22 undefined 666</span></span>
<span class="line"></span></code></pre></div><p>4、嵌套</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> [a, b, c] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, [</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">]];</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(a, b, c); </span><span style="color:#6272A4;">// 1 2 [3]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> [a, b, [c]] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, [</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">]];</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(a, b, c); </span><span style="color:#6272A4;">// 1 2 3</span></span>
<span class="line"></span></code></pre></div><p>5、数组的对象解构</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> str </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">23,zgh,boy</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">// { 数组下标: 变量名 }</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> { </span><span style="color:#BD93F9;">1</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> name, </span><span style="color:#BD93F9;">2</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> sex, </span><span style="color:#BD93F9;">0</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> age } </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> str.</span><span style="color:#50FA7B;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">,</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(name, sex, age); </span><span style="color:#6272A4;">// zgh boy 23</span></span>
<span class="line"></span></code></pre></div><h3 id="对象的解构赋值" tabindex="-1">对象的解构赋值 <a class="header-anchor" href="#对象的解构赋值" aria-label="Permalink to &quot;对象的解构赋值&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> { name, age } </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, age</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">22</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(name, age); </span><span style="color:#6272A4;">// zgh 22</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">对象与数组解构的不同点</p><ul><li>数组的元素是按次序排列的，变量的取值由它的位置决定</li><li>对象的属性没有次序，变量必须与属性同名，才能取到正确的值</li></ul></div><h3 id="函数参数的解构赋值" tabindex="-1">函数参数的解构赋值 <a class="header-anchor" href="#函数参数的解构赋值" aria-label="Permalink to &quot;函数参数的解构赋值&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> ([</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">]) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> b;</span></span>
<span class="line"><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">([</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">]); </span><span style="color:#6272A4;">// 3</span></span>
<span class="line"></span></code></pre></div><p>上述代码可将数组<code>[1, 2]</code>看作一个参数<code>param</code>，即<code>param = [1, 2]</code></p><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><h3 id="为函数的参数设置默认值" tabindex="-1">为函数的参数设置默认值 <a class="header-anchor" href="#为函数的参数设置默认值" aria-label="Permalink to &quot;为函数的参数设置默认值&quot;">​</a></h3><p>可以给函数的参数设置默认值，如果不指定该函数的参数值，就会使用默认参数值</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Person</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">num</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">22</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> name </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> num </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> num </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">22</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">Person</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#50FA7B;">Person</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Jack</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">20</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><p>如果没有设置默认值，调用时 num 传入 0，0 为 false，那么例子中的 num 结果就为 22 而不是 0</p><h3 id="箭头函数" tabindex="-1">箭头函数 <a class="header-anchor" href="#箭头函数" aria-label="Permalink to &quot;箭头函数&quot;">​</a></h3><h4 id="es6-允许使用-箭头-定义函数" tabindex="-1">ES6 允许使用“箭头”（=&gt;）定义函数 <a class="header-anchor" href="#es6-允许使用-箭头-定义函数" aria-label="Permalink to &quot;ES6 允许使用“箭头”（=&gt;）定义函数&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">//1.不带参数</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">sum</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#6272A4;">//等同于</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">sum</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">//2.带一个参数</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">sum</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> a;</span></span>
<span class="line"><span style="color:#6272A4;">//等同于</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">sum</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> a;</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">//3.带多个参数,需要使用小括号将参数括起来</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">sum</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> b;</span></span>
<span class="line"><span style="color:#6272A4;">//等同于</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">sum</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> b;</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">//4.代码块部分多于一条语句需要用大括号将其括起来，并且使用return语句返回。</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">sum</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> c </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> b;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> c;</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">//5.返回对象，就必须用小括号把该对象括起来</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">person</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> ({ name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, age</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">22</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"><span style="color:#6272A4;">//等同于</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">person</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, age</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">22</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span></code></pre></div><h4 id="箭头函数的-this-指向" tabindex="-1">箭头函数的 this 指向 <a class="header-anchor" href="#箭头函数的-this-指向" aria-label="Permalink to &quot;箭头函数的 this 指向&quot;">​</a></h4><p>箭头函数本身是没有<code>this</code>和<code>arguments</code>的，在箭头函数中引用 this 实际上是调用的是定义时的父执行上下文的 this。简单对象（非函数）是没有执行上下文的。</p><ul><li>使用<code>call，apply，bind</code>都不能改变 this 指向</li><li>箭头函数没有原型属性<code>prototype</code></li><li>不能用作构造函数，即 new 指令</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">say</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f1</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">f1</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> rs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> obj.say;</span></span>
<span class="line"><span style="color:#50FA7B;">rs</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// f1执行时，say函数指向window，所以f1中的this指向window</span></span>
<span class="line"><span style="color:#F8F8F2;">obj.</span><span style="color:#50FA7B;">say</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// f1执行时，say函数指向obj，所以f1中的this指向obj</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 下面写法错误！</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Person</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span></code></pre></div><h2 id="对象" tabindex="-1">对象 <a class="header-anchor" href="#对象" aria-label="Permalink to &quot;对象&quot;">​</a></h2><h3 id="对象简写" tabindex="-1">对象简写 <a class="header-anchor" href="#对象简写" aria-label="Permalink to &quot;对象简写&quot;">​</a></h3><ul><li>属性的简写</li></ul><p>条件：属性的值是一个变量，且变量名称和键名是一致的</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> age </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">22</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// ES5写法</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> name, age</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> age };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// ES6写法</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { name, age };</span></span>
<span class="line"></span></code></pre></div><ul><li>方法的简写</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// ES5写法</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">hello</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// ES6写法</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">hello</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span></code></pre></div><h2 id="map" tabindex="-1">Map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;Map&quot;">​</a></h2><p>类似于对象，可以用来存储键值对的集合</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// 创建一个Map对象</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> myMap </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Map</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 添加键值对</span></span>
<span class="line"><span style="color:#F8F8F2;">myMap.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">myMap.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">([</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">], { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 也可以在声明时就添加键值对，二维数组</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> user </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Map</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">foo</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">baz</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">23</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 查看集合中元素的数量</span></span>
<span class="line"><span style="color:#F8F8F2;">myMap.size;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 获取相应的键值</span></span>
<span class="line"><span style="color:#F8F8F2;">myMap.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 删除一个键值对</span></span>
<span class="line"><span style="color:#F8F8F2;">myMap.</span><span style="color:#50FA7B;">delete</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 判断该键值对是否存在</span></span>
<span class="line"><span style="color:#F8F8F2;">myMap.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 删除集合中所有的键值对</span></span>
<span class="line"><span style="color:#F8F8F2;">myMap.</span><span style="color:#50FA7B;">clear</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 可以遍历</span></span>
<span class="line"><span style="color:#F8F8F2;">myMap.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(key </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">: </span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> value);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><h3 id="map-和-object-有什么不同" tabindex="-1">Map 和 Object 有什么不同? <a class="header-anchor" href="#map-和-object-有什么不同" aria-label="Permalink to &quot;Map 和 Object 有什么不同?&quot;">​</a></h3><ul><li>二者都属于键值对结构</li><li>Object 中的键名只能是<code>String</code>或者<code>Symbol</code>类型，而 Map 的键可以是任意值</li><li>Object 可以从原型链继承属性和方法，而 Map 不具备继承性</li></ul><h3 id="map-的使用场景" tabindex="-1">Map 的使用场景 <a class="header-anchor" href="#map-的使用场景" aria-label="Permalink to &quot;Map 的使用场景&quot;">​</a></h3><p>1、<strong>缓存</strong></p><p>Map 可以用来缓存一些计算结果，避免重复计算。比如缓存斐波那契数列的结果</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> fibCache </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Map</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">fibonacci</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">n</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (n </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> n;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (fibCache.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(n)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> fibCache.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(n);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> result </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">fibonacci</span><span style="color:#F8F8F2;">(n </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">fibonacci</span><span style="color:#F8F8F2;">(n </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  fibCache.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(n, result);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> result;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">fibonacci</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">6</span><span style="color:#F8F8F2;">)); </span><span style="color:#6272A4;">// 8</span></span>
<span class="line"></span></code></pre></div><p>2、<strong>数据结构</strong></p><p>Map 可以用作一些数据结构的基础，比如字典、哈希表等。例如实现哈希表时，可以使用 Map 来存储键值对</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">HashTable</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.table </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Map</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">put</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.table.</span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(key, value);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.table.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(key);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">remove</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.table.</span><span style="color:#50FA7B;">delete</span><span style="color:#F8F8F2;">(key);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> hashObj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">HashTable</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">hashObj.</span><span style="color:#50FA7B;">put</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(hashObj.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(hashObj);</span></span>
<span class="line"></span></code></pre></div><p>3、<strong>状态管理</strong></p><p>Map 可以用于管理应用程序的状态。例如在 React 中，可以使用 Map 来存储组件的状态（这里只是例子，在 React 中实际上不要这么做！）</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">Counter</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">React</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">props</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">super</span><span style="color:#F8F8F2;">(props);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.state </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Map</span><span style="color:#F8F8F2;">([[</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">count</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">]]);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">increment</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">setState</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">state</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> count </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> state.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">count</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Map</span><span style="color:#F8F8F2;">([[</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">count</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, count]]);</span></span>
<span class="line"><span style="color:#F8F8F2;">    });</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">render</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> (</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">        Count: </span><span style="color:#FF79C6;">{</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.state.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">count</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span><span style="color:#FF79C6;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">        &lt;</span><span style="color:#FF79C6;">button</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">onClick</span><span style="color:#FF79C6;">={</span><span style="color:#F8F8F2;">() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">increment</span><span style="color:#F8F8F2;">()</span><span style="color:#FF79C6;">}</span><span style="color:#F8F8F2;">&gt;Increment&lt;/</span><span style="color:#FF79C6;">button</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;/</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    );</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="关于-map-的编程题" tabindex="-1">关于 Map 的编程题 <a class="header-anchor" href="#关于-map-的编程题" aria-label="Permalink to &quot;关于 Map 的编程题&quot;">​</a></h3><p>1、编写一个函数，接受一个数组作为参数，返回一个 Map，其中键为数组中的元素，值为元素在数组中出现的次数。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">countOccurrences</span><span style="color:#F8F8F2;">([</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">]); </span><span style="color:#6272A4;">// Map { 1 =&gt; 1, 2 =&gt; 2, 3 =&gt; 3 }</span></span>
<span class="line"></span></code></pre></div><p>2、编写一个函数，接受一个 Map 作为参数，返回一个由 Map 的键值对颠倒后的新 Map。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">invertMap</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Map</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">b</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">c</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">  ])</span></span>
<span class="line"><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// Map { 1 =&gt; &#39;a&#39;, 2 =&gt; &#39;b&#39;, 3 =&gt; &#39;c&#39; }</span></span>
<span class="line"></span></code></pre></div><p>3、编写一个函数，接受两个 Map 作为参数，返回一个新 Map，其中包含两个 Map 的所有键值对。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">mergeMaps</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Map</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">b</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">  ]),</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Map</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">c</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">d</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">  ])</span></span>
<span class="line"><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// Map { &#39;a&#39; =&gt; 1, &#39;b&#39; =&gt; 2, &#39;c&#39; =&gt; 3, &#39;d&#39; =&gt; 4 }</span></span>
<span class="line"></span></code></pre></div><p>4、编写一个函数，接受一个 Map 作为参数，返回一个新 Map，其中包含原始 Map 中所有值大于 10 的键值对。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">filterMap</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Map</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">b</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">10</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">c</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">15</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">  ])</span></span>
<span class="line"><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// Map { &#39;c&#39; =&gt; 15 }</span></span>
<span class="line"></span></code></pre></div><p>5、编写一个函数，接受一个 Map 作为参数，返回一个新 Map，其中包含原始 Map 中所有键值对的值的平方。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">mapValues</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Map</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">b</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">c</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">  ])</span></span>
<span class="line"><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// Map { &#39;a&#39; =&gt; 4, &#39;b&#39; =&gt; 9, &#39;c&#39; =&gt; 16 }</span></span>
<span class="line"></span></code></pre></div><p>6、编写一个函数，接受一个 Map 作为参数，返回一个新 Map，其中包含原始 Map 中所有键值对的值的和。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">sumValues</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Map</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">b</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">c</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">  ])</span></span>
<span class="line"><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 9</span></span>
<span class="line"></span></code></pre></div><p>7、编写一个函数，接受一个 Map 作为参数，返回一个新 Map，其中包含原始 Map 中所有键值对的键和值的乘积。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">multiplyKeysAndValues</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Map</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">b</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">c</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">  ])</span></span>
<span class="line"><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// Map { &#39;a&#39; =&gt; 2, &#39;b&#39; =&gt; 6, &#39;c&#39; =&gt; 12 }</span></span>
<span class="line"></span></code></pre></div><p>8、编写一个函数，接受两个 Map 作为参数，返回一个新 Map，其中包含原始 Map1 中所有键值对的键和 Map2 中对应键的值的乘积。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">multiplyMaps</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Map</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">b</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">c</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">  ]),</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Map</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">10</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">c</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">20</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">  ])</span></span>
<span class="line"><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// Map { &#39;a&#39; =&gt; 20, &#39;c&#39; =&gt; 80 }</span></span>
<span class="line"></span></code></pre></div><p>9、编写一个函数，接受一个 Map 和一个回调函数作为参数，对于 Map 中的每个键值对，使用回调函数将键和值进行操作，并返回一个新 Map。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">mapMapValues</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Map</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">b</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">c</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">  ]),</span></span>
<span class="line"><span style="color:#F8F8F2;">  (</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> [key.</span><span style="color:#50FA7B;">toUpperCase</span><span style="color:#F8F8F2;">(), value </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// Map { &#39;A&#39; =&gt; 4, &#39;B&#39; =&gt; 6, &#39;C&#39; =&gt; 8 }</span></span>
<span class="line"></span></code></pre></div><p>10、编写一个函数，接受一个 Map 和一个数组作为参数，将数组中的元素作为键，Map 中对应键的值作为值，返回一个新的 Map。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">mapFromArray</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Map</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">b</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">    [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">c</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">  ]),</span></span>
<span class="line"><span style="color:#F8F8F2;">  [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">c</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// Map { &#39;a&#39; =&gt; 2, &#39;c&#39; =&gt; 4 }</span></span>
<span class="line"></span></code></pre></div><h2 id="set" tabindex="-1">Set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;Set&quot;">​</a></h2><p><code>Set</code>对象是一组不重复的、无序的值的集合，可以往里面添加、删除、查询数据。</p><p><code>Set</code>本身是一个构造函数，用来生成<code>Set</code>数据结构</p><p><code>Set()</code>接受具有<code>iterable</code>可迭代接口的数据结构作为参数，如数组、类数组、字符串等。 不能接受对象结构，否则报错<code>Uncaught TypeError: object is not iterable (cannot read property Symbol(Symbol.iterator))</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// 声明一个Set对象</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> mySet </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Set</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> mySet2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Set</span><span style="color:#F8F8F2;">([</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 添加元素</span></span>
<span class="line"><span style="color:#F8F8F2;">mySet.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">mySet.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">hi</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">mySet.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">([</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 判断集合中是否存在一个元素1</span></span>
<span class="line"><span style="color:#F8F8F2;">mySet.</span><span style="color:#50FA7B;">has</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 删除集合中的字符串</span></span>
<span class="line"><span style="color:#F8F8F2;">mySet.</span><span style="color:#50FA7B;">delete</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">hi</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 获取集合中元素的数量</span></span>
<span class="line"><span style="color:#F8F8F2;">mySet.size; </span><span style="color:#6272A4;">// 3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 遍历</span></span>
<span class="line"><span style="color:#F8F8F2;">mySet.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">item</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(item));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 删除集合中所有的元素</span></span>
<span class="line"><span style="color:#F8F8F2;">mySet.</span><span style="color:#50FA7B;">clear</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 两个对象是不相等的</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> set2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Set</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">set2.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">({});</span></span>
<span class="line"><span style="color:#F8F8F2;">set2.size; </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#F8F8F2;">set2.</span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">({});</span></span>
<span class="line"><span style="color:#F8F8F2;">set2.size; </span><span style="color:#6272A4;">// 2</span></span>
<span class="line"></span></code></pre></div><p>遍历操作</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> mySet </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Set</span><span style="color:#F8F8F2;">([</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">b</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">c</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// entries()返回的遍历器同时包括键名和键值，二者一样</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">of</span><span style="color:#F8F8F2;"> mySet.</span><span style="color:#50FA7B;">entries</span><span style="color:#F8F8F2;">()) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">// [&quot;a&quot;, &quot;a&quot;]</span></span>
<span class="line"><span style="color:#6272A4;">// [&quot;b&quot;, &quot;b&quot;]</span></span>
<span class="line"><span style="color:#6272A4;">// [&quot;c&quot;, &quot;c&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// keys()返回键名</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">of</span><span style="color:#F8F8F2;"> mySet.</span><span style="color:#50FA7B;">keys</span><span style="color:#F8F8F2;">()) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#6272A4;">// &#39;a&#39;</span></span>
<span class="line"><span style="color:#6272A4;">// &#39;b&#39;</span></span>
<span class="line"><span style="color:#6272A4;">// &#39;c&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// values()返回键值，结果同keys()</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">of</span><span style="color:#F8F8F2;"> mySet.</span><span style="color:#50FA7B;">values</span><span style="color:#F8F8F2;">()) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p><code>Set</code>只存储唯一值，可用来数组去重</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> res1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#FF79C6;">...</span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Set</span><span style="color:#F8F8F2;">(arr)]; </span><span style="color:#6272A4;">// [1, 2, 3]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 或者使用 Array.from()</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> res2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Array.</span><span style="color:#50FA7B;">from</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Set</span><span style="color:#F8F8F2;">(arr)); </span><span style="color:#6272A4;">// [1, 2, 3]</span></span>
<span class="line"></span></code></pre></div><p>也可以用来字符串去重</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> str </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#FF79C6;">...</span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Set</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">ababbc</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)].</span><span style="color:#50FA7B;">join</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(str); </span><span style="color:#6272A4;">// &#39;abc&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="操作符" tabindex="-1">...操作符 <a class="header-anchor" href="#操作符" aria-label="Permalink to &quot;...操作符&quot;">​</a></h2><p><code>...</code>可以叫做 spread（扩展）或者 rest（剩余）操作符</p><p>剩余运算符一般会用在函数的参数里面。比如想让一个函数支持更多的参数，参数的数量不受限制，这个时候就可以使用剩余操作符</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Name</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">y</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">...</span><span style="color:#FFB86C;font-style:italic;">z</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(x); </span><span style="color:#6272A4;">// a</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(y); </span><span style="color:#6272A4;">// b</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(z); </span><span style="color:#6272A4;">//[&quot;c&quot; &quot;d&quot; &quot;e&quot;]</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">Name</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">b</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">c</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">d</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">e</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><p>剩余操作符后面的变量会变成一个数组，多余的参数会被放入这个数组中</p><p>扩展运算符用在数组的前面，作用就是将这个数组展开</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arr1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">b</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">c</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">d</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">e</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arr2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">f</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">g</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arr3 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">arr1, </span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">arr2]; </span><span style="color:#6272A4;">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 等同于concat</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> arr4 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr1.</span><span style="color:#50FA7B;">concat</span><span style="color:#F8F8F2;">(arr2);</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> obj1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { a</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, b</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> obj2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { </span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">obj1, c</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;"> }; </span><span style="color:#6272A4;">// {a: 1, b: 2, c: 3}</span></span>
<span class="line"></span></code></pre></div><p>使用扩展运算符展开一个新的对象，第二个对象的属性值会覆盖第一个对象的同名属性值</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> obj1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { a</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, b</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, c</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> obj2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { b</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">30</span><span style="color:#F8F8F2;">, c</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">40</span><span style="color:#F8F8F2;">, d</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">50</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> merged </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { </span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">obj1, </span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">obj2 };</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(merged); </span><span style="color:#6272A4;">// {a: 1, b: 30, c: 40, d: 50}</span></span>
<span class="line"></span></code></pre></div><h2 id="class" tabindex="-1">Class <a class="header-anchor" href="#class" aria-label="Permalink to &quot;Class&quot;">​</a></h2><p>通过 <code>class</code> 关键字，可以定义<strong>类</strong>。class 可以看作只是一个<strong>语法糖</strong>， 它的绝大部分功能，ES5 都可以做到，新的 class 写法让对象原型的写法更加清晰、更像面向对象编程的语法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">//ES5 中使用面向对象</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Person</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">age</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.age </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> age;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">say</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Person</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">22</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">obj.</span><span style="color:#50FA7B;">say</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">//ES6 中使用面向对象</span></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">Person</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">age</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.age </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> age;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">say</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Person</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">22</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">obj.</span><span style="color:#50FA7B;">say</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span></code></pre></div><p>上面代码定义了一个<strong>类</strong>，里面有一个<code>constructor</code>方法，这就是构造方法，而<code>this</code>关键字则代表实例对象。即 ES5 的构造函数 <code>Person</code>， 对应 ES6 的 <code>Person</code> 类的构造方法。</p><p>Person 类除了构造方法，还定义了一个<code>say</code>方法。注意，定义“类”的方法的时候，前面不需要加上<code>function</code>这个关键字，直接把函数定义放进去了就可以了。 另外，方法之间不需要逗号分隔，否则会报错。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Foo</span><span style="color:#F8F8F2;">() {}</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Foo</span><span style="color:#F8F8F2;">.prototype.constructor </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> Foo; </span><span style="color:#6272A4;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> fo </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Foo</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">fo.constructor </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> Foo; </span><span style="color:#6272A4;">// true</span></span>
<span class="line"></span></code></pre></div><p><code>Foo.prototype</code>默认有一个公有且不可枚举的<code>construetor</code>属性，这个属性引用的是对象关联的函数（上例中是 Foo）。 <strong>构造函数</strong>调用<code>new Foo()</code>创建的对象在<code>__proto__</code>上也有<code>construetor</code>属性，指向<strong>创建这个对象的函数</strong></p><p><a href="https://segmentfault.com/a/1190000023516545" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000023516545</a></p><h3 id="class-继承" tabindex="-1">Class 继承 <a class="header-anchor" href="#class-继承" aria-label="Permalink to &quot;Class 继承&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">NBAPlayer</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">age</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">height</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.age </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> age;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.height </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> height;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">say</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`我是</span><span style="color:#FF79C6;">\${</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.name</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">,</span><span style="color:#FF79C6;">\${</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.age</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">岁,身高</span><span style="color:#FF79C6;">\${</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.height</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">cm\`</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">MVP</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">NBAPlayer</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">age</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">height</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">year</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">super</span><span style="color:#F8F8F2;">(name, age, height);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.year </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> year;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">showMVP</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`我是</span><span style="color:#FF79C6;">\${</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.name</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">,在</span><span style="color:#FF79C6;">\${</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.year</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">获得MVP!\`</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> r1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">NBAPlayer</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Jack</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">39</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">198</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">r1.</span><span style="color:#50FA7B;">say</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> r2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">MVP</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Jack</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">39</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">198</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">2010</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">r2.</span><span style="color:#50FA7B;">showMVP</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span></code></pre></div><p><code>extends</code>关键字用于实现类之间的继承。子类继承父类的所有属性和方法，使用<code>super</code>可以调用父类的方法。</p><h3 id="静态方法、静态属性" tabindex="-1">静态方法、静态属性 <a class="header-anchor" href="#静态方法、静态属性" aria-label="Permalink to &quot;静态方法、静态属性&quot;">​</a></h3><p>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前加上<code>static</code>关键字，则这个方法<strong>不会被实例继承</strong>， 而是直接通过类来调用，这就是静态方法。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">Foo</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">static</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">666</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">Foo.</span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// &#39;666&#39;</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> person </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Foo</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">person.</span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// TypeError: person.f is not a function</span></span>
<span class="line"></span></code></pre></div><p>父类的静态方法<strong>可以被子类继承</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">Foo</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">static</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">666</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">Bar</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Foo</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#F8F8F2;">Bar.</span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// &quot;666&quot;</span></span>
<span class="line"></span></code></pre></div><p>静态方法也可以被<code>super</code>对象调用</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">Foo</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">static</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">666</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">Bar</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Foo</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">static</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">g</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">super</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">Bar.</span><span style="color:#50FA7B;">g</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// &quot;666&quot;</span></span>
<span class="line"></span></code></pre></div><h4 id="类的静态属性" tabindex="-1">类的静态属性 <a class="header-anchor" href="#类的静态属性" aria-label="Permalink to &quot;类的静态属性&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// es6写法</span></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">Foo</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#F8F8F2;">Foo.prop </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// es7写法，推荐这一种写法</span></span>
<span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">Bar</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">static</span><span style="color:#F8F8F2;"> prop </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(Bar.prop);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="类的实例属性" tabindex="-1">类的实例属性 <a class="header-anchor" href="#类的实例属性" aria-label="Permalink to &quot;类的实例属性&quot;">​</a></h4><p>类的实例属性可以用等式，写入类的定义之中</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">Foo</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  state </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { value</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.state.value); </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>再看看 react 类组件写法，以前定义类的实例属性只能在<code>constructor</code>里面，现在可以写在外面</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">class</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;">Foo</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">extends</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">React</span><span style="color:#F8F8F2;">.</span><span style="color:#8BE9FD;font-style:italic;">Component</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">constructor</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">props</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">super</span><span style="color:#F8F8F2;">(props);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.state </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      count</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  modalRef </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="promise" tabindex="-1">Promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;Promise&quot;">​</a></h2><p><code>promise</code>用同步编程的方式来编写异步代码，解决回调嵌套问题</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {});</span></span>
<span class="line"></span></code></pre></div><h3 id="promise-的三种状态" tabindex="-1">Promise 的三种状态 <a class="header-anchor" href="#promise-的三种状态" aria-label="Permalink to &quot;Promise 的三种状态&quot;">​</a></h3><ul><li><code>resolved</code> 成功</li><li><code>rejected</code> 失败</li><li><code>pending</code> 创建 promise 对象实例进行中</li></ul><h4 id="then-方法" tabindex="-1">then 方法 <a class="header-anchor" href="#then-方法" aria-label="Permalink to &quot;then 方法&quot;">​</a></h4><p>分别指定<code>resolved</code>状态和<code>rejected</code>状态的回调函数，第二个参数可选（不推荐使用）。 返回的是一个新的<code>Promise</code>，支持链式调用</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">pro</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">params</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (params) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">hahaha</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#50FA7B;">reject</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">error</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">pro</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">  (</span><span style="color:#FFB86C;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(res);</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  (</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(err)</span></span>
<span class="line"><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>Promise</code> 本身是同步的，<code>then</code> 方法是异步的</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> p </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F8F8F2;">p.</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(res));</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><p>结果是 1、2、3</p></div><h4 id="catch-方法" tabindex="-1">catch 方法 <a class="header-anchor" href="#catch-方法" aria-label="Permalink to &quot;catch 方法&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Cat</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">ready</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (ready) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Tom</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#50FA7B;">reject</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Kitty</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">Cat</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  .</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(res);</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">  .</span><span style="color:#50FA7B;">catch</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(err));</span></span>
<span class="line"></span></code></pre></div><p><code>catch</code>方法可以捕获错误，作用和 <code>then(onFulfilled, onRejected)</code> 当中的 <code>onRejected</code> 函数类似。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">Cat</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  .</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(tom);</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">  .</span><span style="color:#50FA7B;">catch</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">err</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(err));</span></span>
<span class="line"></span></code></pre></div><p>示例未定义变量 tom，如果不使用 catch 会直接报错，终止程序。使用后不会报错，但会将错误信息传递到 catch 方法中，方便处理</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>将<code>catch</code>语句和<code>try/catch</code>语句进行比较</p></div><p>示例：以下代码输出什么？</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  (</span><span style="color:#FF79C6;">async</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">a</span><span style="color:#F8F8F2;">().</span><span style="color:#50FA7B;">b</span><span style="color:#F8F8F2;">().</span><span style="color:#50FA7B;">c</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  })();</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#FF79C6;">catch</span><span style="color:#F8F8F2;"> (e) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#F1FA8C;">\`执行出错：</span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">e.message</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">\`</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>答案：<code>Uncaught (in promise) ReferenceError: a is not defined</code></p><p><code>async</code>定义了异步任务，而<code>try catch</code>无法捕获异步任务，所以无法执行<code>catch</code>语句， 改为同步即可<code>await (async function() { a().b().c() })()</code></p><h4 id="all-和-race-方法" tabindex="-1">all 和 race 方法 <a class="header-anchor" href="#all-和-race-方法" aria-label="Permalink to &quot;all 和 race 方法&quot;">​</a></h4><p><code>Promise.all()</code>提供并行执行异步操作的能力，将多个实例包装成一个新实例，返回全部实例状态变更后的结果数组(<strong>全部变更再返回</strong>)</p><p><code>Promise.race()</code>将多个实例包装成一个新实例，返回全部实例状态优先变更后的结果(<strong>先变更先返回</strong>)</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> p1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Promise</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">setTimeout</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Hello</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }, </span><span style="color:#BD93F9;">3000</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> p2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Promise</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">resolve</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">setTimeout</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">world</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }, </span><span style="color:#BD93F9;">1000</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">all</span><span style="color:#F8F8F2;">([p1, p2]).</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(res);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Promise</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">race</span><span style="color:#F8F8F2;">([p1, p2]).</span><span style="color:#50FA7B;">then</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">res</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(res);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><p>结果是 1 秒后打印出<code>world</code>，3 秒后打印出<code>[&quot;Hello&quot;, &quot;world&quot;]</code>，表明<code>Promise.all</code> 方法会按照参数数组里面的顺序将结果返回。 <code>Promise.race</code>方法则是只要该数组中的<code>Promise</code>对象的状态发生变化（无论是<code>resolve</code>还是<code>reject</code>）该方法都会返回。</p><h2 id="async、await" tabindex="-1">async、await <a class="header-anchor" href="#async、await" aria-label="Permalink to &quot;async、await&quot;">​</a></h2><p><code>async</code>、<code>await</code>用来处理异步问题</p><p><code>async</code>放置在函数的前面，返回一个<code>promise</code></p><p><strong>await 只能在 async 函数里面使用</strong>，可以让 js 进行等待，直到一个 promise 执行并返回它的结果，js 才会继续往下执行</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">async</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> res </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">await</span><span style="color:#F8F8F2;"> axios.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(url);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> res.data; </span><span style="color:#6272A4;">//  等待返回请求结果后才执行</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span></code></pre></div><p><a href="https://segmentfault.com/a/1190000013292562?utm_source=channel-newest" target="_blank" rel="noreferrer">参考</a></p><h2 id="generator" tabindex="-1">generator <a class="header-anchor" href="#generator" aria-label="Permalink to &quot;generator&quot;">​</a></h2><p>Generator 是一种异步编程解决方案，执行 Generator 函数会返回一个遍历器对象。两个特征：星号*、<code>yield</code>表达式</p><p>调用函数返回一个指向内部状态的指针，即遍历器对象。必须调用遍历器的<code>next</code>方法，使得指针移向下一个状态。 <code>yield</code>表达式就是暂停标志</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">g</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">hello</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">yield</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">world</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">haha</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> ee </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">g</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// 函数并不会立即执行</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(ee); </span><span style="color:#6272A4;">// g {&lt;suspended&gt;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(ee.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// {value: &quot;hello&quot;, done: false}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(ee.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// {value: &quot;world&quot;, done: false}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(ee.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// {value: &quot;haha&quot;, done: true}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(ee.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// {value: undefined, done: true}</span></span>
<span class="line"></span></code></pre></div><p>遍历器对象<code>{value: &quot;hello&quot;, done: false}</code>表示 value 是<code>yield</code>表达式的值，<code>done: false</code>表示遍历还没有结束</p><p>Generator 函数可以不用<code>yield</code>表达式，这时就变成了一个单纯的暂缓执行函数。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function*</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">gg</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">666</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> g1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">gg</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  g1.</span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// 1s后输出666</span></span>
<span class="line"><span style="color:#F8F8F2;">}, </span><span style="color:#BD93F9;">1000</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><p><code>yield</code>表达式只能用在 Generator 函数里面</p><h2 id="proxy" tabindex="-1">Proxy <a class="header-anchor" href="#proxy" aria-label="Permalink to &quot;Proxy&quot;">​</a></h2><p>外界对目标对象的访问可以被 Proxy 拦截，进行过滤和改写，意为“代理器”</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> proxy </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Proxy</span><span style="color:#F8F8F2;">(target, handler);</span></span>
<span class="line"></span></code></pre></div><ul><li>target 目标对象</li><li>handler 配置对象</li></ul><p>在 ES6 之前，我们可以使用<code>Object.defineProperty</code>去保护对象的私有属性。例如:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> sign </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { _appid</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">12345678</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, _appkey</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">666</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, desc</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh的密钥</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#50FA7B;">defineProperties</span><span style="color:#F8F8F2;">(sign, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  _appid</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    writable</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">false</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  _appkey</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    writable</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">false</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><p>但是如果想对多个属性进行保护，就得对多个属性进行声明<code>writable: false</code>，显然很麻烦，这时就可以用 Proxy 来解决这个问题</p><p>Proxy 意味着我们代理了这个对象，该对象所有的属性操作都会经过 Proxy</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> sign </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { _appid</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">123456</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, _appkey</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">666</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, desc</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh的密钥</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> signProxy </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Proxy</span><span style="color:#F8F8F2;">(sign, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">property</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">receiver</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> target[property];</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">propName</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">value</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">receiver</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (propName </span><span style="color:#FF79C6;">!==</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">desc</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">该属性是私有属性，不允许修改!</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      target[propName] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> value;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(signProxy._appid); </span><span style="color:#6272A4;">// &quot;123456&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">signProxy._appkey </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">dd</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">; </span><span style="color:#6272A4;">// 该属性是私有属性，不允许修改!</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(signProxy._appkey); </span><span style="color:#6272A4;">// &quot;666&quot;</span></span>
<span class="line"></span></code></pre></div><p>这时依然可以直接修改 sign 对象，如果希望对象完全不可修改，可以直接将 sign 写到 Proxy 的 target</p><p><strong>应用场景:</strong></p><ul><li>数据校检</li><li>属性保护</li></ul><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><h4 id="数据类型验证" tabindex="-1">数据类型验证 <a class="header-anchor" href="#数据类型验证" aria-label="Permalink to &quot;数据类型验证&quot;">​</a></h4><p>有一个记账的对象，记录着用户的存款金额，为了方便以后计算，要保证存入的数据类型必须为<code>Number</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> account </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { num</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">8888</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> proxyAccount </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Proxy</span><span style="color:#F8F8F2;">(account, {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">property</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> target[property];</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">propName</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">propValue</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (propName </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">num</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> propValue </span><span style="color:#FF79C6;">!=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">number</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">throw</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">TypeError</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">The num is not an number</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    target[propName] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> propValue;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">proxyAccount.num </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">666</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(proxyAccount.num); </span><span style="color:#6272A4;">// Uncaught TypeError: The num is not an number</span></span>
<span class="line"></span></code></pre></div><h2 id="空值合并运算符" tabindex="-1">空值合并运算符 <a class="header-anchor" href="#空值合并运算符" aria-label="Permalink to &quot;空值合并运算符&quot;">​</a></h2><p>写法：<code>a ?? b</code>，如果第一个参数是<code>null/undefined</code>，则<code>??</code>返回第一个参数，否则返回第二个参数。 效果等同于<code>(a !== null &amp;&amp; a !== undefined) ? a : b</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> a;</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">??</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">; </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"></span></code></pre></div><ul><li><code>??</code>运算符的优先级非常低，仅略高于 <code>?</code> 和 <code>=</code>，使用时要考虑是否添加括号</li><li>如果没有明确添加括号，不能将其与<code>||</code>或<code>&amp;&amp;</code>一起使用</li></ul><h3 id="与-的区别" tabindex="-1">与<code>||</code>的区别 <a class="header-anchor" href="#与-的区别" aria-label="Permalink to &quot;与\`||\`的区别&quot;">​</a></h3><ul><li><code>||</code> 返回第一个真值</li><li><code>??</code> 返回第一个已定义的值</li></ul><p><code>||</code> 无法区分 <code>false</code>、<code>0</code>、空字符串<code>&quot;&quot;</code>、<code>NaN</code>和<code>null/undefined</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">; </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#FF79C6;">??</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">; </span><span style="color:#6272A4;">// 0</span></span>
<span class="line"></span></code></pre></div><h2 id="可选链和双问号" tabindex="-1">可选链和双问号 <a class="header-anchor" href="#可选链和双问号" aria-label="Permalink to &quot;可选链和双问号&quot;">​</a></h2><p>当位于 <code>?.</code> 前面的值为 <code>undefined</code> 或 <code>null</code> 时，会立即阻止代码的执行，并返回 <code>undefined</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">obj?.a;</span></span>
<span class="line"></span></code></pre></div><p>可选链的三种形式：</p><ul><li><code>obj?.pron</code></li><li><code>obj?.[pron]</code></li><li><code>obj.method?.()</code></li></ul><p>假设有表达式为：<code>left ?? right</code></p><ul><li>当 left 是：0、&#39;&#39;、false，会返回 left 的值</li><li>当 left 是 null、undefined，会返回 right 的值</li></ul><p><code>||</code>与双问号的区别是：当 left 是 0、&#39;&#39;、false 时，会返回 right 的值</p><h2 id="逻辑运算符和赋值运算符" tabindex="-1">逻辑运算符和赋值运算符 <a class="header-anchor" href="#逻辑运算符和赋值运算符" aria-label="Permalink to &quot;逻辑运算符和赋值运算符&quot;">​</a></h2><h3 id="" tabindex="-1">&amp;&amp;= <a class="header-anchor" href="#" aria-label="Permalink to &quot;&amp;&amp;=&quot;">​</a></h3><p><code>x &amp;&amp;= y</code>等价于：<code>x &amp;&amp; (x = y)</code>，当 x 为真时，<code>x = y</code></p><h3 id="-1" tabindex="-1">||= <a class="header-anchor" href="#-1" aria-label="Permalink to &quot;||=&quot;">​</a></h3><p><code>x ||= y</code>等价于：<code>x || (x = y)</code>，仅在 x 为 false 的时候，<code>x = y</code></p><h3 id="-2" tabindex="-1">??= <a class="header-anchor" href="#-2" aria-label="Permalink to &quot;??=&quot;">​</a></h3><p><code>x ??= y</code> 等价于 <code>x ?? (x = y)</code>，仅在 x 为 null 或 undefined 的时候，x = y</p>`,219),F=[o];function e(c,t,r,y,i,d){return n(),a("div",null,F)}const A=s(p,[["render",e]]);export{u as __pageData,A as default};
