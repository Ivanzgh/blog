import{_ as s,c as a,o as n,Q as o}from"./chunks/framework.f14b72c3.js";const _=JSON.parse('{"title":"FAQ","description":"","frontmatter":{},"headers":[],"relativePath":"fe/ts/faq.md","lastUpdated":1695604450000}'),l={name:"fe/ts/faq.md"},e=o(`<h1 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-label="Permalink to &quot;FAQ&quot;">​</a></h1><h2 id="通过-obj-field-获取对象的值报错" tabindex="-1">通过 obj[field] 获取对象的值报错 <a class="header-anchor" href="#通过-obj-field-获取对象的值报错" aria-label="Permalink to &quot;通过 obj[field] 获取对象的值报错&quot;">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> obj</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">ObjectType</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, age</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">25</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> field </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">name</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// Element implicitly has an &#39;any&#39; type because expression of type &#39;string&#39; can&#39;t be used to index type 。。。</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> temp </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> obj[field];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// Solution 1: When the type of the object is known</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> temp </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> obj[field </span><span style="color:#FF79C6;">as</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">keyof</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">ObjectType</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// Solution 2: When the type of the object is not known</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> temp </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> obj[field </span><span style="color:#FF79C6;">as</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">keyof</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> obj];</span></span>
<span class="line"></span></code></pre></div>`,3),p=[e];function t(F,c,r,y,i,d){return n(),a("div",null,p)}const h=s(l,[["render",t]]);export{_ as __pageData,h as default};
