import{_ as s,c as n,o as a,Q as l}from"./chunks/framework.f14b72c3.js";const C=JSON.parse('{"title":"JS","description":"","frontmatter":{},"headers":[],"relativePath":"fe/js/index.md","lastUpdated":1695604450000}'),p={name:"fe/js/index.md"},o=l(`<h1 id="js" tabindex="-1">JS <a class="header-anchor" href="#js" aria-label="Permalink to &quot;JS&quot;">​</a></h1><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><p><img src="https://zghimg.oss-cn-beijing.aliyuncs.com/blog/1666417923.png" alt="image"></p><p>基本数据类型：<code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Null</code>、<code>Undefined</code>、<code>Symbol</code>、<code>BigInt</code></p><p>引用类型： <code>Object</code>，如<code>Array</code>、<code>Function</code>、<code>RegExp</code>、<code>Date</code>、<code>Math</code></p><p>引申一点：null 音标是 <code>/nʌl/</code>，可读作 ‘闹’，不要读成 ‘怒儿’、‘浪’</p><p>基本数据类型将数据名和值存储在<strong>栈</strong>中</p><p>引用类型在栈中存入地址，该地址指向<strong>堆</strong>内存，将具体值存储在堆中。访问时先从栈中获取地址，再从堆中获取相应值</p><p><img src="https://zghimg.oss-cn-beijing.aliyuncs.com/blog/1666418036.png" alt="image"></p><p>闭包中的变量并不保存在栈中，而是保存在堆中</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">; </span><span style="color:#6272A4;">// 在内存中开辟一块空间存储a的值 1</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> a; </span><span style="color:#6272A4;">// 开辟一块新的内存空间，将a的值拷贝一份存储到新的内存里</span></span>
<span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(a); </span><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(b); </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> c </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { x</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> d </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> c;</span></span>
<span class="line"><span style="color:#F8F8F2;">c.x </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">4</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(c); </span><span style="color:#6272A4;">// { x: 4 }</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(d); </span><span style="color:#6272A4;">// { x: 4 }</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>关于存储位置是栈内存还是堆内存这里存在争议</p></div><h2 id="类型判断" tabindex="-1">类型判断 <a class="header-anchor" href="#类型判断" aria-label="Permalink to &quot;类型判断&quot;">​</a></h2><h3 id="typeof" tabindex="-1"><code>typeof</code> <a class="header-anchor" href="#typeof" aria-label="Permalink to &quot;\`typeof\`&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">; </span><span style="color:#6272A4;">// &#39;string&#39;</span></span>
<span class="line"><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">666</span><span style="color:#F8F8F2;">; </span><span style="color:#6272A4;">// &#39;number&#39;</span></span>
<span class="line"><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">; </span><span style="color:#6272A4;">// &#39;boolean&#39;</span></span>
<span class="line"><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">; </span><span style="color:#6272A4;">// &#39;object&#39;</span></span>
<span class="line"><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">undefined</span><span style="color:#F8F8F2;">; </span><span style="color:#6272A4;">// &#39;undefined&#39;</span></span>
<span class="line"><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Symbol</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// &#39;symbol&#39;</span></span>
<span class="line"><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> {}; </span><span style="color:#6272A4;">// &#39;object&#39;</span></span>
<span class="line"><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> []; </span><span style="color:#6272A4;">// &#39;object&#39;</span></span>
<span class="line"><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> (() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {}); </span><span style="color:#6272A4;">// &#39;function&#39;</span></span>
<span class="line"></span></code></pre></div><p>可以看出<code>typeof null</code>结果是<code>object</code>，对于数组无法精确判断</p><h3 id="instanceof" tabindex="-1"><code>instanceof</code> <a class="header-anchor" href="#instanceof" aria-label="Permalink to &quot;\`instanceof\`&quot;">​</a></h3><p>通过<code>instanceof</code>操作符可以对引用数据类型进行判定，不能正确判断基本数据类型，其原理就是<strong>测试构造函数的<code>prototype</code>是否出现在被检测对象的原型链上</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">([] </span><span style="color:#FF79C6;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Array</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">({} </span><span style="color:#FF79C6;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Object</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">((() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {}) </span><span style="color:#FF79C6;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Function</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">([] </span><span style="color:#FF79C6;">instanceof</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Object</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// true</span></span>
<span class="line"></span></code></pre></div><p>那么为何会出现<code>[] instanceof Object</code>为 true 呢？</p><p><code>[].__proto__ === Array.prototype</code>、<code>Array.prototype.__proto__ === Object.prototype</code>二者的结果都是 true， 因此 <code>Object</code> 构造函数在 <code>[]</code> 的原型链上</p><h3 id="array-isarray" tabindex="-1"><code>Array.isArray()</code> <a class="header-anchor" href="#array-isarray" aria-label="Permalink to &quot;\`Array.isArray()\`&quot;">​</a></h3><p>可以判断参数是否是数组</p><h3 id="isnan" tabindex="-1"><code>isNaN()</code> <a class="header-anchor" href="#isnan" aria-label="Permalink to &quot;\`isNaN()\`&quot;">​</a></h3><p>可以判断 NaN</p><h3 id="object-prototype-tostring-call" tabindex="-1"><code>Object.prototype.toString.call()</code> <a class="header-anchor" href="#object-prototype-tostring-call" aria-label="Permalink to &quot;\`Object.prototype.toString.call()\`&quot;">​</a></h3><p>全类型都可判断，推荐使用该方法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#8BE9FD;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// &#39;[object String]&#39;</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">666</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// &#39;[object Number]&#39;</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// &#39;[object Boolean]&#39;</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">({}); </span><span style="color:#6272A4;">// &#39;[object Object]&#39;</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">([]); </span><span style="color:#6272A4;">// &#39;[object Array]&#39;</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// &#39;[object Null]&#39;</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">undefined</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// &#39;[object Undefined]&#39;</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Date</span><span style="color:#F8F8F2;">()); </span><span style="color:#6272A4;">// &#39;[object Date]&#39;</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(window); </span><span style="color:#6272A4;">// &#39;[object Window]&#39;</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(document); </span><span style="color:#6272A4;">// &#39;[object HTMLDocument]&#39;</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#FF5555;">/</span><span style="color:#F1FA8C;">123</span><span style="color:#FF5555;">/</span><span style="color:#FF79C6;">g</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// &#39;[object RegExp]&#39;</span></span>
<span class="line"></span></code></pre></div><p>1、返回具体类型</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">dataType</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">data</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString</span></span>
<span class="line"><span style="color:#F8F8F2;">    .</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(data)</span></span>
<span class="line"><span style="color:#F8F8F2;">    .</span><span style="color:#50FA7B;">replace</span><span style="color:#F8F8F2;">(</span><span style="color:#FF5555;">/</span><span style="color:#F1FA8C;">\\[object</span><span style="color:#BD93F9;">\\s</span><span style="color:#FFB86C;">(</span><span style="color:#BD93F9;">.</span><span style="color:#FF79C6;">+</span><span style="color:#FFB86C;">)</span><span style="color:#F1FA8C;">\\]</span><span style="color:#FF5555;">/</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">$1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    .</span><span style="color:#50FA7B;">toLowerCase</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span></code></pre></div><p>2、验证是不是某种类型，返回 true 或 false</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">isType</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">type</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">\`[object </span><span style="color:#FF79C6;">\${</span><span style="color:#F8F8F2;">type</span><span style="color:#FF79C6;">}</span><span style="color:#F1FA8C;">]\`</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Object</span><span style="color:#F8F8F2;">.prototype.toString.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(target);</span></span>
<span class="line"></span></code></pre></div><h2 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h2><h3 id="强制类型转换" tabindex="-1">强制类型转换 <a class="header-anchor" href="#强制类型转换" aria-label="Permalink to &quot;强制类型转换&quot;">​</a></h3><p>1、Number()</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">Number</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#50FA7B;">Number</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#50FA7B;">Number</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 0</span></span>
<span class="line"><span style="color:#50FA7B;">Number</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 0</span></span>
<span class="line"><span style="color:#50FA7B;">Number</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">undefined</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// NaN</span></span>
<span class="line"><span style="color:#50FA7B;">Number</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 0</span></span>
<span class="line"><span style="color:#50FA7B;">Number</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#50FA7B;">Number</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">01</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#50FA7B;">Number</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">1.23</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 1.23</span></span>
<span class="line"><span style="color:#50FA7B;">Number</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">1a</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// NaN</span></span>
<span class="line"><span style="color:#50FA7B;">Number</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">0x10</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 16</span></span>
<span class="line"></span></code></pre></div><p>2、toString()</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">123</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> a.</span><span style="color:#50FA7B;">toString</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span></code></pre></div><p>3、String()</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">String</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">123</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><p>4、parseInt()和 parseFloat()</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">1.99</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#50FA7B;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">1234blue</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 1234</span></span>
<span class="line"><span style="color:#50FA7B;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">0xA</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 10</span></span>
<span class="line"><span style="color:#50FA7B;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">22.5</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 22</span></span>
<span class="line"><span style="color:#50FA7B;">parseInt</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">blue</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// NaN</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">parseFloat</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">1.23</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 1.23</span></span>
<span class="line"></span></code></pre></div><p>5、Boolean()</p><p>除了 undefined、null、&#39; &#39;、NaN、0、false 转换出来是 false，其他都是 true</p><h3 id="隐式类型转换" tabindex="-1">隐式类型转换 <a class="header-anchor" href="#隐式类型转换" aria-label="Permalink to &quot;隐式类型转换&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;"> </span><span style="color:#6272A4;">// &#39;11&#39;   string 字符串连接</span></span>
<span class="line"><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;"> </span><span style="color:#6272A4;">//  0    number</span></span>
<span class="line"><span style="color:#FF79C6;">+</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#6272A4;">// 1   number</span></span>
<span class="line"><span style="color:#FF79C6;">-</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#6272A4;">// -1    number</span></span>
<span class="line"><span style="color:#FF79C6;">++</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#6272A4;">// SyntaxError</span></span>
<span class="line"><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;"> </span><span style="color:#6272A4;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;"> </span><span style="color:#6272A4;">// true</span></span>
<span class="line"><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;"> </span><span style="color:#6272A4;">// true</span></span>
<span class="line"><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;"> </span><span style="color:#6272A4;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> []     </span><span style="color:#6272A4;">// true</span></span>
<span class="line"><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">0</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// true</span></span>
<span class="line"><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">0</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> []   </span><span style="color:#6272A4;">// false</span></span>
<span class="line"><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;&quot;</span><span style="color:#F8F8F2;">     </span><span style="color:#6272A4;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&quot;&quot;</span><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// true</span></span>
<span class="line"><span style="color:#F8F8F2;">[] </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> []   </span><span style="color:#6272A4;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">undefined</span><span style="color:#F8F8F2;"> </span><span style="color:#6272A4;">// true</span></span>
<span class="line"><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">     </span><span style="color:#6272A4;">// false</span></span>
<span class="line"><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;&#39;</span><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// false</span></span>
<span class="line"></span></code></pre></div><p><a href="https://blog.csdn.net/qq_33120763/article/details/88296955" target="_blank" rel="noreferrer">参考链接</a></p><h2 id="提升" tabindex="-1">提升 <a class="header-anchor" href="#提升" aria-label="Permalink to &quot;提升&quot;">​</a></h2><p>提升有变量提升和函数提升</p><h3 id="变量提升" tabindex="-1">变量提升 <a class="header-anchor" href="#变量提升" aria-label="Permalink to &quot;变量提升&quot;">​</a></h3><p>变量提升，就是把变量提升到<strong>函数的顶部</strong>，只是提升变量的声明，不会把变量的值也提升上来</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">haha</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">changeName</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(name);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">xixi</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">changeName</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(name); </span><span style="color:#6272A4;">// haha</span></span>
<span class="line"></span></code></pre></div><p>提升后如下</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">haha</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">changeName</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(name);</span></span>
<span class="line"><span style="color:#F8F8F2;">  name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">xixi</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">changeName</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(name);</span></span>
<span class="line"></span></code></pre></div><h3 id="函数提升" tabindex="-1">函数提升 <a class="header-anchor" href="#函数提升" aria-label="Permalink to &quot;函数提升&quot;">​</a></h3><p>函数提升就是把函数提升到前面</p><p>在 JavaScript 中函数的创建方式有三种：函数声明（静态的）、函数表达式（函数字面量）、构造函数（动态的，匿名的）。</p><p>函数表达式的形式如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">fun1</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">n1</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">n2</span><span style="color:#F8F8F2;">) {};</span></span>
<span class="line"></span></code></pre></div><p>构造函数的形式如下:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> fun2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Function</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">param1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">param2</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><p>只有函数声明形式才能被真正提升，函数表达式形式提升的只是一个没有值的变量</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">g</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">g</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">我可以被提升</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(m); </span><span style="color:#6272A4;">// undefined</span></span>
<span class="line"><span style="color:#50FA7B;">m</span><span style="color:#F8F8F2;">(); </span><span style="color:#6272A4;">// TypeError: m is not a function，因为 m 是 undefined</span></span>
<span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">m</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span></code></pre></div><h2 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-label="Permalink to &quot;原型链&quot;">​</a></h2><p>在 js 中，每个函数都有一个<code>prototype</code>属性，这个属性指向函数的原型对象；</p><p>每个对象（null 除外）都有一个<code>__proto__</code>属性，这个属性指向该对象的原型；</p><p>每个原型都有一个<code>constructor</code>属性，指向关联的构造函数；</p><p>原型也是一个对象，所以也有原型。当我们访问一个对象的属性或方法时，会先在对象自身中寻找，如果找不到则在原型中寻找，如果还找不到，则继续在原型的原型中寻找， 以此类推，直到找到为止，若找不到则返回<code>undefined</code>，这就是原型链。</p><p>函数也有<code>__proto__</code>属性</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">fn</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {};</span></span>
<span class="line"><span style="color:#F8F8F2;">fn.__proto__ </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Function</span><span style="color:#F8F8F2;">.prototype; </span><span style="color:#6272A4;">// true</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(obj);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(obj.constructor.prototype </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> obj.__proto__); </span><span style="color:#6272A4;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Person</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#8BE9FD;font-style:italic;">Person</span><span style="color:#F8F8F2;">.prototype); </span><span style="color:#6272A4;">// {constructor: ƒ}</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Person</span><span style="color:#F8F8F2;">.prototype.age </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">23</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> person1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Person</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(person1); </span><span style="color:#6272A4;">// Person {name: &quot;zgh&quot;}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(person1.age); </span><span style="color:#6272A4;">// 23</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(person1.__proto__ </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Person</span><span style="color:#F8F8F2;">.prototype); </span><span style="color:#6272A4;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(Person </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Person</span><span style="color:#F8F8F2;">.prototype.constructor); </span><span style="color:#6272A4;">// true</span></span>
<span class="line"></span></code></pre></div><p>函数 Person 的 prototype 属性指向了一个对象，这个对象正是调用构造函数时创建的实例 person1 的原型</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>要获取原型推荐使用<code>Object.getPrototypeOf()</code>，不要使用<code>__proto__</code></p><p><code>Object.getPrototypeOf(obj) === obj.__proto__</code>为 true</p></div><h2 id="作用域" tabindex="-1">作用域 <a class="header-anchor" href="#作用域" aria-label="Permalink to &quot;作用域&quot;">​</a></h2><p>作用域指变量的有效范围。分为全局作用域、局部作用域、块级作用域。</p><h3 id="全局作用域" tabindex="-1">全局作用域 <a class="header-anchor" href="#全局作用域" aria-label="Permalink to &quot;全局作用域&quot;">​</a></h3><p>在全局作用域中：</p><ul><li>创建的变量都会作为<code>window</code>对象的属性保存</li><li>创建的函数都会作为<code>window</code>对象的方法保存</li></ul><h3 id="局部作用域" tabindex="-1">局部作用域 <a class="header-anchor" href="#局部作用域" aria-label="Permalink to &quot;局部作用域&quot;">​</a></h3><p>局部作用域在函数中创建，局部变量只能在函数中被访问</p><h3 id="块级作用域" tabindex="-1">块级作用域 <a class="header-anchor" href="#块级作用域" aria-label="Permalink to &quot;块级作用域&quot;">​</a></h3><p>变量只在所在的代码块内有效。ES6 增加的<code>let</code>、<code>const</code>可以声明块级作用域，可在 for 循环和 if 中使用</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(a); </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(b); </span><span style="color:#6272A4;">// ReferenceError: b is not defined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> c </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(c); </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> d </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(d); </span><span style="color:#6272A4;">// ReferenceError: d is not defined</span></span>
<span class="line"></span></code></pre></div><h3 id="作用域链" tabindex="-1">作用域链 <a class="header-anchor" href="#作用域链" aria-label="Permalink to &quot;作用域链&quot;">​</a></h3><p>当在函数作用域操作一个变量时，它会先在自身作用域中寻找，如果有就直接使用（就近原则）。如果没有则向上一级作用域中寻找，直到找到全局作用域； 如果全局作用域中依然没有找到，则会报错 <code>ReferenceError</code>。</p><p>在函数中要访问全局变量可以使用<code>window</code>对象。</p><h3 id="执行上下文" tabindex="-1">执行上下文 <a class="header-anchor" href="#执行上下文" aria-label="Permalink to &quot;执行上下文&quot;">​</a></h3><p>执行上下文是执行 JavaScript 代码的环境</p><h2 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h2><p>闭包就是能够读取其他函数内部变量的函数</p><p>如果一个函数 f()内部定义了一个函数 g()，并且 g()引用了 f()中的变量，那么函数 g()就是一个闭包</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">g</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    a </span><span style="color:#FF79C6;">+=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(a);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">g</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span></code></pre></div><p>优点：延长变量生命周期</p><p>缺点：造成内存泄漏</p><p>示例一、打印点击了哪个数字</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">/**</span></span>
<span class="line"><span style="color:#6272A4;">&lt;ul&gt;</span></span>
<span class="line"><span style="color:#6272A4;">    &lt;li&gt;1&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6272A4;">    &lt;li&gt;2&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6272A4;">    &lt;li&gt;3&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6272A4;">    &lt;li&gt;4&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6272A4;">    &lt;li&gt;5&lt;/li&gt;</span></span>
<span class="line"><span style="color:#6272A4;">&lt;/ul&gt;</span></span>
<span class="line"><span style="color:#6272A4;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> lis </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#50FA7B;">getElementsByTagName</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">li</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> lis.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  (</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">i</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    lis[i].</span><span style="color:#50FA7B;">onclick</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"><span style="color:#F8F8F2;">  })(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">//或者</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> lis.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  lis[i].onclick </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">i</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">    };</span></span>
<span class="line"><span style="color:#F8F8F2;">  })(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>如果不使用闭包将会一直打印出 5，使用闭包后正常显示，也可直接将<code>var</code>改为<code>let</code></p><p>示例二、每隔 1 秒输出 1~5</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">setTimeout</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">timer</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }, i </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1000</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>上面代码会输出 5 次 6，延迟函数的回调会在循环结束时才执行。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  (</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">j</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">setTimeout</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">timer</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(j);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }, j </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1000</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  })(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>在迭代内使用<code>IIFE</code>会为每个迭代都生成一个新的作用域，使得延迟函数的回调函数可以将新的作用域封闭在每个迭代的内部， 每个迭代中都会有一个正确的变量值供我们访问。</p><p>还有一种更方便的方式，就是使用块作用域，将<code>var</code>换成<code>let</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">setTimeout</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">timer</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }, i </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1000</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="this-指向" tabindex="-1">this 指向 <a class="header-anchor" href="#this-指向" aria-label="Permalink to &quot;this 指向&quot;">​</a></h2><h3 id="全局执行" tabindex="-1">全局执行 <a class="header-anchor" href="#全局执行" aria-label="Permalink to &quot;全局执行&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">//  window</span></span>
<span class="line"></span></code></pre></div><h3 id="函数中执行" tabindex="-1">函数中执行 <a class="header-anchor" href="#函数中执行" aria-label="Permalink to &quot;函数中执行&quot;">​</a></h3><h4 id="_1、标准模式" tabindex="-1">1、标准模式 <a class="header-anchor" href="#_1、标准模式" aria-label="Permalink to &quot;1、标准模式&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// window</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span></code></pre></div><h4 id="_2、严格模式" tabindex="-1">2、严格模式 <a class="header-anchor" href="#_2、严格模式" aria-label="Permalink to &quot;2、严格模式&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">use strict</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span></code></pre></div><h3 id="作为对象的方法调用" tabindex="-1">作为对象的方法调用 <a class="header-anchor" href="#作为对象的方法调用" aria-label="Permalink to &quot;作为对象的方法调用&quot;">​</a></h3><p>this 指向当前对象 obj</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">fun</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.name); </span><span style="color:#6272A4;">// zgh</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#F8F8F2;">obj.</span><span style="color:#50FA7B;">fun</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span></code></pre></div><p>如果把对象方法赋值给变量，调用该方法时，this 指向 <code>window</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> dd </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">js</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">; </span><span style="color:#6272A4;">// 若 var dd = &#39;js&#39;,则 this.dd结果为 js</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  dd</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">fun</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.dd); </span><span style="color:#6272A4;">// undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> res </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> obj.fun;</span></span>
<span class="line"><span style="color:#50FA7B;">res</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span></code></pre></div><h3 id="作为构造函数调用" tabindex="-1">作为构造函数调用 <a class="header-anchor" href="#作为构造函数调用" aria-label="Permalink to &quot;作为构造函数调用&quot;">​</a></h3><p>在调用一个构造函数时加上 <code>new</code> 关键字，此时 <code>this</code> 指向这个构造函数调用时实例化出来的对象</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> name;</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// f {name: &quot;zgh&quot;}</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> res </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> res); </span><span style="color:#6272A4;">// object</span></span>
<span class="line"></span></code></pre></div><h3 id="定时器中使用" tabindex="-1">定时器中使用 <a class="header-anchor" href="#定时器中使用" aria-label="Permalink to &quot;定时器中使用&quot;">​</a></h3><p>js 中的定时器都是定义在 <code>window</code> 下的，所以二者都是指向 <code>window</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">setInterval</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// window</span></span>
<span class="line"><span style="color:#F8F8F2;">}, </span><span style="color:#BD93F9;">2000</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#50FA7B;">setTimeout</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">g</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// window</span></span>
<span class="line"><span style="color:#F8F8F2;">}, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><h3 id="箭头函数中使用" tabindex="-1">箭头函数中使用 <a class="header-anchor" href="#箭头函数中使用" aria-label="Permalink to &quot;箭头函数中使用&quot;">​</a></h3><p>箭头函数中<code>this</code>的值取决于该函数外部非箭头函数的<code>this</code>的值，即外层（函数或者全局）作用域来决定<code>this</code>， 且不能通过 <code>call</code>、<code>apply</code> 和 <code>bind</code> 方法来改变 <code>this</code> 的值。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { val</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">fun</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// window</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#F8F8F2;">fun.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(obj);</span></span>
<span class="line"></span></code></pre></div><p>全局调用指向 <code>window</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">fun</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// window</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#50FA7B;">fun</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span></code></pre></div><p>作为对象的方法调用，this 指向 <code>window</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> obj1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  age</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">23</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">fun</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// window</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#F8F8F2;">obj1.</span><span style="color:#50FA7B;">fun</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> obj2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  age</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">23</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">fun</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// {age: 23, fun: ƒ}</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#F8F8F2;">obj2.</span><span style="color:#50FA7B;">fun</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 推荐使用方法简写</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> obj3 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  age</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">23</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">fun</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// {age: 23, fun: ƒ}</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#F8F8F2;">obj3.</span><span style="color:#50FA7B;">fun</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span></code></pre></div><p>箭头函数作为定时器延时执行的函数调用，this 指向定义时所在的对象</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">fun</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// obj</span></span>
<span class="line"><span style="color:#F8F8F2;">    }, </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// setTimeout(function() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// console.log(this);  // window</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// },0)</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#F8F8F2;">obj.</span><span style="color:#50FA7B;">fun</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span></code></pre></div><h4 id="小测试" tabindex="-1">小测试 <a class="header-anchor" href="#小测试" aria-label="Permalink to &quot;小测试&quot;">​</a></h4><p>1、输出结果</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> user </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">go</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.name);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}(user.go)();</span></span>
<span class="line"></span></code></pre></div><p>结果：ReferenceError</p><p>解析：js 不会在括号(user.go)() 的前面添加分号；所以解析成了</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> user </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { go</span><span style="color:#FF79C6;">:...</span><span style="color:#F8F8F2;"> }(user.go)()</span></span>
<span class="line"></span></code></pre></div><p>在语法构成上，把对象 { go: ... } 作为一个方法调用，并且传递的参数为 (user.go)。并且让 let user 在同一行赋值，因此 user 没被定义（之前）就会出现错误。 在 user 对象的后面加上分号<code>；</code>就可以了</p><p>2、输出结果</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">setUser</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> { cool</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, ref</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> user </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">setUser</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(user.ref.cool);</span></span>
<span class="line"></span></code></pre></div><p>结果： undefined</p><p>解析：</p><p>这是因为设置的 this 的规则并没有找到对象字面量。</p><p>这里 <code>setUser()</code> 中的 this 值是 <code>undefined</code>，因为它是被作为函数调用的，而不是方法调用。</p><p>对象字面量本身对于 this 没有影响。this 的值是整个函数，代码段和对象字面量对它没有影响。</p><p>所以，<code>ref: this</code> 实际上取的是该函数当前的 this。打印 <code>user.ref</code> 结果是<code>window</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">setUser</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    cool</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">ref</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> user </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">setUser</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(user.</span><span style="color:#50FA7B;">ref</span><span style="color:#F8F8F2;">().cool); </span><span style="color:#6272A4;">// zgh</span></span>
<span class="line"></span></code></pre></div><p>此处 <code>user.ref()</code> 是一个方法，this 指向 user 对象</p><h2 id="bind、call、apply" tabindex="-1">bind、call、apply <a class="header-anchor" href="#bind、call、apply" aria-label="Permalink to &quot;bind、call、apply&quot;">​</a></h2><p>三者都能改变 <code>this</code> 的指向</p><p><code>call</code> 接收的是一个参数列表，<code>apply</code> 接收的是一个参数数组</p><p><code>bind</code> 接收的也是一个参数列表，返回一个新的函数，必须调用才会执行</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { value</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">getValue</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">age</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(name);</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(age);</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.value); </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">getValue.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(a, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">23</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// this指向a</span></span>
<span class="line"><span style="color:#F8F8F2;">getValue.</span><span style="color:#50FA7B;">apply</span><span style="color:#F8F8F2;">(a, [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">23</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"><span style="color:#F8F8F2;">getValue.</span><span style="color:#50FA7B;">bind</span><span style="color:#F8F8F2;">(a, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">23</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)();</span></span>
<span class="line"></span></code></pre></div><h2 id="iife" tabindex="-1">IIFE <a class="header-anchor" href="#iife" aria-label="Permalink to &quot;IIFE&quot;">​</a></h2><h3 id="立即执行函数表达式" tabindex="-1">立即执行函数表达式 <a class="header-anchor" href="#立即执行函数表达式" aria-label="Permalink to &quot;立即执行函数表达式&quot;">​</a></h3><p>IIFE（Immediately-invoked function expression）</p><p>目的是为了隔离作用域，防止污染全局作用域</p><h4 id="方式一" tabindex="-1">方式一 <a class="header-anchor" href="#方式一" aria-label="Permalink to &quot;方式一&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(x); </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#F8F8F2;">})(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><h4 id="方式二" tabindex="-1">方式二 <a class="header-anchor" href="#方式二" aria-label="Permalink to &quot;方式二&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">g</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(x); </span><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#F8F8F2;">})(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">2</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><p>示例</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> iife </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">})();</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(iife); </span><span style="color:#6272A4;">// Uncaught ReferenceError: iife is not defined</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> res </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> fe </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">hehe</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> fe;</span></span>
<span class="line"><span style="color:#F8F8F2;">})();</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(res); </span><span style="color:#6272A4;">// hehe</span></span>
<span class="line"></span></code></pre></div><h2 id="深拷贝、浅拷贝" tabindex="-1">深拷贝、浅拷贝 <a class="header-anchor" href="#深拷贝、浅拷贝" aria-label="Permalink to &quot;深拷贝、浅拷贝&quot;">​</a></h2><p>浅拷贝：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> };</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">shallowClone</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> newObj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> obj) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    newObj[i] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> obj[i];</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> newObj;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">shallowClone</span><span style="color:#F8F8F2;">(obj); </span><span style="color:#6272A4;">// {name: &quot;zgh&quot;}</span></span>
<span class="line"></span></code></pre></div><p>深拷贝：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">deepClone</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">object</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> res </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> obj.constructor </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> Array </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> [] </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {};</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> obj) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      res[i] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> obj[i] </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">object</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">?</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">deepClone</span><span style="color:#F8F8F2;">(obj[i]) </span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> obj[i];</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> res </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> obj;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> obj;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p><code>JSON.parse(JSON.stringify())</code>就是有一些局限性的深拷贝</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">, { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> }];</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> newArr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">parse</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">JSON</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">stringify</span><span style="color:#F8F8F2;">(arr));</span></span>
<span class="line"><span style="color:#F8F8F2;">newArr[</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">].name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">lrx</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(newArr); </span><span style="color:#6272A4;">// [1, 2, { name: &#39;lrx&#39; }]</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(arr); </span><span style="color:#6272A4;">// [1, 2, { name: &#39;zgh&#39; }]]</span></span>
<span class="line"></span></code></pre></div><p><a href="https://juejin.im/post/59ac1c4ef265da248e75892b" target="_blank" rel="noreferrer">https://juejin.im/post/59ac1c4ef265da248e75892b</a></p><p><a href="https://www.cnblogs.com/echolun/p/7889848.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/echolun/p/7889848.html</a></p><p>如何区分深拷贝与浅拷贝？</p><p>简单来说，就是假设 B 复制了 A，当修改 A 时，看 B 是否会发生变化，如果 B 也跟着变了，说明这是浅拷贝，如果 B 没变，那就是深拷贝</p><p>区别：浅拷贝只复制对象的第一层属性、深拷贝可以对对象的属性进行递归复制</p><p>浅拷贝是将原始对象中的数据型字段拷贝到新对象中去，将引用型字段的“引用”复制到新对象中去，不把“引用的对象”复制进去， 所以原始对象和新对象引用同一对象，新对象中的引用型字段发生变化会导致原始对象中的对应字段也发生变化。</p><p>深拷贝是在引用方面不同，深拷贝就是创建一个新的和原始字段的内容相同的字段，是两个一样大的数据段，所以两者的引用是不同的， 之后的新对象中的引用型字段发生改变，不会引起原始对象中的字段发生改变。</p><h2 id="节流和防抖" tabindex="-1">节流和防抖 <a class="header-anchor" href="#节流和防抖" aria-label="Permalink to &quot;节流和防抖&quot;">​</a></h2><h3 id="防抖" tabindex="-1">防抖 <a class="header-anchor" href="#防抖" aria-label="Permalink to &quot;防抖&quot;">​</a></h3><p><strong>事件在被触发 n 秒后执行回调函数，如果在这 n 秒内事件又被触发，则重新计时。</strong> 即在规定时间内未触发第二次，则执行回调函数</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">input</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">type</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">text</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">id</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">my-input</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> inp </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#50FA7B;">getElementById</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">my-input</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">ajaxTest</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(a);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  inp.</span><span style="color:#50FA7B;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">keyup</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">ajaxTest</span><span style="color:#F8F8F2;">(e.target.value);</span></span>
<span class="line"><span style="color:#F8F8F2;">  });</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>需求是在输入框中输入结束再去执行请求，但是示例中在没有输入结束就发出多次请求，浪费资源。</p><p>使用防抖</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">ajaxTest</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(a);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">debounce</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">fn</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">delay</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> timer </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">clearTimeout</span><span style="color:#F8F8F2;">(timer);</span></span>
<span class="line"><span style="color:#F8F8F2;">    timer </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      fn.</span><span style="color:#50FA7B;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;font-style:italic;">arguments</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }, delay);</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> debounceAjax </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">debounce</span><span style="color:#F8F8F2;">(ajaxTest, </span><span style="color:#BD93F9;">500</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> inp </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#50FA7B;">getElementById</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">my-input</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">inp.</span><span style="color:#50FA7B;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">keyup</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">debounceAjax</span><span style="color:#F8F8F2;">(e.target.value);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><p>使用防抖后，当用户在频繁的输入时，并不会发送请求，只有当用户在指定间隔内没有输入时，才会执行函数。如果停止输入但是在指定间隔内又输入，会重新触发计时。</p><h3 id="节流" tabindex="-1">节流 <a class="header-anchor" href="#节流" aria-label="Permalink to &quot;节流&quot;">​</a></h3><p><strong>在规定时间内多次触发函数，只有第一次有效。</strong></p><p>时间戳版</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">throttle</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">func</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">delay</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> last </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> now </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> Date.</span><span style="color:#50FA7B;">now</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (now </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> last </span><span style="color:#FF79C6;">&gt;=</span><span style="color:#F8F8F2;"> delay) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      func.</span><span style="color:#50FA7B;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;font-style:italic;">arguments</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">      last </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> now;</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">距离上次调用的时间差不满足要求</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">ajaxTest</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(a);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> throttleAjax </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">throttle</span><span style="color:#F8F8F2;">(ajaxTest, </span><span style="color:#BD93F9;">1000</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 函数在每 1s 内执行一次</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> inputs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#50FA7B;">getElementById</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">my-input</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">inputs.</span><span style="color:#50FA7B;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">keyup</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">throttleAjax</span><span style="color:#F8F8F2;">(e.target.value);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><p>定时器版</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">throttle</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">fun</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">delay</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> last, deferTimer;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">args</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> that </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> _args </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">arguments</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> now </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">+</span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Date</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">clearTimeout</span><span style="color:#F8F8F2;">(deferTimer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (last </span><span style="color:#FF79C6;">&amp;&amp;</span><span style="color:#F8F8F2;"> now </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> last </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> delay) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      deferTimer </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">setTimeout</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">        last </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> now;</span></span>
<span class="line"><span style="color:#F8F8F2;">        fun.</span><span style="color:#50FA7B;">apply</span><span style="color:#F8F8F2;">(that, _args);</span></span>
<span class="line"><span style="color:#F8F8F2;">      }, delay);</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      last </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> now;</span></span>
<span class="line"><span style="color:#F8F8F2;">      fun.</span><span style="color:#50FA7B;">apply</span><span style="color:#F8F8F2;">(that, _args);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><p>防抖：</p><ul><li>搜索</li></ul><p>节流：</p><ul><li>上拉加载</li><li>下拉刷新</li><li>鼠标快速多次触发事件</li></ul><h2 id="递归" tabindex="-1">递归 <a class="header-anchor" href="#递归" aria-label="Permalink to &quot;递归&quot;">​</a></h2><p>在一个函数定义的内部调用自身就是递归</p><p>要注意界限值，不要无限递归，存在堆栈溢出的风险。函数调用会使用栈来保存临时变量，每调用一次函数， 都会将临时变量存入栈中，函数执行完成后才出栈，如果调用层次很深，就会有堆栈溢出的风险</p><ul><li>求 5 的累加</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">n</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (n </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">(n </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> n;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">5</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"></span></code></pre></div><ul><li>斐波那契数列</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n&gt;=3，n∈N*）</span></span>
<span class="line"><span style="color:#6272A4;">//1,1,2,3,5,8,13,21......</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">n</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (n </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> n </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">(n </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">(n </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"></span></code></pre></div><h2 id="函数柯里化" tabindex="-1">函数柯里化 <a class="header-anchor" href="#函数柯里化" aria-label="Permalink to &quot;函数柯里化&quot;">​</a></h2><p>柯里化（Currying）是把一个多参数的函数，转变为单一参数的函数</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">y</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> y;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">f</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">g</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">x</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">y</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> x </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> y;</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">g</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">)(</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><p>示例：实现 <code>add(1)(2)(3) =&gt; 6</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">a</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">sum</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">b</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// 使用闭包</span></span>
<span class="line"><span style="color:#F8F8F2;">    a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> b; </span><span style="color:#6272A4;">// 累加</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> sum;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  sum.</span><span style="color:#50FA7B;">toString</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// 重写toSting() 方法</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> a;</span></span>
<span class="line"><span style="color:#F8F8F2;">  };</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> sum; </span><span style="color:#6272A4;">// 返回一个函数</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#50FA7B;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">)(</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">)(</span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><h2 id="math-floor、math-round、math-ceil" tabindex="-1">Math.floor、Math.round、Math.ceil <a class="header-anchor" href="#math-floor、math-round、math-ceil" aria-label="Permalink to &quot;Math.floor、Math.round、Math.ceil&quot;">​</a></h2><ul><li><code>Math.round</code> 四舍五入取整</li><li><code>Math.ceil</code> 向上取整</li><li><code>Math.floor</code> 向下取整</li><li><code>Math.random</code> 取<code>[0,1)</code>的随机小数</li><li><code>Math.abs(x)</code> 取 x 的绝对值</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">Math.</span><span style="color:#50FA7B;">round</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1.23</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#F8F8F2;">Math.</span><span style="color:#50FA7B;">round</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1.78</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#F8F8F2;">Math.</span><span style="color:#50FA7B;">round</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1.23</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// -1</span></span>
<span class="line"><span style="color:#F8F8F2;">Math.</span><span style="color:#50FA7B;">round</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1.78</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// -2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Math.</span><span style="color:#50FA7B;">ceil</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1.23</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#F8F8F2;">Math.</span><span style="color:#50FA7B;">ceil</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1.78</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#F8F8F2;">Math.</span><span style="color:#50FA7B;">ceil</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1.23</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// -1</span></span>
<span class="line"><span style="color:#F8F8F2;">Math.</span><span style="color:#50FA7B;">ceil</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1.78</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// -1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Math.</span><span style="color:#50FA7B;">floor</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1.23</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#F8F8F2;">Math.</span><span style="color:#50FA7B;">floor</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1.78</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"><span style="color:#F8F8F2;">Math.</span><span style="color:#50FA7B;">floor</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1.23</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// -2</span></span>
<span class="line"><span style="color:#F8F8F2;">Math.</span><span style="color:#50FA7B;">floor</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1.78</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// -2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 获取[n,m]之间的随机整数</span></span>
<span class="line"><span style="color:#F8F8F2;">Math.</span><span style="color:#50FA7B;">round</span><span style="color:#F8F8F2;">(Math.</span><span style="color:#50FA7B;">random</span><span style="color:#F8F8F2;">() </span><span style="color:#FF79C6;">*</span><span style="color:#F8F8F2;"> (m </span><span style="color:#FF79C6;">-</span><span style="color:#F8F8F2;"> n) </span><span style="color:#FF79C6;">+</span><span style="color:#F8F8F2;"> n);</span></span>
<span class="line"></span></code></pre></div><p>由于 js 数字精度的问题，当位数太多时会有误差</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> c </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">2.999999999999999999999999999999</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">Math.</span><span style="color:#50FA7B;">floor</span><span style="color:#F8F8F2;">(c); </span><span style="color:#6272A4;">// 3</span></span>
<span class="line"></span></code></pre></div><h2 id="for-循环" tabindex="-1">for 循环 <a class="header-anchor" href="#for-循环" aria-label="Permalink to &quot;for 循环&quot;">​</a></h2><h3 id="遍历数组" tabindex="-1">遍历数组 <a class="header-anchor" href="#遍历数组" aria-label="Permalink to &quot;遍历数组&quot;">​</a></h3><ul><li><code>for</code> 循环，数组下标的类型是<code>number</code></li><li><code>forEach</code>，没有返回值</li><li><code>map</code></li><li><code>for of</code>，推荐</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> arr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">22</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">180</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;">125</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">, len </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> arr.length; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> len; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> i); </span><span style="color:#6272A4;">// number</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> m </span><span style="color:#FF79C6;">of</span><span style="color:#F8F8F2;"> arr) {</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> k </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> arr) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(k); </span><span style="color:#6272A4;">// 0 1 2 3，返回的是数组下标</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">typeof</span><span style="color:#F8F8F2;"> k); </span><span style="color:#6272A4;">// string</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="遍历对象" tabindex="-1">遍历对象 <a class="header-anchor" href="#遍历对象" aria-label="Permalink to &quot;遍历对象&quot;">​</a></h3><p><code>for in</code> 循环遍历键名，遍历数组下标的类型是<code>string</code>，不要使用这种方式遍历数组！仅适用于遍历普通对象的 key</p><p><code>for</code>循环 无法用于循环对象，获取不到<code>obj.length</code></p><p><code>for in</code>循环遍历对象的属性时，原型链上的所有属性都将被访问，可以使用<code>hasOwnProperty</code>方法过滤或<code>Object.keys</code>会返回自身可枚举属性组成的数组</p><h3 id="while" tabindex="-1">while <a class="header-anchor" href="#while" aria-label="Permalink to &quot;while&quot;">​</a></h3><p>只要条件为 true，while 会一直循环执行代码块</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">10</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">  i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>do/while 循环，会先执行一次 do 里面的代码块，如果条件为真，会继续循环执行</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">do</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(i);</span></span>
<span class="line"><span style="color:#F8F8F2;">  i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#FF79C6;">while</span><span style="color:#F8F8F2;"> (i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">10</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span></code></pre></div><h2 id="not-defined-和-undefined" tabindex="-1">not defined 和 undefined <a class="header-anchor" href="#not-defined-和-undefined" aria-label="Permalink to &quot;not defined 和 undefined&quot;">​</a></h2><p>如果定义了一个变量，但未赋值，则是<code>undefined</code>; 如果未定义，则是<code>not defined</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> a;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(a); </span><span style="color:#6272A4;">// undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(b); </span><span style="color:#6272A4;">// b is not defined</span></span>
<span class="line"></span></code></pre></div><h2 id="锚点链接" tabindex="-1">锚点链接 <a class="header-anchor" href="#锚点链接" aria-label="Permalink to &quot;锚点链接&quot;">​</a></h2><p>实现地址栏变化，页面不刷新</p><h3 id="页面内的跳转" tabindex="-1">页面内的跳转 <a class="header-anchor" href="#页面内的跳转" aria-label="Permalink to &quot;页面内的跳转&quot;">​</a></h3><p>方法一、</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">&lt;!--设置一个锚点链接--&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">a</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">href</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">#zgh</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;zgh&lt;/</span><span style="color:#FF79C6;">a</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">&lt;!--在页面中需要的位置设置锚点--&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">a</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">name</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;haha&lt;/</span><span style="color:#FF79C6;">a</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>方法二、</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">&lt;!--设置一个锚点链接--&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">a</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">href</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">#zgh</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;zgh&lt;/</span><span style="color:#FF79C6;">a</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">&lt;!--在页面中需要的位置设置锚点--&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">h3</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">id</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">zgh</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;hahha&lt;/</span><span style="color:#FF79C6;">h3</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="跨页面跳转" tabindex="-1">跨页面跳转 <a class="header-anchor" href="#跨页面跳转" aria-label="Permalink to &quot;跨页面跳转&quot;">​</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">&lt;!--设置锚点链接--&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">a</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">href</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">demo.html#zgh</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;zgh&lt;/</span><span style="color:#FF79C6;">a</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">&lt;!--在要跳转的页面设置锚点--&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">a</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">href</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">#zgh</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;zgh&lt;/</span><span style="color:#FF79C6;">a</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="千位分割符" tabindex="-1">千位分割符 <a class="header-anchor" href="#千位分割符" aria-label="Permalink to &quot;千位分割符&quot;">​</a></h2><p><code>toLocaleString()</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">386485473.88</span><span style="color:#F8F8F2;">).</span><span style="color:#50FA7B;">toLocaleString</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">en-US</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// 386,485,473.88</span></span>
<span class="line"></span></code></pre></div><p>小数部分会根据四舍五入只留下三位</p><h2 id="表达式和运算符" tabindex="-1">表达式和运算符 <a class="header-anchor" href="#表达式和运算符" aria-label="Permalink to &quot;表达式和运算符&quot;">​</a></h2><h3 id="自增" tabindex="-1">自增 <a class="header-anchor" href="#自增" aria-label="Permalink to &quot;自增&quot;">​</a></h3><p>前置自增，先执行后运算</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> a</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(a); </span><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(b); </span><span style="color:#6272A4;">// 1</span></span>
<span class="line"></span></code></pre></div><p>后置自增，先运算后执行</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> b </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">a;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(a); </span><span style="color:#6272A4;">// 2</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(b); </span><span style="color:#6272A4;">// 2</span></span>
<span class="line"></span></code></pre></div><h2 id="禁用网页中的单击右键" tabindex="-1">禁用网页中的单击右键 <a class="header-anchor" href="#禁用网页中的单击右键" aria-label="Permalink to &quot;禁用网页中的单击右键&quot;">​</a></h2><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">body</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">oncontextmenu</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#FF79C6;">return</span><span style="color:#F1FA8C;"> </span><span style="color:#BD93F9;">false</span><span style="color:#F1FA8C;">;</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF79C6;">body</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="更改网页标题" tabindex="-1">更改网页标题 <a class="header-anchor" href="#更改网页标题" aria-label="Permalink to &quot;更改网页标题&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// 获取标题</span></span>
<span class="line"><span style="color:#F8F8F2;">document.title;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 更改标题</span></span>
<span class="line"><span style="color:#F8F8F2;">document.title </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">hello world</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span></code></pre></div><h2 id="全屏事件" tabindex="-1">全屏事件 <a class="header-anchor" href="#全屏事件" aria-label="Permalink to &quot;全屏事件&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">requestFullscreen</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">el</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (el.requestFullscreen) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    el.</span><span style="color:#50FA7B;">requestFullscreen</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (el.msRequestFullscreen) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    el.</span><span style="color:#50FA7B;">msRequestFullscreen</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (el.mozRequestFullScreen) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    el.</span><span style="color:#50FA7B;">mozRequestFullScreen</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (el.webkitRequestFullscreen) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    el.</span><span style="color:#50FA7B;">webkitRequestFullscreen</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">no Fullscreen Support</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">exitFullscreen</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (document.exitFullscreen) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    document.</span><span style="color:#50FA7B;">exitFullscreen</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (document.webkitExitFullscreen) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    document.</span><span style="color:#50FA7B;">webkitExitFullscreen</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (document.msExitFullscreen) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    document.</span><span style="color:#50FA7B;">msExitFullscreen</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (document.mozCancelFullScreen) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    document.</span><span style="color:#50FA7B;">mozCancelFullScreen</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">  } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">no Fullscreen Support</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>监听 ESC 键，退出全屏。vue 中可以写在 mounted 生命周期内</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// W3C</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#50FA7B;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">fullscreenchange</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">document.fullscreenElement) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.isFullScreen </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#6272A4;">// webkit</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#50FA7B;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">webkitfullscreenchange</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">e.currentTarget.webkitIsFullScreen) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.isFullScreen </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#6272A4;">// IE</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#50FA7B;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">MSFullscreenChange</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">document.msFullscreenElement) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.isFullScreen </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#6272A4;">// firefox</span></span>
<span class="line"><span style="color:#F8F8F2;">document.</span><span style="color:#50FA7B;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">mozfullscreenchange</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">document.mozFullScreenElement) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.isFullScreen </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div><h2 id="将十进制转为二进制或十六进制" tabindex="-1">将十进制转为二进制或十六进制 <a class="header-anchor" href="#将十进制转为二进制或十六进制" aria-label="Permalink to &quot;将十进制转为二进制或十六进制&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toString" target="_blank" rel="noreferrer">Number.prototype.toString()</a></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> num </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">10</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">num.</span><span style="color:#50FA7B;">toString</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">2</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// &quot;1010&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">num.</span><span style="color:#50FA7B;">toString</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">16</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// &quot;a&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">num.</span><span style="color:#50FA7B;">toString</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">8</span><span style="color:#F8F8F2;">); </span><span style="color:#6272A4;">// &quot;12&quot;</span></span>
<span class="line"></span></code></pre></div><h2 id="谷歌浏览器监听三次点击" tabindex="-1">谷歌浏览器监听三次点击 <a class="header-anchor" href="#谷歌浏览器监听三次点击" aria-label="Permalink to &quot;谷歌浏览器监听三次点击&quot;">​</a></h2><p>监听 click 事件，detail 为 3 就是三击</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// &lt;button id=&#39;btn&#39;&gt;click&lt;/button&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> dom </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#50FA7B;">querySelector</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">#btn</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">dom.</span><span style="color:#50FA7B;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">click</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, (</span><span style="color:#FFB86C;font-style:italic;">evt</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (evt.detail </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    window.</span><span style="color:#50FA7B;">open</span><span style="color:#F8F8F2;">(url.href, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">_blank</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span></code></pre></div>`,264),F=[o];function e(c,t,r,y,i,d){return a(),n("div",null,F)}const h=s(p,[["render",e]]);export{C as __pageData,h as default};
