import{_ as n,c as a,x as l,t as p,Q as s,o}from"./chunks/framework.f14b72c3.js";const h=JSON.parse('{"title":"Vue","description":"","frontmatter":{},"headers":[],"relativePath":"fe/vue/index.md","lastUpdated":1681829744000}'),F={name:"fe/vue/index.md"},e=s(`<h1 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;Vue&quot;">​</a></h1><h2 id="data-为何声明为函数" tabindex="-1">data 为何声明为函数 <a class="header-anchor" href="#data-为何声明为函数" aria-label="Permalink to &quot;data 为何声明为函数&quot;">​</a></h2><p>因为组件可能被用来创建多个实例，若 data 声明为对象则所有的实例将共享引用同一个数据对象</p><p>data 声明为函数则每次创建一个新实例后，调用 data 函数会返回初始数据的一个全新副本数据对象</p><p>data 声明为对象：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">VueComponent</span><span style="color:#F8F8F2;">() {}</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">VueComponent</span><span style="color:#F8F8F2;">.prototype.$options </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  data</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Vue</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> f1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">VueComponent</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">f1.$options.data.name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">React</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> f2 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">VueComponent</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(f2.$options.data.name) </span><span style="color:#6272A4;">// React</span></span>
<span class="line"></span></code></pre></div><p>data 声明为函数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">VueComponent</span><span style="color:#F8F8F2;">() {}</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">VueComponent</span><span style="color:#F8F8F2;">.prototype.$options </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">data</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> ({ name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">Vue</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> })</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> f11 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">VueComponent</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> res1 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> f11.$options.</span><span style="color:#50FA7B;">data</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">res1.name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">React</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(res1) </span><span style="color:#6272A4;">// {name: &quot;React&quot;}</span></span>
<span class="line"><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> f22 </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">VueComponent</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(f22.$options.</span><span style="color:#50FA7B;">data</span><span style="color:#F8F8F2;">()) </span><span style="color:#6272A4;">// {name: &quot;Vue&quot;}</span></span>
<span class="line"></span></code></pre></div><p><code>new Vue()</code>可以将<code>data</code>声明为一个普通对象是因为这个类创建的实例不会被复用，只会 new 一次。 而<code>App.vue</code>同样是因为整个系统中<code>App.vue</code>只会被使用一次，所以不存在上述的问题。</p><h2 id="v-if-和-v-show-区别" tabindex="-1">v-if 和 v-show 区别 <a class="header-anchor" href="#v-if-和-v-show-区别" aria-label="Permalink to &quot;v-if 和 v-show 区别&quot;">​</a></h2><p><code>v-if</code>是真正的条件渲染，会有性能开销，每次插入或者移除元素时都必须要生成元素内部的 DOM 树</p><p><code>v-show</code>则不管条件是什么都会渲染元素，基于<code>display:none</code>显示隐藏</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。 因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好</p><h2 id="v-model-原理" tabindex="-1">v-model 原理 <a class="header-anchor" href="#v-model-原理" aria-label="Permalink to &quot;v-model 原理&quot;">​</a></h2><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">input</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">placeholder</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">请输入</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">id</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">username</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">内容：</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">span</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">id</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">uName</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF79C6;">span</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#F8F8F2;">  Object.</span><span style="color:#50FA7B;">defineProperty</span><span style="color:#F8F8F2;">(obj, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">username</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">this</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">val</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      document.</span><span style="color:#50FA7B;">getElementById</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">uName</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">).innerText </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> val</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> el </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#50FA7B;">getElementById</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">username</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">  el.</span><span style="color:#50FA7B;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">keyup</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    obj.username </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> event.target.value</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="双向数据绑定原理" tabindex="-1">双向数据绑定原理 <a class="header-anchor" href="#双向数据绑定原理" aria-label="Permalink to &quot;双向数据绑定原理&quot;">​</a></h2><h3 id="_1、双向绑定原理" tabindex="-1">1、双向绑定原理 <a class="header-anchor" href="#_1、双向绑定原理" aria-label="Permalink to &quot;1、双向绑定原理&quot;">​</a></h3><p>vue2 是采用<strong>数据劫持</strong>结合<strong>发布者-订阅者模式</strong>，通过<code>Object.defineProperty()</code>来劫持各个属性的<code>setter</code>、<code>getter</code>，在数据变动时发布消息给订阅者，触发响应的监听回调。</p><h3 id="_2、object-defineproperty" tabindex="-1">2、Object.defineProperty() <a class="header-anchor" href="#_2、object-defineproperty" aria-label="Permalink to &quot;2、Object.defineProperty()&quot;">​</a></h3><p><code>Object.defineProperty()</code>方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。</p><p>语法：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">Object.defineProperty(obj, </span><span style="color:#F1FA8C;">prop,</span><span style="color:#F8F8F2;"> </span><span style="color:#F1FA8C;">descriptor</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"></span></code></pre></div><p>参数:</p><ul><li>obj 要在其上定义属性的对象。</li><li>prop 要定义或修改的属性的名称。</li><li>descriptor 将被定义或修改的属性描述符。</li></ul><p>返回值: 被传递给函数的对象。</p><p>MDN 地址： <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noreferrer">Object.defineProperty() </a></p><h3 id="_3、如何实现" tabindex="-1">3、如何实现 <a class="header-anchor" href="#_3、如何实现" aria-label="Permalink to &quot;3、如何实现&quot;">​</a></h3><p><img src="https://zghimg.oss-cn-beijing.aliyuncs.com/blog/1666418273.png" alt="image"></p><p><code>observer</code> 用来实现对每个组件中的 data 中定义的属性，循环用<code>Object.defineProperty()</code>实现数据劫持，以便利用其中的 setter 和 getter，然后通知订阅者，订阅者会触发它的 update 方法，对视图进行更新。</p><h3 id="_4、代码实现" tabindex="-1">4、代码实现 <a class="header-anchor" href="#_4、代码实现" aria-label="Permalink to &quot;4、代码实现&quot;">​</a></h3><p>4.1 observer 实现，主要是给每个 vue 的属性用 <code>Object.defineProperty()</code>，代码如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">defineReactive</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">val</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> dep </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Dep</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  Object.</span><span style="color:#50FA7B;">defineProperty</span><span style="color:#F8F8F2;">(obj, key, {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#6272A4;">//添加订阅者watcher到主题对象Dep</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (Dep.target) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#6272A4;">// JS的浏览器单线程特性，保证这个全局变量在同一时间内，只会有同一个监听器使用</span></span>
<span class="line"><span style="color:#F8F8F2;">        dep.</span><span style="color:#50FA7B;">addSub</span><span style="color:#F8F8F2;">(Dep.target)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> val</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">newVal</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (newVal </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> val) </span><span style="color:#FF79C6;">return</span></span>
<span class="line"><span style="color:#F8F8F2;">      val </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> newVal</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#6272A4;">// 作为发布者发出通知</span></span>
<span class="line"><span style="color:#F8F8F2;">      dep.</span><span style="color:#50FA7B;">notify</span><span style="color:#F8F8F2;">() </span><span style="color:#6272A4;">// 通知后dep会循环调用各自的update方法更新视图</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">observe</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">obj</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">vm</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  Object.</span><span style="color:#50FA7B;">keys</span><span style="color:#F8F8F2;">(obj).</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">defineReactive</span><span style="color:#F8F8F2;">(vm, key, obj[key])</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>4.2 实现 compile</p><p>compile 的目的就是解析各种指令成为真正的 html</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Compile</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">node</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">vm</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (node) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.$frag </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">nodeToFragment</span><span style="color:#F8F8F2;">(node, vm)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.$frag</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Compile</span><span style="color:#F8F8F2;">.prototype </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">nodeToFragment</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">node</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">vm</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> self </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">this</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> frag </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#50FA7B;">createDocumentFragment</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> child</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">while</span><span style="color:#F8F8F2;"> ((child </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> node.firstChild)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">([child])</span></span>
<span class="line"><span style="color:#F8F8F2;">      self.</span><span style="color:#50FA7B;">compileElement</span><span style="color:#F8F8F2;">(child, vm)</span></span>
<span class="line"><span style="color:#F8F8F2;">      frag.</span><span style="color:#50FA7B;">append</span><span style="color:#F8F8F2;">(child) </span><span style="color:#6272A4;">// 将所有子节点添加到fragment中</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> frag</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">compileElement</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">node</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">vm</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> reg </span><span style="color:#FF79C6;">=</span><span style="color:#F1FA8C;"> </span><span style="color:#FF5555;">/</span><span style="color:#F1FA8C;">\\{\\{</span><span style="color:#FFB86C;">(</span><span style="color:#BD93F9;">.</span><span style="color:#FF79C6;">*</span><span style="color:#FFB86C;">)</span><span style="color:#F1FA8C;">\\}\\}</span><span style="color:#FF5555;">/</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">//节点类型为元素(input元素这里)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (node.nodeType </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> attr </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> node.attributes</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#6272A4;">// 解析属性</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> attr.length; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (attr[i].nodeName </span><span style="color:#FF79C6;">==</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">v-model</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#6272A4;">//遍历属性节点找到v-model的属性</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> attr[i].nodeValue </span><span style="color:#6272A4;">// 获取v-model绑定的属性名</span></span>
<span class="line"><span style="color:#F8F8F2;">          node.</span><span style="color:#50FA7B;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">input</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">e</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            </span><span style="color:#6272A4;">// 给相应的data属性赋值，进而触发该属性的set方法</span></span>
<span class="line"><span style="color:#F8F8F2;">            vm[name] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> e.target.value</span></span>
<span class="line"><span style="color:#F8F8F2;">          })</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Watcher</span><span style="color:#F8F8F2;">(vm, node, name, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">value</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#6272A4;">//创建新的watcher，会触发函数向对应属性的dep数组中添加订阅者，</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">//节点类型为text</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (node.nodeType </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">3</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (reg.</span><span style="color:#50FA7B;">test</span><span style="color:#F8F8F2;">(node.nodeValue)) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FF79C6;">var</span><span style="color:#F8F8F2;"> name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> RegExp.$1 </span><span style="color:#6272A4;">// 获取匹配到的字符串</span></span>
<span class="line"><span style="color:#F8F8F2;">        name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> name.</span><span style="color:#50FA7B;">trim</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Watcher</span><span style="color:#F8F8F2;">(vm, node, name, </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">nodeValue</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>4.3 watcher 实现</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Watcher</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">vm</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">node</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">name</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">type</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  Dep.target </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">this</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.name </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> name</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.node </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> node</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.vm </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> vm</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.type </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> type</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">update</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  Dep.target </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">null</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Watcher</span><span style="color:#F8F8F2;">.prototype </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">update</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.node[</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.type] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.value </span><span style="color:#6272A4;">// 订阅者执行相应操作</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#6272A4;">// 获取data的属性值</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">get</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    console.</span><span style="color:#50FA7B;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.vm[</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.name] </span><span style="color:#6272A4;">//触发相应属性的get</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>4.4 实现 Dep 来为每个属性添加订阅者</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Dep</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.subs </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> []</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#8BE9FD;font-style:italic;">Dep</span><span style="color:#F8F8F2;">.prototype </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">addSub</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">sub</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.subs.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(sub)</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">notify</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.subs.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> (</span><span style="color:#FFB86C;font-style:italic;">sub</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      sub.</span><span style="color:#50FA7B;">update</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    })</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_5、总结" tabindex="-1">5、总结 <a class="header-anchor" href="#_5、总结" aria-label="Permalink to &quot;5、总结&quot;">​</a></h3>`,40),t=s(`<p>参考文章： <a href="https://www.cnblogs.com/libin-1/p/6893712.html" target="_blank" rel="noreferrer">vue 的双向绑定原理及实现</a></p><h3 id="简易版本-vue2-双向数据绑定" tabindex="-1">简易版本 Vue2 双向数据绑定 <a class="header-anchor" href="#简易版本-vue2-双向数据绑定" aria-label="Permalink to &quot;简易版本 Vue2 双向数据绑定&quot;">​</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">id</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">app</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  订阅视图1：</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">span</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">class</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">box1</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF79C6;">span</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  订阅视图2：</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">span</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">class</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">box2</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF79C6;">span</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">src</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">index.js</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> obj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {}</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">dataRes</span><span style="color:#F8F8F2;">({ data</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> obj, tag</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">view1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, dataKey</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">one</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, selector</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">.box1</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> })</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">dataRes</span><span style="color:#F8F8F2;">({ data</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> obj, tag</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">view2</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, dataKey</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">two</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, selector</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">.box2</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  obj.one </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">这是视图一</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">  obj.two </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">这是视图二</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// // 订阅器模型</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> Dep </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#6272A4;">// 容器</span></span>
<span class="line"><span style="color:#F8F8F2;">  container</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> {},</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#6272A4;">// 添加订阅</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">listen</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">key</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">fn</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    ;(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.container[key] </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> (</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.container[key] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [])).</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">(fn)</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#6272A4;">// 发布</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">trigger</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> key </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#8BE9FD;font-style:italic;">Array</span><span style="color:#F8F8F2;">.prototype.shift.</span><span style="color:#50FA7B;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">arguments</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">      fns </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.container[key]</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#F8F8F2;">fns </span><span style="color:#FF79C6;">||</span><span style="color:#F8F8F2;"> fns.length </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">return</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> i </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">, len </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> fns.length; i </span><span style="color:#FF79C6;">&lt;</span><span style="color:#F8F8F2;"> len; i</span><span style="color:#FF79C6;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      fns[i].</span><span style="color:#50FA7B;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">, </span><span style="color:#BD93F9;font-style:italic;">arguments</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// for (let i = 0, fn; (fn = fns[i++]); ) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">//   fn.apply(this, arguments);</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// }</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6272A4;">// 数据劫持</span></span>
<span class="line"><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">dataRes</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> ({ </span><span style="color:#FFB86C;font-style:italic;">data</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">tag</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">dataKey</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">selector</span><span style="color:#F8F8F2;"> }) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">    el </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> document.</span><span style="color:#50FA7B;">querySelector</span><span style="color:#F8F8F2;">(selector)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  Object.</span><span style="color:#50FA7B;">defineProperty</span><span style="color:#F8F8F2;">(data, dataKey, {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> value</span></span>
<span class="line"><span style="color:#F8F8F2;">    },</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">val</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> val</span></span>
<span class="line"><span style="color:#F8F8F2;">      Dep.</span><span style="color:#50FA7B;">trigger</span><span style="color:#F8F8F2;">(tag, val)</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  Dep.</span><span style="color:#50FA7B;">listen</span><span style="color:#F8F8F2;">(tag, (</span><span style="color:#FFB86C;font-style:italic;">text</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    el.innerHTML </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> text</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="简易版本-vue3-双向数据绑定" tabindex="-1">简易版本 Vue3 双向数据绑定 <a class="header-anchor" href="#简易版本-vue3-双向数据绑定" aria-label="Permalink to &quot;简易版本 Vue3 双向数据绑定&quot;">​</a></h3><p>功能：通过 v-model 绑定一个值的同时，v-bind 的 dom 元素可以实现双向数据绑定。</p><p>代码如下:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">id</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">container</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  用户名：</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">input</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">type</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">text</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">id</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">user</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">v-model</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">text</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">is-number</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  密码：</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">input</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">type</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">password</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">v-model</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">password</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;"> /&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">h1</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">v-bind</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">text</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF79C6;">h1</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">h2</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">v-bind</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">password</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF79C6;">h2</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">const</span><span style="color:#F8F8F2;"> container </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#FF79C6;">...</span><span style="color:#F8F8F2;">document.</span><span style="color:#50FA7B;">querySelector</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">#container</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">).children]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> proxyObj </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;font-weight:bold;">new</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;">Proxy</span><span style="color:#F8F8F2;">(</span></span>
<span class="line"><span style="color:#F8F8F2;">    { text</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;&#39;</span><span style="color:#F8F8F2;">, password</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;&#39;</span><span style="color:#F8F8F2;"> },</span></span>
<span class="line"><span style="color:#F8F8F2;">    {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#50FA7B;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">property</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FF79C6;">return</span><span style="color:#F8F8F2;"> target[property]</span></span>
<span class="line"><span style="color:#F8F8F2;">      },</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#50FA7B;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#FFB86C;font-style:italic;">target</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">propName</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">propValue</span><span style="color:#F8F8F2;">, </span><span style="color:#FFB86C;font-style:italic;">receiver</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        </span><span style="color:#FF79C6;">let</span><span style="color:#F8F8F2;"> isCanEdit </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">        container.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">dom</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (dom.</span><span style="color:#50FA7B;">getAttribute</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">v-bind</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> propName) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            dom.innerHTML </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> propValue</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">          </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (dom.</span><span style="color:#50FA7B;">getAttribute</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">v-model</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> propName) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            dom.value </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> propValue</span></span>
<span class="line"><span style="color:#F8F8F2;">          }</span></span>
<span class="line"><span style="color:#F8F8F2;">        })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        target[propName] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> propValue</span></span>
<span class="line"><span style="color:#F8F8F2;">      }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">  container.</span><span style="color:#50FA7B;">forEach</span><span style="color:#F8F8F2;">((</span><span style="color:#FFB86C;font-style:italic;">dom</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (dom.</span><span style="color:#50FA7B;">getAttribute</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">v-model</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) </span><span style="color:#FF79C6;">in</span><span style="color:#F8F8F2;"> proxyObj) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      dom.</span><span style="color:#50FA7B;">addEventListener</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">input</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FF79C6;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F8F8F2;">        proxyObj[</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">getAttribute</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">v-model</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">)] </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.value</span></span>
<span class="line"><span style="color:#F8F8F2;">      })</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  })</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>首先获取到所有的 dom 节点，然后使用<code>Proxy</code>代理<code>{text: &quot;&quot;, password: &quot;&quot;}</code>对象。 遍历所有的 dom 节点，如果某个节点有<code>v-model</code>属性，且属性值在代理对象中，那么就监听输入框的变化， 将该节点的值（input 框内的值）赋值给代理对象对应的属性，从而实现简单的双向数据绑定</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><code>v-model</code>和<code>v-bind</code>的属性值要相同，如都是 text 或都是 password</li><li><code>dom.addEventListener(&quot;input&quot;, function() {})</code>这里不能使用箭头函数，否则 this 指向 Window 对象</li></ul></div><h2 id="自定义组件挂载到全局" tabindex="-1">自定义组件挂载到全局 <a class="header-anchor" href="#自定义组件挂载到全局" aria-label="Permalink to &quot;自定义组件挂载到全局&quot;">​</a></h2><p>在<code>/components/selfComponents.js</code>文件中引入所需要组件</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> Vue </span><span style="color:#FF79C6;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">vue</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> Button </span><span style="color:#FF79C6;">from</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">./Button.vue</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">Vue.</span><span style="color:#50FA7B;">component</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">st-button</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, Button)</span></span>
<span class="line"></span></code></pre></div><p>在 mian.js 文件中引入</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">@/components/selfComponents</span><span style="color:#E9F284;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>在需要公共组件的界面使用<code>&lt;st-button /&gt;</code></p><h2 id="单页面应用和多页面应用的优缺点" tabindex="-1">单页面应用和多页面应用的优缺点 <a class="header-anchor" href="#单页面应用和多页面应用的优缺点" aria-label="Permalink to &quot;单页面应用和多页面应用的优缺点&quot;">​</a></h2><h3 id="单页应用-spa" tabindex="-1">单页应用 SPA <a class="header-anchor" href="#单页应用-spa" aria-label="Permalink to &quot;单页应用 SPA&quot;">​</a></h3><ul><li>优点：页面切换快 页面每次切换跳转时，页面局部刷新，JS、CSS 等公共资源仅加载一次</li><li>缺点： <ul><li>首屏时间慢 首屏时需要请求 HTML，要加载公共资源</li><li>SEO 效果差 搜索引擎只认识 HTML 里的内容，不认识 JS 的内容，而单页应用的内容都是靠 JS 渲染生成出来的，搜索引擎不识别这部分内容</li></ul></li></ul><h3 id="多页应用-mpa" tabindex="-1">多页应用 MPA <a class="header-anchor" href="#多页应用-mpa" aria-label="Permalink to &quot;多页应用 MPA&quot;">​</a></h3><ul><li><p>优点：</p><ul><li>首屏时间快 访问页面的时候，发送一个 HTTP 请求返回一个 HTML，页面就会展示出来</li><li>SEO 效果好 搜索引擎通过识别 HTML 内容来给网页排名</li></ul></li><li><p>缺点：页面切换慢 多页面跳转需要刷新所有资源</p></li></ul><h2 id="服务端渲染-ssr" tabindex="-1">服务端渲染 SSR <a class="header-anchor" href="#服务端渲染-ssr" aria-label="Permalink to &quot;服务端渲染 SSR&quot;">​</a></h2><h2 id="keep-alive" tabindex="-1">keep-alive <a class="header-anchor" href="#keep-alive" aria-label="Permalink to &quot;keep-alive&quot;">​</a></h2><p>场景：从列表页进入详情页，返回时要保持以前的搜索条件和页数。即从详情页返回列表页不刷新，从其他菜单页面进入列表页要刷新</p><p>方式一： 使用 keep-alive</p><p>router.js</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">  path: </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">device</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  name: </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">device</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">  component: () </span><span style="color:#FF79C6;">=&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#FF79C6;">import</span><span style="color:#F8F8F2;">(</span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">@/views/device/index</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">),</span></span>
<span class="line"><span style="color:#F8F8F2;">  meta: { title: </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">设备列表</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, keepAlive: </span><span style="color:#BD93F9;">true</span><span style="color:#F8F8F2;">, isBack: </span><span style="color:#BD93F9;">false</span><span style="color:#F8F8F2;"> }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>在列表页</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">activated</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#6272A4;">// 从其他菜单页面进入</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#FF79C6;">!</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.$route.meta.isBack) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">getList</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      </span><span style="color:#6272A4;">//详情页返回操作</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#50FA7B;">beforeRouteEnter</span><span style="color:#F8F8F2;">(to, from, next) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (from.path </span><span style="color:#FF79C6;">===</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">/list/detail</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">      to.meta.isBack </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#FF79C6;">else</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">      to.meta.isBack </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">false</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#50FA7B;">next</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">  },</span></span>
<span class="line"></span></code></pre></div><p>详情页</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">returnPage</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.$router.</span><span style="color:#50FA7B;">go</span><span style="color:#F8F8F2;">(</span><span style="color:#FF79C6;">-</span><span style="color:#BD93F9;">1</span><span style="color:#F8F8F2;">)</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><p>方式二、将参数传递给详情页，返回时将参数带回列表页</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#6272A4;">// listQuery是查询参数</span></span>
<span class="line"><span style="color:#50FA7B;">intoDetail</span><span style="color:#F8F8F2;">(row) {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.$router.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">({ name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">detail</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, params</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { id</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> row.id, </span><span style="color:#FF79C6;">...</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.listQuery } })</span></span>
<span class="line"><span style="color:#F8F8F2;">},</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">created</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">if</span><span style="color:#F8F8F2;"> (Object.</span><span style="color:#50FA7B;">keys</span><span style="color:#F8F8F2;">(</span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.$route.params).length </span><span style="color:#FF79C6;">&gt;</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;">0</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">    </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.listQuery </span><span style="color:#FF79C6;">=</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.$route.params.listQuery</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.</span><span style="color:#50FA7B;">getList</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">},</span></span>
<span class="line"></span></code></pre></div><p>详情页</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dracula"><code><span class="line"><span style="color:#50FA7B;">returnPage</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#FF79C6;">delete</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.$route.params.id</span></span>
<span class="line"><span style="color:#F8F8F2;">  </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.$router.</span><span style="color:#50FA7B;">push</span><span style="color:#F8F8F2;">({ name</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#E9F284;">&#39;</span><span style="color:#F1FA8C;">list</span><span style="color:#E9F284;">&#39;</span><span style="color:#F8F8F2;">, params</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> { listQuery</span><span style="color:#FF79C6;">:</span><span style="color:#F8F8F2;"> </span><span style="color:#BD93F9;font-style:italic;">this</span><span style="color:#F8F8F2;">.$route.params } })</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="插槽-slot" tabindex="-1">插槽 slot <a class="header-anchor" href="#插槽-slot" aria-label="Permalink to &quot;插槽 slot&quot;">​</a></h2><p>在组件中用来分发内容，简单说就是在组件内部可以扩展内容</p><h3 id="匿名插槽" tabindex="-1">匿名插槽 <a class="header-anchor" href="#匿名插槽" aria-label="Permalink to &quot;匿名插槽&quot;">​</a></h3><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">// TestOne.vue</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">template</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#FF79C6;">slot</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF79C6;">slot</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;/</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">template</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">// 在别的组件使用</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">template</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#FF5555;font-style:italic;text-decoration:underline;">TestOne</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#FF79C6;">h1</span><span style="color:#F8F8F2;">&gt;可以放任意内容&lt;/</span><span style="color:#FF79C6;">h1</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;/</span><span style="color:#FF5555;font-style:italic;text-decoration:underline;">TestOne</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;/</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">template</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="具名插槽" tabindex="-1">具名插槽 <a class="header-anchor" href="#具名插槽" aria-label="Permalink to &quot;具名插槽&quot;">​</a></h3><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">// TestTwo.vue</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">template</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    // 具名插槽</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#FF79C6;">h1</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#FF79C6;">slot</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">name</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">hName</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF79C6;">slot</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;/</span><span style="color:#FF79C6;">h1</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#FF79C6;">span</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#FF79C6;">slot</span><span style="color:#F8F8F2;"> </span><span style="color:#50FA7B;font-style:italic;">name</span><span style="color:#FF79C6;">=</span><span style="color:#E9F284;">&quot;</span><span style="color:#F1FA8C;">spanName</span><span style="color:#E9F284;">&quot;</span><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#FF79C6;">slot</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;/</span><span style="color:#FF79C6;">span</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;/</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">template</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">// 在别的组件使用</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#FF79C6;">template</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;</span><span style="color:#FF5555;font-style:italic;text-decoration:underline;">TestTwo</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#FF79C6;">template</span><span style="color:#F8F8F2;"> #</span><span style="color:#50FA7B;font-style:italic;">hName</span><span style="color:#F8F8F2;">&gt;111&lt;/</span><span style="color:#FF79C6;">template</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">      &lt;</span><span style="color:#FF79C6;">template</span><span style="color:#F8F8F2;"> #</span><span style="color:#50FA7B;font-style:italic;">spanName</span><span style="color:#F8F8F2;">&gt;222&lt;/</span><span style="color:#FF79C6;">template</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">    &lt;/</span><span style="color:#FF5555;font-style:italic;text-decoration:underline;">TestTwo</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">  &lt;/</span><span style="color:#FF79C6;">div</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#FF79C6;">template</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="动态绑定样式" tabindex="-1">动态绑定样式 <a class="header-anchor" href="#动态绑定样式" aria-label="Permalink to &quot;动态绑定样式&quot;">​</a></h2><h3 id="动态绑定-class" tabindex="-1">动态绑定 class <a class="header-anchor" href="#动态绑定-class" aria-label="Permalink to &quot;动态绑定 class&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">// 对象形式</span></span>
<span class="line"><span style="color:#F8F8F2;">:class=&quot;{&#39;p1&#39; : true}&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">:class=&quot;{&#39;p1&#39; : false, &#39;p&#39;: true}&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span>
<span class="line"><span style="color:#F8F8F2;">// 数组形式</span></span>
<span class="line"><span style="color:#F8F8F2;">:class=&quot;[&#39;p1&#39;, &#39;p2&#39;]&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">:class=&quot;[{ &#39;p1&#39;: true }]&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">:class=&quot;[{ &#39;p1&#39;: false }, &#39;p2&#39;]</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span>
<span class="line"><span style="color:#F8F8F2;">// 三元表达式</span></span>
<span class="line"><span style="color:#F8F8F2;">:class=&quot;[ 1 &lt; 2 ? &#39;p1&#39; : &#39;p2&#39; ]&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span>
<span class="line"><span style="color:#F8F8F2;">// 回调函数</span></span>
<span class="line"><span style="color:#F8F8F2;">:class=&quot;setClass&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span>
<span class="line"><span style="color:#F8F8F2;">method: {</span></span>
<span class="line"><span style="color:#F8F8F2;">  setclass () {</span></span>
<span class="line"><span style="color:#F8F8F2;">    return &#39;p1&#39;;</span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre></div><h3 id="动态绑定style" tabindex="-1">动态绑定style <a class="header-anchor" href="#动态绑定style" aria-label="Permalink to &quot;动态绑定style&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dracula"><code><span class="line"><span style="color:#F8F8F2;">// 对象形式</span></span>
<span class="line"><span style="color:#F8F8F2;">:style=&quot;{ color: activeColor, fontSize: fontSize + &#39;px&#39; }&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">:style=&quot;{ color: index == 0 ? &#39;#f00&#39; : &#39;#000&#39; }&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span>
<span class="line"><span style="color:#F8F8F2;">// 数组形式</span></span>
<span class="line"><span style="color:#F8F8F2;">:style=&quot;[style1, style2]&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">:style=&quot;[{ color: index == 0  &#39;#f00&#39;: &#39;#000&#39; }, { fontSize: &#39;20px&#39; }]&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span>
<span class="line"><span style="color:#F8F8F2;">// 三元表达式，参考前两个</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span>
<span class="line"><span style="color:#F8F8F2;">// 浏览器会根据运行支持情况进行选择</span></span>
<span class="line"><span style="color:#F8F8F2;">:style=&quot;{ display: [&#39;-webkit-box&#39;, &#39;-ms-flexbox&#39;, &#39;flex&#39;] }&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span>
<span class="line"><span style="color:#F8F8F2;">// 绑定data对象</span></span>
<span class="line"><span style="color:#F8F8F2;">:style=&quot;styleObject&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span>
<span class="line"><span style="color:#F8F8F2;">data() {</span></span>
<span class="line"><span style="color:#F8F8F2;">  return{</span></span>
<span class="line"><span style="color:#F8F8F2;">    styleObject: { color: &#39;#f00&#39;, fontSize: &#39;18px&#39; }  </span></span>
<span class="line"><span style="color:#F8F8F2;">  }</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"><span style="color:#F8F8F2;"></span></span></code></pre></div>`,47);function c(r,y,i,d,C,u){return o(),a("div",null,[e,l("p",null,"首先我们为每个 vue 属性用 Object.defineProperty()实现数据劫持，为每个属性分配一个订阅者集合的管理数组 dep；然后在编译的时候在该属性的数组 dep 中添加订阅者，v-model 会添加一个订阅者，"+p()+"也会，v-bind 也会，只要用到该属性的指令理论上都会，接着为 input 会添加监听事件，修改值就会为该属性赋值，触发该属性的 set 方法，在 set 方法内通知订阅者数组 dep，订阅者数组循环调用各订阅者的 update 方法更新视图。",1),t])}const g=n(F,[["render",c]]);export{h as __pageData,g as default};
